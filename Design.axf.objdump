
H:/DE10/Test/Design.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 58 42 00 00 5c 42 00 00 60 42 00 00     @...XB..\B..`B..
      30:	64 42 00 00 54 42 00 00 68 42 00 00 6c 42 00 00     dB..TB..hB..lB..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000ec1 	bl	3be0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00004394 	.word	0x00004394

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00005008 	.word	0x00005008

00000124 <__cs3_heap_start_ptr>:
     124:	00005560 	.word	0x00005560

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00005010 	.word	0x00005010
     170:	00005013 	.word	0x00005013
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00005010 	.word	0x00005010
     1bc:	00005010 	.word	0x00005010
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00005010 	.word	0x00005010
     200:	00000000 	.word	0x00000000
     204:	00004308 	.word	0x00004308

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00004308 	.word	0x00004308
     250:	00005014 	.word	0x00005014
     254:	00004398 	.word	0x00004398
     258:	00000000 	.word	0x00000000

0000025c <ReadSwitches>:



int ReadSwitches(void)
{
    return *(ptr) %8;
     25c:	e30433a0 	movw	r3, #17312	; 0x43a0
     260:	e3403000 	movt	r3, #0
     264:	e5933000 	ldr	r3, [r3]
     268:	e5d30000 	ldrb	r0, [r3]
}
     26c:	e2000007 	and	r0, r0, #7
     270:	e12fff1e 	bx	lr

00000274 <activeLeft>:



void activeLeft()
{
	*led=0b0000000001;
     274:	e30433a0 	movw	r3, #17312	; 0x43a0
     278:	e3403000 	movt	r3, #0
     27c:	e5933004 	ldr	r3, [r3, #4]
     280:	e3a02001 	mov	r2, #1
     284:	e5c32000 	strb	r2, [r3]
	if(x>=1&& dir_x == 1)
     288:	e305302c 	movw	r3, #20524	; 0x502c
     28c:	e3403000 	movt	r3, #0
     290:	e5933000 	ldr	r3, [r3]
     294:	e3530000 	cmp	r3, #0
     298:	d12fff1e 	bxle	lr
     29c:	e305302c 	movw	r3, #20524	; 0x502c
     2a0:	e3403000 	movt	r3, #0
     2a4:	e5933004 	ldr	r3, [r3, #4]
     2a8:	e1530002 	cmp	r3, r2
     2ac:	112fff1e 	bxne	lr
	{
		x -= dir_x;
     2b0:	e305302c 	movw	r3, #20524	; 0x502c
     2b4:	e3403000 	movt	r3, #0
     2b8:	e5931000 	ldr	r1, [r3]
     2bc:	e5932004 	ldr	r2, [r3, #4]
     2c0:	e0622001 	rsb	r2, r2, r1
     2c4:	e5832000 	str	r2, [r3]
     2c8:	e12fff1e 	bx	lr

000002cc <activeRight>:
	
}

void activeRight()
{
	*led=0b0000000010;
     2cc:	e30433a0 	movw	r3, #17312	; 0x43a0
     2d0:	e3403000 	movt	r3, #0
     2d4:	e5933004 	ldr	r3, [r3, #4]
     2d8:	e3a02002 	mov	r2, #2
     2dc:	e5c32000 	strb	r2, [r3]
	if(x + length <= (SCREEN_WIDTH - 1)&& dir_x == 1)
     2e0:	e305302c 	movw	r3, #20524	; 0x502c
     2e4:	e3403000 	movt	r3, #0
     2e8:	e5932000 	ldr	r2, [r3]
     2ec:	e5933008 	ldr	r3, [r3, #8]
     2f0:	e0823003 	add	r3, r2, r3
     2f4:	e353007f 	cmp	r3, #127	; 0x7f
     2f8:	c12fff1e 	bxgt	lr
     2fc:	e305302c 	movw	r3, #20524	; 0x502c
     300:	e3403000 	movt	r3, #0
     304:	e5933004 	ldr	r3, [r3, #4]
     308:	e3530001 	cmp	r3, #1
     30c:	112fff1e 	bxne	lr
	{
		x += dir_x;
     310:	e305302c 	movw	r3, #20524	; 0x502c
     314:	e3403000 	movt	r3, #0
     318:	e5931000 	ldr	r1, [r3]
     31c:	e5932004 	ldr	r2, [r3, #4]
     320:	e0812002 	add	r2, r1, r2
     324:	e5832000 	str	r2, [r3]
     328:	e12fff1e 	bx	lr

0000032c <activeUp>:
	
}

void activeUp()
{
	*led=0b0000000100;
     32c:	e30433a0 	movw	r3, #17312	; 0x43a0
     330:	e3403000 	movt	r3, #0
     334:	e5933004 	ldr	r3, [r3, #4]
     338:	e3a02004 	mov	r2, #4
     33c:	e5c32000 	strb	r2, [r3]
	if(y + length <= SCREEN_HEIGHT - 2&& dir_y == 1)
     340:	e305302c 	movw	r3, #20524	; 0x502c
     344:	e3403000 	movt	r3, #0
     348:	e593200c 	ldr	r2, [r3, #12]
     34c:	e5933008 	ldr	r3, [r3, #8]
     350:	e0823003 	add	r3, r2, r3
     354:	e353003e 	cmp	r3, #62	; 0x3e
     358:	c12fff1e 	bxgt	lr
     35c:	e305302c 	movw	r3, #20524	; 0x502c
     360:	e3403000 	movt	r3, #0
     364:	e5933010 	ldr	r3, [r3, #16]
     368:	e3530001 	cmp	r3, #1
     36c:	112fff1e 	bxne	lr
	{
	y += dir_y;
     370:	e305302c 	movw	r3, #20524	; 0x502c
     374:	e3403000 	movt	r3, #0
     378:	e593100c 	ldr	r1, [r3, #12]
     37c:	e5932010 	ldr	r2, [r3, #16]
     380:	e0812002 	add	r2, r1, r2
     384:	e583200c 	str	r2, [r3, #12]
     388:	e12fff1e 	bx	lr

0000038c <activeDown>:
	
}

void activeDown()
{
	*led=0b0000001000;
     38c:	e30433a0 	movw	r3, #17312	; 0x43a0
     390:	e3403000 	movt	r3, #0
     394:	e5933004 	ldr	r3, [r3, #4]
     398:	e3a02008 	mov	r2, #8
     39c:	e5c32000 	strb	r2, [r3]
	if(y >= 1 && dir_y == 1)
     3a0:	e305302c 	movw	r3, #20524	; 0x502c
     3a4:	e3403000 	movt	r3, #0
     3a8:	e593300c 	ldr	r3, [r3, #12]
     3ac:	e3530000 	cmp	r3, #0
     3b0:	d12fff1e 	bxle	lr
     3b4:	e305302c 	movw	r3, #20524	; 0x502c
     3b8:	e3403000 	movt	r3, #0
     3bc:	e5933010 	ldr	r3, [r3, #16]
     3c0:	e3530001 	cmp	r3, #1
     3c4:	112fff1e 	bxne	lr
	{
	y -= dir_y;
     3c8:	e305302c 	movw	r3, #20524	; 0x502c
     3cc:	e3403000 	movt	r3, #0
     3d0:	e593100c 	ldr	r1, [r3, #12]
     3d4:	e5932010 	ldr	r2, [r3, #16]
     3d8:	e0622001 	rsb	r2, r2, r1
     3dc:	e583200c 	str	r2, [r3, #12]
     3e0:	e12fff1e 	bx	lr

000003e4 <clear>:
	}
}

void clear()
{
	*led=0x0;
     3e4:	e30433a0 	movw	r3, #17312	; 0x43a0
     3e8:	e3403000 	movt	r3, #0
     3ec:	e5933004 	ldr	r3, [r3, #4]
     3f0:	e3a02000 	mov	r2, #0
     3f4:	e5c32000 	strb	r2, [r3]
     3f8:	e12fff1e 	bx	lr

000003fc <displayX_Y>:
		
	}
}

void displayX_Y()
{
     3fc:	e92d0030 	push	{r4, r5}
	int h1x, h1y,h2x,h2y,h3x;
	h1x = x;
     400:	e305102c 	movw	r1, #20524	; 0x502c
     404:	e3401000 	movt	r1, #0
     408:	e5913000 	ldr	r3, [r1]
	h1y = y;
     40c:	e591200c 	ldr	r2, [r1, #12]
	h2x=0;
	h2y=0;
	h3x=0;
	
	if(x>=100)
     410:	e5911000 	ldr	r1, [r1]
     414:	e3510063 	cmp	r1, #99	; 0x63
     418:	ca000004 	bgt	430 <displayX_Y+0x34>
		}	
			
	}
	else
	{
		while(h1x>=10)
     41c:	e3530009 	cmp	r3, #9
	int h1x, h1y,h2x,h2y,h3x;
	h1x = x;
	h1y = y;
	h2x=0;
	h2y=0;
	h3x=0;
     420:	d3a04000 	movle	r4, #0
		}	
			
	}
	else
	{
		while(h1x>=10)
     424:	d1a01004 	movle	r1, r4
     428:	da000013 	ble	47c <displayX_Y+0x80>
     42c:	ea000009 	b	458 <displayX_Y+0x5c>
	h3x=0;
	
	if(x>=100)
	{
		h3x=1;
		h1x-=100;	
     430:	e2433064 	sub	r3, r3, #100	; 0x64
		while(h1x>=10)
     434:	e3530009 	cmp	r3, #9
     438:	da00000d 	ble	474 <displayX_Y+0x78>
void displayX_Y()
{
	int h1x, h1y,h2x,h2y,h3x;
	h1x = x;
	h1y = y;
	h2x=0;
     43c:	e3a01000 	mov	r1, #0
	{
		h3x=1;
		h1x-=100;	
		while(h1x>=10)
		{
			h1x-=10;
     440:	e243300a 	sub	r3, r3, #10
			h2x+=1;
     444:	e2811001 	add	r1, r1, #1
	
	if(x>=100)
	{
		h3x=1;
		h1x-=100;	
		while(h1x>=10)
     448:	e3530009 	cmp	r3, #9
     44c:	cafffffb 	bgt	440 <displayX_Y+0x44>
	h2y=0;
	h3x=0;
	
	if(x>=100)
	{
		h3x=1;
     450:	e3a04001 	mov	r4, #1
     454:	ea000008 	b	47c <displayX_Y+0x80>
		}	
			
	}
	else
	{
		while(h1x>=10)
     458:	e3a01000 	mov	r1, #0
		{
			h1x-=10;
     45c:	e243300a 	sub	r3, r3, #10
			h2x+=1;
     460:	e2811001 	add	r1, r1, #1
		}	
			
	}
	else
	{
		while(h1x>=10)
     464:	e3530009 	cmp	r3, #9
     468:	cafffffb 	bgt	45c <displayX_Y+0x60>
	int h1x, h1y,h2x,h2y,h3x;
	h1x = x;
	h1y = y;
	h2x=0;
	h2y=0;
	h3x=0;
     46c:	e3a04000 	mov	r4, #0
     470:	ea000001 	b	47c <displayX_Y+0x80>
	
	if(x>=100)
	{
		h3x=1;
     474:	e3a04001 	mov	r4, #1
void displayX_Y()
{
	int h1x, h1y,h2x,h2y,h3x;
	h1x = x;
	h1y = y;
	h2x=0;
     478:	e3a01000 	mov	r1, #0
			h1x-=10;
			h2x+=1;
		}
	}
	
	while(h1y>=10)
     47c:	e3520009 	cmp	r2, #9
     480:	da000005 	ble	49c <displayX_Y+0xa0>
     484:	e3a00000 	mov	r0, #0
	{
		h1y-=10;
     488:	e242200a 	sub	r2, r2, #10
		h2y+=1;
     48c:	e2800001 	add	r0, r0, #1
			h1x-=10;
			h2x+=1;
		}
	}
	
	while(h1y>=10)
     490:	e3520009 	cmp	r2, #9
     494:	cafffffb 	bgt	488 <displayX_Y+0x8c>
     498:	ea000000 	b	4a0 <displayX_Y+0xa4>
     49c:	e3a00000 	mov	r0, #0
	{
		h1y-=10;
		h2y+=1;
	}
	
	*sml = lookupTable[h1x];
     4a0:	e304c3a0 	movw	r12, #17312	; 0x43a0
     4a4:	e340c000 	movt	r12, #0
     4a8:	e59c5008 	ldr	r5, [r12, #8]
     4ac:	e08c3003 	add	r3, r12, r3
     4b0:	e5d3300c 	ldrb	r3, [r3, #12]
     4b4:	e5c53000 	strb	r3, [r5]
	*(sml + 1) = lookupTable[h2x];
     4b8:	e59c3008 	ldr	r3, [r12, #8]
     4bc:	e08c1001 	add	r1, r12, r1
     4c0:	e5d1100c 	ldrb	r1, [r1, #12]
     4c4:	e5c31001 	strb	r1, [r3, #1]
	*(sml + 2) = lookupTable[h3x];
     4c8:	e59c3008 	ldr	r3, [r12, #8]
     4cc:	e08c4004 	add	r4, r12, r4
     4d0:	e5d4100c 	ldrb	r1, [r4, #12]
     4d4:	e5c31002 	strb	r1, [r3, #2]
	*(sml2) = lookupTable[h1y];
     4d8:	e59c3018 	ldr	r3, [r12, #24]
     4dc:	e08c2002 	add	r2, r12, r2
     4e0:	e5d2200c 	ldrb	r2, [r2, #12]
     4e4:	e5c32000 	strb	r2, [r3]
	*(sml2+1) = lookupTable[h2y];	
     4e8:	e59c3018 	ldr	r3, [r12, #24]
     4ec:	e08c0000 	add	r0, r12, r0
     4f0:	e5d0200c 	ldrb	r2, [r0, #12]
     4f4:	e5c32001 	strb	r2, [r3, #1]
}
     4f8:	e8bd0030 	pop	{r4, r5}
     4fc:	e12fff1e 	bx	lr

00000500 <moveTo>:
{
	*led=0x0;
}

void moveTo(int newX,int newY)
{
     500:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     504:	e24dd00c 	sub	sp, sp, #12
     508:	e1a06000 	mov	r6, r0
     50c:	e1a07001 	mov	r7, r1
	while(x!=newX||y!=newY)
     510:	e305402c 	movw	r4, #20524	; 0x502c
     514:	e3404000 	movt	r4, #0
	{
		LCD_rect(x, y, length, length, 0, 1);
     518:	e3a0a000 	mov	r10, #0
     51c:	e3a05001 	mov	r5, #1


		displayX_Y();
		LCD_rect(x, y, length, length, 1, 1);
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
     520:	e30886a0 	movw	r8, #34464	; 0x86a0
	*led=0x0;
}

void moveTo(int newX,int newY)
{
	while(x!=newX||y!=newY)
     524:	ea000037 	b	608 <__cs3_region_zero_size_ram+0xb8>
	{
		LCD_rect(x, y, length, length, 0, 1);
     528:	e5940000 	ldr	r0, [r4]
     52c:	e594100c 	ldr	r1, [r4, #12]
     530:	e5942008 	ldr	r2, [r4, #8]
     534:	e5943008 	ldr	r3, [r4, #8]
     538:	e58da000 	str	r10, [sp]
     53c:	e58d5004 	str	r5, [sp, #4]
     540:	eb00021c 	bl	db8 <LCD_rect>
		
		if(x>newX)
     544:	e5943000 	ldr	r3, [r4]
     548:	e1560003 	cmp	r6, r3
     54c:	aa000004 	bge	564 <__cs3_region_zero_size_ram+0x14>
		{
			x -= dir_x;
     550:	e5942000 	ldr	r2, [r4]
     554:	e5943004 	ldr	r3, [r4, #4]
     558:	e0633002 	rsb	r3, r3, r2
     55c:	e5843000 	str	r3, [r4]
     560:	ea000005 	b	57c <__cs3_region_zero_size_ram+0x2c>
		}
		else if(x<newX)
     564:	e5943000 	ldr	r3, [r4]
     568:	e1560003 	cmp	r6, r3
		{
			x += dir_x;
     56c:	c5942000 	ldrgt	r2, [r4]
     570:	c5943004 	ldrgt	r3, [r4, #4]
     574:	c0823003 	addgt	r3, r2, r3
     578:	c5843000 	strgt	r3, [r4]
		}
		
		if(y>newY)
     57c:	e594300c 	ldr	r3, [r4, #12]
     580:	e1570003 	cmp	r7, r3
     584:	aa000004 	bge	59c <__cs3_region_zero_size_ram+0x4c>
		{
			y -= dir_y;
     588:	e594200c 	ldr	r2, [r4, #12]
     58c:	e5943010 	ldr	r3, [r4, #16]
     590:	e0633002 	rsb	r3, r3, r2
     594:	e584300c 	str	r3, [r4, #12]
     598:	ea000005 	b	5b4 <__cs3_region_zero_size_ram+0x64>
		}
		else if(y<newY)
     59c:	e594300c 	ldr	r3, [r4, #12]
     5a0:	e1570003 	cmp	r7, r3
		{
			y += dir_y;
     5a4:	c594200c 	ldrgt	r2, [r4, #12]
     5a8:	c5943010 	ldrgt	r3, [r4, #16]
     5ac:	c0823003 	addgt	r3, r2, r3
     5b0:	c584300c 	strgt	r3, [r4, #12]
		}


		displayX_Y();
     5b4:	ebffff90 	bl	3fc <displayX_Y>
		LCD_rect(x, y, length, length, 1, 1);
     5b8:	e5940000 	ldr	r0, [r4]
     5bc:	e594100c 	ldr	r1, [r4, #12]
     5c0:	e5942008 	ldr	r2, [r4, #8]
     5c4:	e5943008 	ldr	r3, [r4, #8]
     5c8:	e58d5000 	str	r5, [sp]
     5cc:	e58d5004 	str	r5, [sp, #4]
     5d0:	eb0001f8 	bl	db8 <LCD_rect>
		refresh_buffer();
     5d4:	eb000195 	bl	c30 <refresh_buffer>
		for (delay_count = 100000; delay_count != 0; --delay_count);
     5d8:	e1a03008 	mov	r3, r8
     5dc:	e7df3815 	bfi	r3, r5, #16, #16
     5e0:	e5843014 	str	r3, [r4, #20]
     5e4:	e5943014 	ldr	r3, [r4, #20]
     5e8:	e3530000 	cmp	r3, #0
     5ec:	0a000005 	beq	608 <__cs3_region_zero_size_ram+0xb8>
     5f0:	e5943014 	ldr	r3, [r4, #20]
     5f4:	e2433001 	sub	r3, r3, #1
     5f8:	e5843014 	str	r3, [r4, #20]
     5fc:	e5943014 	ldr	r3, [r4, #20]
     600:	e3530000 	cmp	r3, #0
     604:	1afffff9 	bne	5f0 <__cs3_region_zero_size_ram+0xa0>
	*led=0x0;
}

void moveTo(int newX,int newY)
{
	while(x!=newX||y!=newY)
     608:	e5943000 	ldr	r3, [r4]
     60c:	e1530006 	cmp	r3, r6
     610:	1affffc4 	bne	528 <moveTo+0x28>
     614:	e594300c 	ldr	r3, [r4, #12]
     618:	e1530007 	cmp	r3, r7
     61c:	1affffc1 	bne	528 <moveTo+0x28>
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
		
		
	}
}
     620:	e28dd00c 	add	sp, sp, #12
     624:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

00000628 <center>:
	}
	clear();
}

void center()
{
     628:	e92d4008 	push	{r3, lr}
	moveTo((SCREEN_WIDTH/2),(SCREEN_HEIGHT/2));
     62c:	e3a00040 	mov	r0, #64	; 0x40
     630:	e3a01020 	mov	r1, #32
     634:	ebffffb1 	bl	500 <moveTo>
     638:	e8bd8008 	pop	{r3, pc}

0000063c <totalCapture>:
}

void totalCapture()
{
     63c:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     640:	e24dd00c 	sub	sp, sp, #12
	moveTo(0,0);
     644:	e3a00000 	mov	r0, #0
     648:	e1a01000 	mov	r1, r0
     64c:	ebffffab 	bl	500 <moveTo>
	while(x<=SCREEN_WIDTH&&y<=(SCREEN_HEIGHT-length))
     650:	e305402c 	movw	r4, #20524	; 0x502c
     654:	e3404000 	movt	r4, #0
	{
		*led=0b1111111111;
     658:	e30463a0 	movw	r6, #17312	; 0x43a0
     65c:	e3406000 	movt	r6, #0
     660:	e3e0a000 	mvn	r10, #0
		LCD_rect(x, y, length, length, 0, 1);
     664:	e3a08000 	mov	r8, #0
     668:	e3a05001 	mov	r5, #1
		x += dir_x;

		displayX_Y();
		LCD_rect(x, y, length, length, 1, 1);
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
     66c:	e30876a0 	movw	r7, #34464	; 0x86a0
}

void totalCapture()
{
	moveTo(0,0);
	while(x<=SCREEN_WIDTH&&y<=(SCREEN_HEIGHT-length))
     670:	ea000036 	b	750 <totalCapture+0x114>
	{
		*led=0b1111111111;
     674:	e5963004 	ldr	r3, [r6, #4]
     678:	e5c3a000 	strb	r10, [r3]
		LCD_rect(x, y, length, length, 0, 1);
     67c:	e5940000 	ldr	r0, [r4]
     680:	e594100c 	ldr	r1, [r4, #12]
     684:	e5942008 	ldr	r2, [r4, #8]
     688:	e5943008 	ldr	r3, [r4, #8]
     68c:	e58d8000 	str	r8, [sp]
     690:	e58d5004 	str	r5, [sp, #4]
     694:	eb0001c7 	bl	db8 <LCD_rect>
		
		if ((x + length >= SCREEN_WIDTH - 1 && dir_x == 1) ||(x <= 0 && dir_x == -1)){
     698:	e5942000 	ldr	r2, [r4]
     69c:	e5943008 	ldr	r3, [r4, #8]
     6a0:	e0823003 	add	r3, r2, r3
     6a4:	e353007e 	cmp	r3, #126	; 0x7e
     6a8:	da000002 	ble	6b8 <totalCapture+0x7c>
     6ac:	e5943004 	ldr	r3, [r4, #4]
     6b0:	e3530001 	cmp	r3, #1
     6b4:	0a000005 	beq	6d0 <totalCapture+0x94>
     6b8:	e5943000 	ldr	r3, [r4]
     6bc:	e3530000 	cmp	r3, #0
     6c0:	ca000009 	bgt	6ec <totalCapture+0xb0>
     6c4:	e5943004 	ldr	r3, [r4, #4]
     6c8:	e3730001 	cmn	r3, #1
     6cc:	1a000006 	bne	6ec <totalCapture+0xb0>
			y += length;
     6d0:	e594200c 	ldr	r2, [r4, #12]
     6d4:	e5943008 	ldr	r3, [r4, #8]
     6d8:	e0823003 	add	r3, r2, r3
     6dc:	e584300c 	str	r3, [r4, #12]
            dir_x = -dir_x;
     6e0:	e5943004 	ldr	r3, [r4, #4]
     6e4:	e2633000 	rsb	r3, r3, #0
     6e8:	e5843004 	str	r3, [r4, #4]
		}
		x += dir_x;
     6ec:	e5942000 	ldr	r2, [r4]
     6f0:	e5943004 	ldr	r3, [r4, #4]
     6f4:	e0823003 	add	r3, r2, r3
     6f8:	e5843000 	str	r3, [r4]

		displayX_Y();
     6fc:	ebffff3e 	bl	3fc <displayX_Y>
		LCD_rect(x, y, length, length, 1, 1);
     700:	e5940000 	ldr	r0, [r4]
     704:	e594100c 	ldr	r1, [r4, #12]
     708:	e5942008 	ldr	r2, [r4, #8]
     70c:	e5943008 	ldr	r3, [r4, #8]
     710:	e58d5000 	str	r5, [sp]
     714:	e58d5004 	str	r5, [sp, #4]
     718:	eb0001a6 	bl	db8 <LCD_rect>
		refresh_buffer();
     71c:	eb000143 	bl	c30 <refresh_buffer>
		for (delay_count = 100000; delay_count != 0; --delay_count);
     720:	e1a03007 	mov	r3, r7
     724:	e7df3815 	bfi	r3, r5, #16, #16
     728:	e5843014 	str	r3, [r4, #20]
     72c:	e5943014 	ldr	r3, [r4, #20]
     730:	e3530000 	cmp	r3, #0
     734:	0a000005 	beq	750 <totalCapture+0x114>
     738:	e5943014 	ldr	r3, [r4, #20]
     73c:	e2433001 	sub	r3, r3, #1
     740:	e5843014 	str	r3, [r4, #20]
     744:	e5943014 	ldr	r3, [r4, #20]
     748:	e3530000 	cmp	r3, #0
     74c:	1afffff9 	bne	738 <totalCapture+0xfc>
}

void totalCapture()
{
	moveTo(0,0);
	while(x<=SCREEN_WIDTH&&y<=(SCREEN_HEIGHT-length))
     750:	e5943000 	ldr	r3, [r4]
     754:	e3530080 	cmp	r3, #128	; 0x80
     758:	ca000004 	bgt	770 <totalCapture+0x134>
     75c:	e5942008 	ldr	r2, [r4, #8]
     760:	e594300c 	ldr	r3, [r4, #12]
     764:	e2622040 	rsb	r2, r2, #64	; 0x40
     768:	e1520003 	cmp	r2, r3
     76c:	aaffffc0 	bge	674 <totalCapture+0x38>
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
		
		
	}
	clear();
     770:	ebffff1b 	bl	3e4 <clear>
}
     774:	e28dd00c 	add	sp, sp, #12
     778:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

0000077c <panoramaZ>:
	}
	clear();
}

void panoramaZ()
{
     77c:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     780:	e24dd00c 	sub	sp, sp, #12
	moveTo((SCREEN_WIDTH/2),(SCREEN_HEIGHT-(length+3)));
     784:	e305302c 	movw	r3, #20524	; 0x502c
     788:	e3403000 	movt	r3, #0
     78c:	e5931008 	ldr	r1, [r3, #8]
     790:	e3a00040 	mov	r0, #64	; 0x40
     794:	e261103d 	rsb	r1, r1, #61	; 0x3d
     798:	ebffff58 	bl	500 <moveTo>
	
	while(y >=1&& dir_y == 1)
     79c:	e305402c 	movw	r4, #20524	; 0x502c
     7a0:	e3404000 	movt	r4, #0
	{
		LCD_rect(x, y, length, length, 0, 1);
     7a4:	e3a0a000 	mov	r10, #0
     7a8:	e3a05001 	mov	r5, #1
		y -= dir_y;
		*led=0b1111111111;
     7ac:	e30463a0 	movw	r6, #17312	; 0x43a0
     7b0:	e3406000 	movt	r6, #0
     7b4:	e3e08000 	mvn	r8, #0
		displayX_Y();
		LCD_rect(x, y, length, length, 1, 1);
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
     7b8:	e30876a0 	movw	r7, #34464	; 0x86a0

void panoramaZ()
{
	moveTo((SCREEN_WIDTH/2),(SCREEN_HEIGHT-(length+3)));
	
	while(y >=1&& dir_y == 1)
     7bc:	ea000021 	b	848 <panoramaZ+0xcc>
	{
		LCD_rect(x, y, length, length, 0, 1);
     7c0:	e5940000 	ldr	r0, [r4]
     7c4:	e594100c 	ldr	r1, [r4, #12]
     7c8:	e5942008 	ldr	r2, [r4, #8]
     7cc:	e5943008 	ldr	r3, [r4, #8]
     7d0:	e58da000 	str	r10, [sp]
     7d4:	e58d5004 	str	r5, [sp, #4]
     7d8:	eb000176 	bl	db8 <LCD_rect>
		y -= dir_y;
     7dc:	e594200c 	ldr	r2, [r4, #12]
     7e0:	e5943010 	ldr	r3, [r4, #16]
     7e4:	e0633002 	rsb	r3, r3, r2
     7e8:	e584300c 	str	r3, [r4, #12]
		*led=0b1111111111;
     7ec:	e5963004 	ldr	r3, [r6, #4]
     7f0:	e5c38000 	strb	r8, [r3]
		displayX_Y();
     7f4:	ebffff00 	bl	3fc <displayX_Y>
		LCD_rect(x, y, length, length, 1, 1);
     7f8:	e5940000 	ldr	r0, [r4]
     7fc:	e594100c 	ldr	r1, [r4, #12]
     800:	e5942008 	ldr	r2, [r4, #8]
     804:	e5943008 	ldr	r3, [r4, #8]
     808:	e58d5000 	str	r5, [sp]
     80c:	e58d5004 	str	r5, [sp, #4]
     810:	eb000168 	bl	db8 <LCD_rect>
		refresh_buffer();
     814:	eb000105 	bl	c30 <refresh_buffer>
		for (delay_count = 100000; delay_count != 0; --delay_count);
     818:	e1a03007 	mov	r3, r7
     81c:	e7df3815 	bfi	r3, r5, #16, #16
     820:	e5843014 	str	r3, [r4, #20]
     824:	e5943014 	ldr	r3, [r4, #20]
     828:	e3530000 	cmp	r3, #0
     82c:	0a000005 	beq	848 <panoramaZ+0xcc>
     830:	e5943014 	ldr	r3, [r4, #20]
     834:	e2433001 	sub	r3, r3, #1
     838:	e5843014 	str	r3, [r4, #20]
     83c:	e5943014 	ldr	r3, [r4, #20]
     840:	e3530000 	cmp	r3, #0
     844:	1afffff9 	bne	830 <panoramaZ+0xb4>

void panoramaZ()
{
	moveTo((SCREEN_WIDTH/2),(SCREEN_HEIGHT-(length+3)));
	
	while(y >=1&& dir_y == 1)
     848:	e594300c 	ldr	r3, [r4, #12]
     84c:	e3530000 	cmp	r3, #0
     850:	da000002 	ble	860 <panoramaZ+0xe4>
     854:	e5943010 	ldr	r3, [r4, #16]
     858:	e3530001 	cmp	r3, #1
     85c:	0affffd7 	beq	7c0 <panoramaZ+0x44>
		displayX_Y();
		LCD_rect(x, y, length, length, 1, 1);
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
	}
	clear();
     860:	ebfffedf 	bl	3e4 <clear>
}
     864:	e28dd00c 	add	sp, sp, #12
     868:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

0000086c <panoramaX>:
    return *(ptr) %8;
}


void panoramaX()
{
     86c:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     870:	e24dd00c 	sub	sp, sp, #12
	moveTo(0,((SCREEN_HEIGHT/2)-length/2));
     874:	e305302c 	movw	r3, #20524	; 0x502c
     878:	e3403000 	movt	r3, #0
     87c:	e5933008 	ldr	r3, [r3, #8]
     880:	e0833fa3 	add	r3, r3, r3, lsr #31
     884:	e1a010c3 	asr	r1, r3, #1
     888:	e3a00000 	mov	r0, #0
     88c:	e2611020 	rsb	r1, r1, #32
     890:	ebffff1a 	bl	500 <moveTo>
	while(x + length <= (SCREEN_WIDTH - 1))
     894:	e305402c 	movw	r4, #20524	; 0x502c
     898:	e3404000 	movt	r4, #0
	{
		LCD_rect(x, y, length, length, 0, 1);
     89c:	e3a0a000 	mov	r10, #0
     8a0:	e3a05001 	mov	r5, #1
		x += dir_x;
		*led=0b1111111111;
     8a4:	e30463a0 	movw	r6, #17312	; 0x43a0
     8a8:	e3406000 	movt	r6, #0
     8ac:	e3e08000 	mvn	r8, #0
		displayX_Y();
		LCD_rect(x, y, length, length, 1, 1);
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
     8b0:	e30876a0 	movw	r7, #34464	; 0x86a0


void panoramaX()
{
	moveTo(0,((SCREEN_HEIGHT/2)-length/2));
	while(x + length <= (SCREEN_WIDTH - 1))
     8b4:	ea000021 	b	940 <panoramaX+0xd4>
	{
		LCD_rect(x, y, length, length, 0, 1);
     8b8:	e5940000 	ldr	r0, [r4]
     8bc:	e594100c 	ldr	r1, [r4, #12]
     8c0:	e5942008 	ldr	r2, [r4, #8]
     8c4:	e5943008 	ldr	r3, [r4, #8]
     8c8:	e58da000 	str	r10, [sp]
     8cc:	e58d5004 	str	r5, [sp, #4]
     8d0:	eb000138 	bl	db8 <LCD_rect>
		x += dir_x;
     8d4:	e5942000 	ldr	r2, [r4]
     8d8:	e5943004 	ldr	r3, [r4, #4]
     8dc:	e0823003 	add	r3, r2, r3
     8e0:	e5843000 	str	r3, [r4]
		*led=0b1111111111;
     8e4:	e5963004 	ldr	r3, [r6, #4]
     8e8:	e5c38000 	strb	r8, [r3]
		displayX_Y();
     8ec:	ebfffec2 	bl	3fc <displayX_Y>
		LCD_rect(x, y, length, length, 1, 1);
     8f0:	e5940000 	ldr	r0, [r4]
     8f4:	e594100c 	ldr	r1, [r4, #12]
     8f8:	e5942008 	ldr	r2, [r4, #8]
     8fc:	e5943008 	ldr	r3, [r4, #8]
     900:	e58d5000 	str	r5, [sp]
     904:	e58d5004 	str	r5, [sp, #4]
     908:	eb00012a 	bl	db8 <LCD_rect>
		refresh_buffer();
     90c:	eb0000c7 	bl	c30 <refresh_buffer>
		for (delay_count = 100000; delay_count != 0; --delay_count);
     910:	e1a03007 	mov	r3, r7
     914:	e7df3815 	bfi	r3, r5, #16, #16
     918:	e5843014 	str	r3, [r4, #20]
     91c:	e5943014 	ldr	r3, [r4, #20]
     920:	e3530000 	cmp	r3, #0
     924:	0a000005 	beq	940 <panoramaX+0xd4>
     928:	e5943014 	ldr	r3, [r4, #20]
     92c:	e2433001 	sub	r3, r3, #1
     930:	e5843014 	str	r3, [r4, #20]
     934:	e5943014 	ldr	r3, [r4, #20]
     938:	e3530000 	cmp	r3, #0
     93c:	1afffff9 	bne	928 <panoramaX+0xbc>


void panoramaX()
{
	moveTo(0,((SCREEN_HEIGHT/2)-length/2));
	while(x + length <= (SCREEN_WIDTH - 1))
     940:	e5942000 	ldr	r2, [r4]
     944:	e5943008 	ldr	r3, [r4, #8]
     948:	e0823003 	add	r3, r2, r3
     94c:	e353007f 	cmp	r3, #127	; 0x7f
     950:	daffffd8 	ble	8b8 <panoramaX+0x4c>
		displayX_Y();
		LCD_rect(x, y, length, length, 1, 1);
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
	}
	clear();
     954:	ebfffea2 	bl	3e4 <clear>
}
     958:	e28dd00c 	add	sp, sp, #12
     95c:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

00000960 <main>:




int main(void)
{
     960:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     964:	e24dd008 	sub	sp, sp, #8


char text_top_lcd[17]    = "   INTEL FPGA   \0";
char text_bottom_lcd[17] = "COMPUTER SYSTEMS\0";

init_spim0();
     968:	eb00007c 	bl	b60 <init_spim0>
init_lcd();
     96c:	eb000090 	bl	bb4 <init_lcd>

clear_screen();
     970:	eb0000ca 	bl	ca0 <clear_screen>

/* initialize first position of box */
    x      = SCREEN_WIDTH/2;
     974:	e305402c 	movw	r4, #20524	; 0x502c
     978:	e3404000 	movt	r4, #0
     97c:	e3a03040 	mov	r3, #64	; 0x40
     980:	e5843000 	str	r3, [r4]
    y      = SCREEN_HEIGHT/2;
     984:	e3a03020 	mov	r3, #32
     988:	e584300c 	str	r3, [r4, #12]
    length = 8;
     98c:	e3a03008 	mov	r3, #8
     990:	e5843008 	str	r3, [r4, #8]
    dir_x  = 1;
     994:	e3a05001 	mov	r5, #1
     998:	e5845004 	str	r5, [r4, #4]
    dir_y  = 1;
     99c:	e5845010 	str	r5, [r4, #16]
	displayX_Y();
     9a0:	ebfffe95 	bl	3fc <displayX_Y>
    LCD_rect(x, y, length, length, 1, 1);
     9a4:	e5940000 	ldr	r0, [r4]
     9a8:	e594100c 	ldr	r1, [r4, #12]
     9ac:	e5942008 	ldr	r2, [r4, #8]
     9b0:	e5943008 	ldr	r3, [r4, #8]
     9b4:	e58d5000 	str	r5, [sp]
     9b8:	e58d5004 	str	r5, [sp, #4]
     9bc:	eb0000fd 	bl	db8 <LCD_rect>

	refresh_buffer();
     9c0:	eb00009a 	bl	c30 <refresh_buffer>




	
*(timer_ptr + 2) = 0b000;
     9c4:	e30433a0 	movw	r3, #17312	; 0x43a0
     9c8:	e3403000 	movt	r3, #0
     9cc:	e593301c 	ldr	r3, [r3, #28]
     9d0:	e3a02000 	mov	r2, #0
     9d4:	e5832008 	str	r2, [r3, #8]
int runTime = 1000000;
*(timer_ptr + 2) = 0b011;
     9d8:	e3a02003 	mov	r2, #3
     9dc:	e5832008 	str	r2, [r3, #8]

	while (1)
	{
		LCD_rect(x, y, length, length, 0, 1);
     9e0:	e305402c 	movw	r4, #20524	; 0x502c
     9e4:	e3404000 	movt	r4, #0
     9e8:	e3a08000 	mov	r8, #0
		
		if(ReadSwitches()==1)
		{
			if(*buttons == 0b1000)
     9ec:	e30463a0 	movw	r6, #17312	; 0x43a0
     9f0:	e3406000 	movt	r6, #0
		}
		
		displayX_Y();
		LCD_rect(x, y, length, length, 1, 1);
		refresh_buffer();
		for (delay_count = 100000; delay_count != 0; --delay_count);
     9f4:	e30876a0 	movw	r7, #34464	; 0x86a0
int runTime = 1000000;
*(timer_ptr + 2) = 0b011;

	while (1)
	{
		LCD_rect(x, y, length, length, 0, 1);
     9f8:	e5940000 	ldr	r0, [r4]
     9fc:	e594100c 	ldr	r1, [r4, #12]
     a00:	e5942008 	ldr	r2, [r4, #8]
     a04:	e5943008 	ldr	r3, [r4, #8]
     a08:	e58d8000 	str	r8, [sp]
     a0c:	e58d5004 	str	r5, [sp, #4]
     a10:	eb0000e8 	bl	db8 <LCD_rect>
		
		if(ReadSwitches()==1)
     a14:	ebfffe10 	bl	25c <ReadSwitches>
     a18:	e3500001 	cmp	r0, #1
     a1c:	1a000014 	bne	a74 <main+0x114>
		{
			if(*buttons == 0b1000)
     a20:	e5963020 	ldr	r3, [r6, #32]
     a24:	e5932000 	ldr	r2, [r3]
     a28:	e3520008 	cmp	r2, #8
     a2c:	1a000001 	bne	a38 <main+0xd8>
			{
				panoramaX();
     a30:	ebffff8d 	bl	86c <panoramaX>
     a34:	ea000024 	b	acc <main+0x16c>
			}
			else if(*buttons == 0b0100)
     a38:	e5932000 	ldr	r2, [r3]
     a3c:	e3520004 	cmp	r2, #4
     a40:	1a000001 	bne	a4c <main+0xec>
			{
				panoramaZ();
     a44:	ebffff4c 	bl	77c <panoramaZ>
     a48:	ea00001f 	b	acc <main+0x16c>
			}
			else if(*buttons == 0b0010)
     a4c:	e5932000 	ldr	r2, [r3]
     a50:	e3520002 	cmp	r2, #2
     a54:	1a000001 	bne	a60 <main+0x100>
			{
				center();
     a58:	ebfffef2 	bl	628 <center>
     a5c:	ea00001a 	b	acc <main+0x16c>
			}
			else if(*buttons == 0b0001)
     a60:	e5933000 	ldr	r3, [r3]
     a64:	e3530001 	cmp	r3, #1
     a68:	1a000017 	bne	acc <main+0x16c>
			{
				totalCapture();
     a6c:	ebfffef2 	bl	63c <totalCapture>
     a70:	ea000015 	b	acc <main+0x16c>
			}
			
		}
		else
		{
			if(*buttons == 0b1000)
     a74:	e5963020 	ldr	r3, [r6, #32]
     a78:	e5932000 	ldr	r2, [r3]
     a7c:	e3520008 	cmp	r2, #8
     a80:	1a000001 	bne	a8c <main+0x12c>
			{
				activeLeft();
     a84:	ebfffdfa 	bl	274 <activeLeft>
     a88:	ea00000f 	b	acc <main+0x16c>
			}
			else if(*buttons == 0b0100)
     a8c:	e5932000 	ldr	r2, [r3]
     a90:	e3520004 	cmp	r2, #4
     a94:	1a000001 	bne	aa0 <main+0x140>
			{
				activeRight();
     a98:	ebfffe0b 	bl	2cc <activeRight>
     a9c:	ea00000a 	b	acc <main+0x16c>
			}
			else if(*buttons == 0b0010)
     aa0:	e5932000 	ldr	r2, [r3]
     aa4:	e3520002 	cmp	r2, #2
     aa8:	1a000001 	bne	ab4 <main+0x154>
			{
				activeUp();
     aac:	ebfffe1e 	bl	32c <activeUp>
     ab0:	ea000005 	b	acc <main+0x16c>
			}
			else if(*buttons == 0b0001)
     ab4:	e5933000 	ldr	r3, [r3]
     ab8:	e3530001 	cmp	r3, #1
     abc:	1a000001 	bne	ac8 <main+0x168>
			{
				activeDown();
     ac0:	ebfffe31 	bl	38c <activeDown>
     ac4:	ea000000 	b	acc <main+0x16c>
			}
			else
			{
				clear();
     ac8:	ebfffe45 	bl	3e4 <clear>
			}
		}
		
		displayX_Y();
     acc:	ebfffe4a 	bl	3fc <displayX_Y>
		LCD_rect(x, y, length, length, 1, 1);
     ad0:	e5940000 	ldr	r0, [r4]
     ad4:	e594100c 	ldr	r1, [r4, #12]
     ad8:	e5942008 	ldr	r2, [r4, #8]
     adc:	e5943008 	ldr	r3, [r4, #8]
     ae0:	e58d5000 	str	r5, [sp]
     ae4:	e58d5004 	str	r5, [sp, #4]
     ae8:	eb0000b2 	bl	db8 <LCD_rect>
		refresh_buffer();
     aec:	eb00004f 	bl	c30 <refresh_buffer>
		for (delay_count = 100000; delay_count != 0; --delay_count);
     af0:	e1a03007 	mov	r3, r7
     af4:	e7df3815 	bfi	r3, r5, #16, #16
     af8:	e5843014 	str	r3, [r4, #20]
     afc:	e5943014 	ldr	r3, [r4, #20]
     b00:	e3530000 	cmp	r3, #0
     b04:	0affffbb 	beq	9f8 <main+0x98>
     b08:	e5943014 	ldr	r3, [r4, #20]
     b0c:	e2433001 	sub	r3, r3, #1
     b10:	e5843014 	str	r3, [r4, #20]
     b14:	e5943014 	ldr	r3, [r4, #20]
     b18:	e3530000 	cmp	r3, #0
     b1c:	0affffb5 	beq	9f8 <main+0x98>
     b20:	eafffff8 	b	b08 <main+0x1a8>

00000b24 <spim_write>:

void spim_write(int data)
{
    volatile int * spim0_sr = (int *) SPIM0_SR;
    volatile int * spim0_dr = (int *) SPIM0_DR;
    while (((*spim0_sr) & 0x4) != 0x4)
     b24:	e3e02aff 	mvn	r2, #1044480	; 0xff000
     b28:	e5123fd7 	ldr	r3, [r2, #-4055]	; 0xfffff029
     b2c:	e3130004 	tst	r3, #4
     b30:	0afffffc 	beq	b28 <spim_write+0x4>
        ; // check status reg for empty
    (*spim0_dr) = data;
     b34:	e3e03aff 	mvn	r3, #1044480	; 0xff000
     b38:	e5030f9f 	str	r0, [r3, #-3999]	; 0xfffff061
    while (((*spim0_sr) & 0x4) != 0x4)
     b3c:	e1a02003 	mov	r2, r3
     b40:	e5123fd7 	ldr	r3, [r2, #-4055]	; 0xfffff029
     b44:	e3130004 	tst	r3, #4
     b48:	0afffffc 	beq	b40 <spim_write+0x1c>
        ; // check fifo is empty
    while (((*spim0_sr) & 0x1) != 0x0)
     b4c:	e3e02aff 	mvn	r2, #1044480	; 0xff000
     b50:	e5123fd7 	ldr	r3, [r2, #-4055]	; 0xfffff029
     b54:	e3130001 	tst	r3, #1
     b58:	1afffffc 	bne	b50 <spim_write+0x2c>
        ; // check spim has completed the transfer
}
     b5c:	e12fff1e 	bx	lr

00000b60 <init_spim0>:
{
    volatile int * rstmgr_premodrst = (int *) HPS_RSTMGR_PREMODRST;
    volatile int * spim0            = (int *) SPIM0_BASE;

    // Take SPIM0 out of reset
    *rstmgr_premodrst = *rstmgr_premodrst & (~0x00040000);
     b60:	e3053fff 	movw	r3, #24575	; 0x5fff
     b64:	e34f3fd0 	movt	r3, #65488	; 0xffd0
     b68:	e5132feb 	ldr	r2, [r3, #-4075]	; 0xfffff015
     b6c:	e3c22701 	bic	r2, r2, #262144	; 0x40000
     b70:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015

    // Turn SPIM0 OFF
    *(spim0 + 2) = 0x00000000;
     b74:	e3e03aff 	mvn	r3, #1044480	; 0xff000
     b78:	e3a01000 	mov	r1, #0
     b7c:	e5031ff7 	str	r1, [r3, #-4087]	; 0xfffff009

    // Put SPIM0 in Tx Only Mode
    *(spim0 + 0) = *(spim0 + 0) & ~0x00000300;
     b80:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
     b84:	e3c22c03 	bic	r2, r2, #768	; 0x300
     b88:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
    *(spim0 + 0) = *(spim0 + 0) | 0x00000100;
     b8c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
     b90:	e3822c01 	orr	r2, r2, #256	; 0x100
     b94:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001

    // Set SPIM0 BAUD RATE
    *(spim0 + 5) = 0x00000040;
     b98:	e3a02040 	mov	r2, #64	; 0x40
     b9c:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015

    // Set SPIM0 Slave Enable Register
    *(spim0 + 4) = 0x00000001;
     ba0:	e3a02001 	mov	r2, #1
     ba4:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011

    // Turn off interrupts
    *(spim0 + 11) = 0x00000000;
     ba8:	e5031fd3 	str	r1, [r3, #-4051]	; 0xfffff02d

    // Turn SPIM0 ON
    *(spim0 + 2) = 0x00000001;
     bac:	e5032ff7 	str	r2, [r3, #-4087]	; 0xfffff009
     bb0:	e12fff1e 	bx	lr

00000bb4 <init_lcd>:
}

void init_lcd(void)
{
     bb4:	e92d4008 	push	{r3, lr}
    volatile int * gpio1 = (int *) HPS_GPIO1_BASE;
    // Set GPIO1's direction register for the outputs to the LCD
    *(gpio1 + 1) = *(gpio1 + 1) | 0x00009100;
     bb8:	e3093fff 	movw	r3, #40959	; 0x9fff
     bbc:	e34f3f70 	movt	r3, #65392	; 0xff70
     bc0:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
     bc4:	e3822c91 	orr	r2, r2, #37120	; 0x9100
     bc8:	e5032ffb 	str	r2, [r3, #-4091]	; 0xfffff005
    // Turn on the LCD Backlight and take it out of reset
    *(gpio1) = 0x00008100;
     bcc:	e3a02c81 	mov	r2, #33024	; 0x8100
     bd0:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001

    // Initialize LCD's registers
    spim_write(0x000000C8);
     bd4:	e3a000c8 	mov	r0, #200	; 0xc8
     bd8:	ebffffd1 	bl	b24 <spim_write>
    spim_write(0x0000002F);
     bdc:	e3a0002f 	mov	r0, #47	; 0x2f
     be0:	ebffffcf 	bl	b24 <spim_write>
    spim_write(0x00000040);
     be4:	e3a00040 	mov	r0, #64	; 0x40
     be8:	ebffffcd 	bl	b24 <spim_write>
    spim_write(0x000000B0);
     bec:	e3a000b0 	mov	r0, #176	; 0xb0
     bf0:	ebffffcb 	bl	b24 <spim_write>
    spim_write(0x00000000);
     bf4:	e3a00000 	mov	r0, #0
     bf8:	ebffffc9 	bl	b24 <spim_write>
    spim_write(0x00000010);
     bfc:	e3a00010 	mov	r0, #16
     c00:	ebffffc7 	bl	b24 <spim_write>
    spim_write(0x000000AF);
     c04:	e3a000af 	mov	r0, #175	; 0xaf
     c08:	ebffffc5 	bl	b24 <spim_write>
     c0c:	e8bd8008 	pop	{r3, pc}

00000c10 <set_mode>:
 */
void set_mode(int mode)
{
    volatile int * gpio1 = (int *) HPS_GPIO1_BASE;

    if (mode) // Enter command mode
     c10:	e3500000 	cmp	r0, #0
        *(gpio1) = (*gpio1) & (~0x00001000);
     c14:	e3093fff 	movw	r3, #40959	; 0x9fff
     c18:	e34f3f70 	movt	r3, #65392	; 0xff70
     c1c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
     c20:	13c22a01 	bicne	r2, r2, #4096	; 0x1000
    else // Enter data mode
        *(gpio1) = (*gpio1) | (0x00001000);
     c24:	03822a01 	orreq	r2, r2, #4096	; 0x1000
     c28:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
     c2c:	e12fff1e 	bx	lr

00000c30 <refresh_buffer>:

/*
 * Writes the contents of the frame buffer to the LCD display.
 */
void refresh_buffer(void)
{
     c30:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     c34:	e3055078 	movw	r5, #20600	; 0x5078
     c38:	e3405000 	movt	r5, #0
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
     c3c:	e3a06000 	mov	r6, #0
    {
        set_mode(1);
     c40:	e3a0a001 	mov	r10, #1

        // Set page address
        spim_write(0x00B0 | i);
        // Set column address
        spim_write(0x0000);
     c44:	e1a07006 	mov	r7, r6
        spim_write(0x0010);
     c48:	e3a08010 	mov	r8, #16
void refresh_buffer(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    {
        set_mode(1);
     c4c:	e1a0000a 	mov	r0, r10
     c50:	ebffffee 	bl	c10 <set_mode>

        // Set page address
        spim_write(0x00B0 | i);
     c54:	e38600b0 	orr	r0, r6, #176	; 0xb0
     c58:	ebffffb1 	bl	b24 <spim_write>
        // Set column address
        spim_write(0x0000);
     c5c:	e1a00007 	mov	r0, r7
     c60:	ebffffaf 	bl	b24 <spim_write>
        spim_write(0x0010);
     c64:	e1a00008 	mov	r0, r8
     c68:	ebffffad 	bl	b24 <spim_write>

        set_mode(0);
     c6c:	e1a00007 	mov	r0, r7
     c70:	ebffffe6 	bl	c10 <set_mode>
        for (j = 0; j < FRAME_WIDTH; j++)
     c74:	e1a04007 	mov	r4, r7
            spim_write(frame_buffer[i][j]);
     c78:	e7d50004 	ldrb	r0, [r5, r4]
     c7c:	ebffffa8 	bl	b24 <spim_write>
        // Set column address
        spim_write(0x0000);
        spim_write(0x0010);

        set_mode(0);
        for (j = 0; j < FRAME_WIDTH; j++)
     c80:	e2844001 	add	r4, r4, #1
     c84:	e3540080 	cmp	r4, #128	; 0x80
     c88:	1afffffa 	bne	c78 <refresh_buffer+0x48>
 * Writes the contents of the frame buffer to the LCD display.
 */
void refresh_buffer(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
     c8c:	e2866001 	add	r6, r6, #1
     c90:	e2855080 	add	r5, r5, #128	; 0x80
     c94:	e3560008 	cmp	r6, #8
     c98:	1affffeb 	bne	c4c <refresh_buffer+0x1c>

        set_mode(0);
        for (j = 0; j < FRAME_WIDTH; j++)
            spim_write(frame_buffer[i][j]);
    }
}
     c9c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00000ca0 <clear_screen>:

/*
 * Clears the entire LCD display.
 */
void clear_screen(void)
{
     ca0:	e92d4008 	push	{r3, lr}
     ca4:	e3052078 	movw	r2, #20600	; 0x5078
     ca8:	e3402000 	movt	r2, #0
char frame_buffer[8][128];

/*
 * Clears the entire LCD display.
 */
void clear_screen(void)
     cac:	e2820b01 	add	r0, r2, #1024	; 0x400
{
     cb0:	e3a01000 	mov	r1, #0
     cb4:	ea000006 	b	cd4 <clear_screen+0x34>
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    {
        for (j = 0; j < FRAME_WIDTH; j++)
        {
            frame_buffer[i][j] = 0;
     cb8:	e7c21003 	strb	r1, [r2, r3]
void clear_screen(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    {
        for (j = 0; j < FRAME_WIDTH; j++)
     cbc:	e2833001 	add	r3, r3, #1
     cc0:	e3530080 	cmp	r3, #128	; 0x80
     cc4:	1afffffb 	bne	cb8 <clear_screen+0x18>
     cc8:	e2822080 	add	r2, r2, #128	; 0x80
 * Clears the entire LCD display.
 */
void clear_screen(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
     ccc:	e1520000 	cmp	r2, r0
     cd0:	0a000001 	beq	cdc <clear_screen+0x3c>

/*
 * Clears the entire LCD display.
 */
void clear_screen(void)
{
     cd4:	e1a03001 	mov	r3, r1
     cd8:	eafffff6 	b	cb8 <clear_screen+0x18>
        {
            frame_buffer[i][j] = 0;
        }
    }

    refresh_buffer();
     cdc:	ebffffd3 	bl	c30 <refresh_buffer>
     ce0:	e8bd8008 	pop	{r3, pc}

00000ce4 <LCD_line>:
 * length: length of line.
 * color: color of line (0 for white, 1 for black).
 * vert: orientation of line (0 for horizontal, 1 for vertical).
 */
void LCD_line(int x, int y, int length, int color, int vert)
{
     ce4:	e92d00f0 	push	{r4, r5, r6, r7}
    int  x_start, x_end, y_start, y_end;
    int  i, page;
    char mask;

    if (vert)
     ce8:	e59dc010 	ldr	r12, [sp, #16]
     cec:	e35c0000 	cmp	r12, #0
     cf0:	0a000016 	beq	d50 <LCD_line+0x6c>
    {
        y_start = y;
        y_end   = y + length;
     cf4:	e0816002 	add	r6, r1, r2

        for (i = y_start; i < y_end; i++)
     cf8:	e1510006 	cmp	r1, r6
     cfc:	aa00002b 	bge	db0 <LCD_line+0xcc>
        {
            page = i >> 3; // y/8
            mask = 0x01 << (i % 8);
     d00:	e3a07001 	mov	r7, #1
            if (color)
                frame_buffer[page][x] |= mask;
            else
                frame_buffer[page][x] &= ~mask;
     d04:	e305c078 	movw	r12, #20600	; 0x5078
     d08:	e340c000 	movt	r12, #0
        y_start = y;
        y_end   = y + length;

        for (i = y_start; i < y_end; i++)
        {
            page = i >> 3; // y/8
     d0c:	e1a051c1 	asr	r5, r1, #3
            mask = 0x01 << (i % 8);
     d10:	e1a02fc1 	asr	r2, r1, #31
     d14:	e1a02ea2 	lsr	r2, r2, #29
     d18:	e0814002 	add	r4, r1, r2
     d1c:	e2044007 	and	r4, r4, #7
     d20:	e0622004 	rsb	r2, r2, r4
     d24:	e1a02217 	lsl	r2, r7, r2
            if (color)
     d28:	e3530000 	cmp	r3, #0
                frame_buffer[page][x] |= mask;
     d2c:	e0805385 	add	r5, r0, r5, lsl #7
     d30:	e7dc4005 	ldrb	r4, [r12, r5]
     d34:	11822004 	orrne	r2, r2, r4
            else
                frame_buffer[page][x] &= ~mask;
     d38:	01c42002 	biceq	r2, r4, r2
     d3c:	e7cc2005 	strb	r2, [r12, r5]
    if (vert)
    {
        y_start = y;
        y_end   = y + length;

        for (i = y_start; i < y_end; i++)
     d40:	e2811001 	add	r1, r1, #1
     d44:	e1510006 	cmp	r1, r6
     d48:	1affffef 	bne	d0c <LCD_line+0x28>
     d4c:	ea000017 	b	db0 <LCD_line+0xcc>
        }
    }
    else
    {
        x_start = x;
        x_end   = x + length;
     d50:	e080c002 	add	r12, r0, r2

        page = y >> 3; // y/8
     d54:	e1a061c1 	asr	r6, r1, #3
        mask = 0x01 << (y % 8);
     d58:	e1a04fc1 	asr	r4, r1, #31
     d5c:	e1a04ea4 	lsr	r4, r4, #29
     d60:	e0811004 	add	r1, r1, r4
     d64:	e2011007 	and	r1, r1, #7
     d68:	e0644001 	rsb	r4, r4, r1
     d6c:	e3a05001 	mov	r5, #1
     d70:	e1a05415 	lsl	r5, r5, r4
     d74:	e6ef4075 	uxtb	r4, r5
        for (i = x_start; i < x_end; i++)
     d78:	e150000c 	cmp	r0, r12
     d7c:	aa00000b 	bge	db0 <LCD_line+0xcc>
 * y: y coordinate of line start.
 * length: length of line.
 * color: color of line (0 for white, 1 for black).
 * vert: orientation of line (0 for horizontal, 1 for vertical).
 */
void LCD_line(int x, int y, int length, int color, int vert)
     d80:	e3052078 	movw	r2, #20600	; 0x5078
     d84:	e3402000 	movt	r2, #0
     d88:	e0822386 	add	r2, r2, r6, lsl #7
        for (i = x_start; i < x_end; i++)
        {
            if (color)
                frame_buffer[page][i] |= mask;
            else
                frame_buffer[page][i] &= ~mask;
     d8c:	e1e05005 	mvn	r5, r5

        page = y >> 3; // y/8
        mask = 0x01 << (y % 8);
        for (i = x_start; i < x_end; i++)
        {
            if (color)
     d90:	e3530000 	cmp	r3, #0
                frame_buffer[page][i] |= mask;
     d94:	e7d21000 	ldrb	r1, [r2, r0]
     d98:	11841001 	orrne	r1, r4, r1
            else
                frame_buffer[page][i] &= ~mask;
     d9c:	00011005 	andeq	r1, r1, r5
     da0:	e7c21000 	strb	r1, [r2, r0]
        x_start = x;
        x_end   = x + length;

        page = y >> 3; // y/8
        mask = 0x01 << (y % 8);
        for (i = x_start; i < x_end; i++)
     da4:	e2800001 	add	r0, r0, #1
     da8:	e150000c 	cmp	r0, r12
     dac:	1afffff7 	bne	d90 <LCD_line+0xac>
                frame_buffer[page][i] |= mask;
            else
                frame_buffer[page][i] &= ~mask;
        }
    }
}
     db0:	e8bd00f0 	pop	{r4, r5, r6, r7}
     db4:	e12fff1e 	bx	lr

00000db8 <LCD_rect>:
 * height: height of rectangle.
 * color: color of rectangle (o for white, 1 for black).
 * fill: 1 if rectangle should be filled in, 0 to only draw rectangle outline.
 */
void LCD_rect(int x1, int y1, int width, int height, int color, int fill)
{
     db8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     dbc:	e24dd008 	sub	sp, sp, #8
     dc0:	e1a07000 	mov	r7, r0
     dc4:	e1a04001 	mov	r4, r1
     dc8:	e1a05002 	mov	r5, r2
     dcc:	e1a0a003 	mov	r10, r3
     dd0:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
    int x2 = x1 + width;
    int y2 = y1 + width;
     dd4:	e0816002 	add	r6, r1, r2
    int i;

    if (!fill)
     dd8:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
     ddc:	e3510000 	cmp	r1, #0
     de0:	0a000003 	beq	df4 <LCD_rect+0x3c>
        LCD_line(x1, y1, height, color, 1);
        LCD_line(x2, y1, height, color, 1);
    }
    else
    {
        for (i = y1; i <= y2; i++)
     de4:	e1540006 	cmp	r4, r6
            LCD_line(x1, i, width, color, 0);
     de8:	d3a0a000 	movle	r10, #0
        LCD_line(x1, y1, height, color, 1);
        LCD_line(x2, y1, height, color, 1);
    }
    else
    {
        for (i = y1; i <= y2; i++)
     dec:	da000019 	ble	e58 <LCD_rect+0xa0>
     df0:	ea000021 	b	e7c <LCD_rect+0xc4>
    int y2 = y1 + width;
    int i;

    if (!fill)
    {
        LCD_line(x1, y1, width, color, 0);
     df4:	e3a09000 	mov	r9, #0
     df8:	e58d9000 	str	r9, [sp]
     dfc:	e1a01004 	mov	r1, r4
     e00:	e1a03008 	mov	r3, r8
     e04:	ebffffb6 	bl	ce4 <LCD_line>
        LCD_line(x1, y2, width, color, 0);
     e08:	e58d9000 	str	r9, [sp]
     e0c:	e1a00007 	mov	r0, r7
     e10:	e1a01006 	mov	r1, r6
     e14:	e1a02005 	mov	r2, r5
     e18:	e1a03008 	mov	r3, r8
     e1c:	ebffffb0 	bl	ce4 <LCD_line>
        LCD_line(x1, y1, height, color, 1);
     e20:	e3a06001 	mov	r6, #1
     e24:	e58d6000 	str	r6, [sp]
     e28:	e1a00007 	mov	r0, r7
     e2c:	e1a01004 	mov	r1, r4
     e30:	e1a0200a 	mov	r2, r10
     e34:	e1a03008 	mov	r3, r8
     e38:	ebffffa9 	bl	ce4 <LCD_line>
        LCD_line(x2, y1, height, color, 1);
     e3c:	e58d6000 	str	r6, [sp]
     e40:	e0870005 	add	r0, r7, r5
     e44:	e1a01004 	mov	r1, r4
     e48:	e1a0200a 	mov	r2, r10
     e4c:	e1a03008 	mov	r3, r8
     e50:	ebffffa3 	bl	ce4 <LCD_line>
     e54:	ea000008 	b	e7c <LCD_rect+0xc4>
    }
    else
    {
        for (i = y1; i <= y2; i++)
            LCD_line(x1, i, width, color, 0);
     e58:	e58da000 	str	r10, [sp]
     e5c:	e1a00007 	mov	r0, r7
     e60:	e1a01004 	mov	r1, r4
     e64:	e1a02005 	mov	r2, r5
     e68:	e1a03008 	mov	r3, r8
     e6c:	ebffff9c 	bl	ce4 <LCD_line>
        LCD_line(x1, y1, height, color, 1);
        LCD_line(x2, y1, height, color, 1);
    }
    else
    {
        for (i = y1; i <= y2; i++)
     e70:	e2844001 	add	r4, r4, #1
     e74:	e1560004 	cmp	r6, r4
     e78:	aafffff6 	bge	e58 <LCD_rect+0xa0>
            LCD_line(x1, i, width, color, 0);
    }
}
     e7c:	e28dd008 	add	sp, sp, #8
     e80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00000e84 <LCD_text>:
 *
 * str: the string to write.
 * page: the row on the LCD to start writing at.
 */
void LCD_text(char * str, int page)
{
     e84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     e88:	e1a08000 	mov	r8, r0
     e8c:	e1a07001 	mov	r7, r1
    int i, j, c, offset = 0, len = strlen(str);
     e90:	eb000067 	bl	1034 <strlen>
     e94:	e1a09000 	mov	r9, r0
    if (len > (8 - page) * 16)
     e98:	e2673008 	rsb	r3, r7, #8
     e9c:	e1500203 	cmp	r0, r3, lsl #4
     ea0:	ca000002 	bgt	eb0 <LCD_text+0x2c>
    {
        printf("String is too long for LCD display.\n");
        return;
    }

    for (i = 0; i < len; i++)
     ea4:	e3500000 	cmp	r0, #0
     ea8:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, r10, pc}
     eac:	ea000007 	b	ed0 <LCD_text+0x4c>
void LCD_text(char * str, int page)
{
    int i, j, c, offset = 0, len = strlen(str);
    if (len > (8 - page) * 16)
    {
        printf("String is too long for LCD display.\n");
     eb0:	e304030c 	movw	r0, #17164	; 0x430c
     eb4:	e3400000 	movt	r0, #0
     eb8:	eb000058 	bl	1020 <puts>
        return;
     ebc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
    }

    for (i = 0; i < len; i++)
    {
        if (offset >= FRAME_WIDTH)
     ec0:	e355007f 	cmp	r5, #127	; 0x7f
        {
            page++;
     ec4:	c2877001 	addgt	r7, r7, #1
            offset = 0;
     ec8:	c1a05001 	movgt	r5, r1
     ecc:	ea000006 	b	eec <LCD_text+0x68>
    {
        printf("String is too long for LCD display.\n");
        return;
    }

    for (i = 0; i < len; i++)
     ed0:	e3a06000 	mov	r6, #0
     ed4:	e1a05006 	mov	r5, r6
 * Writes a string to the frame buffer starting at the given row.
 *
 * str: the string to write.
 * page: the row on the LCD to start writing at.
 */
void LCD_text(char * str, int page)
     ed8:	e304a3c4 	movw	r10, #17348	; 0x43c4
     edc:	e340a000 	movt	r10, #0
     ee0:	e3050078 	movw	r0, #20600	; 0x5078
     ee4:	e3400000 	movt	r0, #0
        {
            page++;
            offset = 0;
        }
        c = (unsigned int)str[i];
        for (j                             = 0; j < 8; j++)
     ee8:	e1a01006 	mov	r1, r6
 * Writes a string to the frame buffer starting at the given row.
 *
 * str: the string to write.
 * page: the row on the LCD to start writing at.
 */
void LCD_text(char * str, int page)
     eec:	e7d84006 	ldrb	r4, [r8, r6]
     ef0:	e08a4184 	add	r4, r10, r4, lsl #3
     ef4:	e085c387 	add	r12, r5, r7, lsl #7
     ef8:	e080c00c 	add	r12, r0, r12
        {
            page++;
            offset = 0;
        }
        c = (unsigned int)str[i];
        for (j                             = 0; j < 8; j++)
     efc:	e1a03001 	mov	r3, r1
            frame_buffer[page][offset + j] = chars[c][j];
     f00:	e7d42003 	ldrb	r2, [r4, r3]
     f04:	e7cc2003 	strb	r2, [r12, r3]
        {
            page++;
            offset = 0;
        }
        c = (unsigned int)str[i];
        for (j                             = 0; j < 8; j++)
     f08:	e2833001 	add	r3, r3, #1
     f0c:	e3530008 	cmp	r3, #8
     f10:	1afffffa 	bne	f00 <LCD_text+0x7c>
            frame_buffer[page][offset + j] = chars[c][j];
        offset += 8;
     f14:	e2855008 	add	r5, r5, #8
    {
        printf("String is too long for LCD display.\n");
        return;
    }

    for (i = 0; i < len; i++)
     f18:	e2866001 	add	r6, r6, #1
     f1c:	e1590006 	cmp	r9, r6
     f20:	1affffe6 	bne	ec0 <LCD_text+0x3c>
     f24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00000f28 <atexit>:
     f28:	e1a01000 	mov	r1, r0
     f2c:	e3a00000 	mov	r0, #0
     f30:	e92d4008 	push	{r3, lr}
     f34:	e1a02000 	mov	r2, r0
     f38:	e1a03000 	mov	r3, r0
     f3c:	eb000054 	bl	1094 <__register_exitproc>
     f40:	e8bd4008 	pop	{r3, lr}
     f44:	e12fff1e 	bx	lr

00000f48 <exit>:
     f48:	e92d4008 	push	{r3, lr}
     f4c:	e3a01000 	mov	r1, #0
     f50:	e1a04000 	mov	r4, r0
     f54:	eb00008b 	bl	1188 <__call_exitprocs>
     f58:	e59f3018 	ldr	r3, [pc, #24]	; f78 <exit+0x30>
     f5c:	e5930000 	ldr	r0, [r3]
     f60:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     f64:	e3530000 	cmp	r3, #0
     f68:	11a0e00f 	movne	lr, pc
     f6c:	112fff13 	bxne	r3
     f70:	e1a00004 	mov	r0, r4
     f74:	eb000b4a 	bl	3ca4 <_exit>
     f78:	00004330 	.word	0x00004330

00000f7c <_puts_r>:
     f7c:	e92d4030 	push	{r4, r5, lr}
     f80:	e1a05000 	mov	r5, r0
     f84:	e24dd024 	sub	sp, sp, #36	; 0x24
     f88:	e1a00001 	mov	r0, r1
     f8c:	e1a04001 	mov	r4, r1
     f90:	eb000027 	bl	1034 <strlen>
     f94:	e59f307c 	ldr	r3, [pc, #124]	; 1018 <_puts_r+0x9c>
     f98:	e5933000 	ldr	r3, [r3]
     f9c:	e1a02000 	mov	r2, r0
     fa0:	e5933008 	ldr	r3, [r3, #8]
     fa4:	e58d2014 	str	r2, [sp, #20]
     fa8:	e59f206c 	ldr	r2, [pc, #108]	; 101c <_puts_r+0xa0>
     fac:	e1d310bc 	ldrh	r1, [r3, #12]
     fb0:	e58d2018 	str	r2, [sp, #24]
     fb4:	e3a02001 	mov	r2, #1
     fb8:	e58d201c 	str	r2, [sp, #28]
     fbc:	e28d2010 	add	r2, sp, #16
     fc0:	e3110a02 	tst	r1, #8192	; 0x2000
     fc4:	e58d2004 	str	r2, [sp, #4]
     fc8:	e3a02002 	mov	r2, #2
     fcc:	e58d2008 	str	r2, [sp, #8]
     fd0:	05932064 	ldreq	r2, [r3, #100]	; 0x64
     fd4:	03811a02 	orreq	r1, r1, #8192	; 0x2000
     fd8:	03c22a02 	biceq	r2, r2, #8192	; 0x2000
     fdc:	e2800001 	add	r0, r0, #1
     fe0:	01c310bc 	strheq	r1, [r3, #12]
     fe4:	05832064 	streq	r2, [r3, #100]	; 0x64
     fe8:	e58d000c 	str	r0, [sp, #12]
     fec:	e5951008 	ldr	r1, [r5, #8]
     ff0:	e1a00005 	mov	r0, r5
     ff4:	e28d2004 	add	r2, sp, #4
     ff8:	e58d4010 	str	r4, [sp, #16]
     ffc:	eb0000da 	bl	136c <__sfvwrite_r>
    1000:	e3500000 	cmp	r0, #0
    1004:	03a0000a 	moveq	r0, #10
    1008:	13e00000 	mvnne	r0, #0
    100c:	e28dd024 	add	sp, sp, #36	; 0x24
    1010:	e8bd4030 	pop	{r4, r5, lr}
    1014:	e12fff1e 	bx	lr
    1018:	000047c8 	.word	0x000047c8
    101c:	00004338 	.word	0x00004338

00001020 <puts>:
    1020:	e59f3008 	ldr	r3, [pc, #8]	; 1030 <puts+0x10>
    1024:	e1a01000 	mov	r1, r0
    1028:	e5930000 	ldr	r0, [r3]
    102c:	eaffffd2 	b	f7c <_puts_r>
    1030:	000047c8 	.word	0x000047c8

00001034 <strlen>:
    1034:	e3c01003 	bic	r1, r0, #3
    1038:	e2100003 	ands	r0, r0, #3
    103c:	e2600000 	rsb	r0, r0, #0
    1040:	e4913004 	ldr	r3, [r1], #4
    1044:	e280c004 	add	r12, r0, #4
    1048:	e1a0c18c 	lsl	r12, r12, #3
    104c:	e3e02000 	mvn	r2, #0
    1050:	11833c32 	orrne	r3, r3, r2, lsr r12
    1054:	e3a0c001 	mov	r12, #1
    1058:	e18cc40c 	orr	r12, r12, r12, lsl #8
    105c:	e18cc80c 	orr	r12, r12, r12, lsl #16
    1060:	e043200c 	sub	r2, r3, r12
    1064:	e1c22003 	bic	r2, r2, r3
    1068:	e012238c 	ands	r2, r2, r12, lsl #7
    106c:	04913004 	ldreq	r3, [r1], #4
    1070:	02800004 	addeq	r0, r0, #4
    1074:	0afffff9 	beq	1060 <strlen+0x2c>
    1078:	e31300ff 	tst	r3, #255	; 0xff
    107c:	12800001 	addne	r0, r0, #1
    1080:	13130cff 	tstne	r3, #65280	; 0xff00
    1084:	12800001 	addne	r0, r0, #1
    1088:	131308ff 	tstne	r3, #16711680	; 0xff0000
    108c:	12800001 	addne	r0, r0, #1
    1090:	e12fff1e 	bx	lr

00001094 <__register_exitproc>:
    1094:	e59fc0e4 	ldr	r12, [pc, #228]	; 1180 <__register_exitproc+0xec>
    1098:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    109c:	e59c4000 	ldr	r4, [r12]
    10a0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    10a4:	e35c0000 	cmp	r12, #0
    10a8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    10ac:	e59c5004 	ldr	r5, [r12, #4]
    10b0:	0584c148 	streq	r12, [r4, #328]	; 0x148
    10b4:	e355001f 	cmp	r5, #31
    10b8:	e24dd010 	sub	sp, sp, #16
    10bc:	e1a06000 	mov	r6, r0
    10c0:	da000015 	ble	111c <__register_exitproc+0x88>
    10c4:	e59f00b8 	ldr	r0, [pc, #184]	; 1184 <__register_exitproc+0xf0>
    10c8:	e3500000 	cmp	r0, #0
    10cc:	1a000001 	bne	10d8 <__register_exitproc+0x44>
    10d0:	e3e00000 	mvn	r0, #0
    10d4:	ea000018 	b	113c <__register_exitproc+0xa8>
    10d8:	e3a00e19 	mov	r0, #400	; 0x190
    10dc:	e58d100c 	str	r1, [sp, #12]
    10e0:	e58d2008 	str	r2, [sp, #8]
    10e4:	e58d3004 	str	r3, [sp, #4]
    10e8:	e320f000 	nop	{0}
    10ec:	e250c000 	subs	r12, r0, #0
    10f0:	e59d100c 	ldr	r1, [sp, #12]
    10f4:	e59d2008 	ldr	r2, [sp, #8]
    10f8:	e59d3004 	ldr	r3, [sp, #4]
    10fc:	0afffff3 	beq	10d0 <__register_exitproc+0x3c>
    1100:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1104:	e3a00000 	mov	r0, #0
    1108:	e58c0004 	str	r0, [r12, #4]
    110c:	e58c5000 	str	r5, [r12]
    1110:	e584c148 	str	r12, [r4, #328]	; 0x148
    1114:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1118:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    111c:	e3560000 	cmp	r6, #0
    1120:	e59c4004 	ldr	r4, [r12, #4]
    1124:	1a000007 	bne	1148 <__register_exitproc+0xb4>
    1128:	e2843002 	add	r3, r4, #2
    112c:	e2844001 	add	r4, r4, #1
    1130:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1134:	e58c4004 	str	r4, [r12, #4]
    1138:	e3a00000 	mov	r0, #0
    113c:	e28dd010 	add	sp, sp, #16
    1140:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1144:	e12fff1e 	bx	lr
    1148:	e3a00001 	mov	r0, #1
    114c:	e1a00410 	lsl	r0, r0, r4
    1150:	e08c8104 	add	r8, r12, r4, lsl #2
    1154:	e3560002 	cmp	r6, #2
    1158:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    115c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1160:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1164:	e1877000 	orr	r7, r7, r0
    1168:	01830000 	orreq	r0, r3, r0
    116c:	e1a05008 	mov	r5, r8
    1170:	e5882088 	str	r2, [r8, #136]	; 0x88
    1174:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1178:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    117c:	eaffffe9 	b	1128 <__register_exitproc+0x94>
    1180:	00004330 	.word	0x00004330
    1184:	00000000 	.word	0x00000000

00001188 <__call_exitprocs>:
    1188:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    118c:	e59f3168 	ldr	r3, [pc, #360]	; 12fc <__call_exitprocs+0x174>
    1190:	e5933000 	ldr	r3, [r3]
    1194:	e24dd014 	sub	sp, sp, #20
    1198:	e58d3004 	str	r3, [sp, #4]
    119c:	e2833f52 	add	r3, r3, #328	; 0x148
    11a0:	e58d0008 	str	r0, [sp, #8]
    11a4:	e58d300c 	str	r3, [sp, #12]
    11a8:	e1a07001 	mov	r7, r1
    11ac:	e3a08001 	mov	r8, #1
    11b0:	e59d3004 	ldr	r3, [sp, #4]
    11b4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    11b8:	e3560000 	cmp	r6, #0
    11bc:	e59db00c 	ldr	r11, [sp, #12]
    11c0:	0a000033 	beq	1294 <__call_exitprocs+0x10c>
    11c4:	e5965004 	ldr	r5, [r6, #4]
    11c8:	e2554001 	subs	r4, r5, #1
    11cc:	5286a088 	addpl	r10, r6, #136	; 0x88
    11d0:	5285501f 	addpl	r5, r5, #31
    11d4:	508a5105 	addpl	r5, r10, r5, lsl #2
    11d8:	5a000007 	bpl	11fc <__call_exitprocs+0x74>
    11dc:	ea000029 	b	1288 <__call_exitprocs+0x100>
    11e0:	e5953000 	ldr	r3, [r5]
    11e4:	e1530007 	cmp	r3, r7
    11e8:	0a000005 	beq	1204 <__call_exitprocs+0x7c>
    11ec:	e2444001 	sub	r4, r4, #1
    11f0:	e3740001 	cmn	r4, #1
    11f4:	e2455004 	sub	r5, r5, #4
    11f8:	0a000022 	beq	1288 <__call_exitprocs+0x100>
    11fc:	e3570000 	cmp	r7, #0
    1200:	1afffff6 	bne	11e0 <__call_exitprocs+0x58>
    1204:	e5963004 	ldr	r3, [r6, #4]
    1208:	e06a2005 	rsb	r2, r10, r5
    120c:	e2433001 	sub	r3, r3, #1
    1210:	e0862002 	add	r2, r6, r2
    1214:	e1530004 	cmp	r3, r4
    1218:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    121c:	13a01000 	movne	r1, #0
    1220:	05864004 	streq	r4, [r6, #4]
    1224:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1228:	e3530000 	cmp	r3, #0
    122c:	0affffee 	beq	11ec <__call_exitprocs+0x64>
    1230:	e1a02418 	lsl	r2, r8, r4
    1234:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1238:	e1120001 	tst	r2, r1
    123c:	e5969004 	ldr	r9, [r6, #4]
    1240:	0a000016 	beq	12a0 <__call_exitprocs+0x118>
    1244:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1248:	e1120001 	tst	r2, r1
    124c:	1a000016 	bne	12ac <__call_exitprocs+0x124>
    1250:	e59d0008 	ldr	r0, [sp, #8]
    1254:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1258:	e1a0e00f 	mov	lr, pc
    125c:	e12fff13 	bx	r3
    1260:	e5963004 	ldr	r3, [r6, #4]
    1264:	e1530009 	cmp	r3, r9
    1268:	1affffd0 	bne	11b0 <__call_exitprocs+0x28>
    126c:	e59b3000 	ldr	r3, [r11]
    1270:	e1530006 	cmp	r3, r6
    1274:	1affffcd 	bne	11b0 <__call_exitprocs+0x28>
    1278:	e2444001 	sub	r4, r4, #1
    127c:	e3740001 	cmn	r4, #1
    1280:	e2455004 	sub	r5, r5, #4
    1284:	1affffdc 	bne	11fc <__call_exitprocs+0x74>
    1288:	e59f1070 	ldr	r1, [pc, #112]	; 1300 <__call_exitprocs+0x178>
    128c:	e3510000 	cmp	r1, #0
    1290:	1a000009 	bne	12bc <__call_exitprocs+0x134>
    1294:	e28dd014 	add	sp, sp, #20
    1298:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    129c:	e12fff1e 	bx	lr
    12a0:	e1a0e00f 	mov	lr, pc
    12a4:	e12fff13 	bx	r3
    12a8:	eaffffec 	b	1260 <__call_exitprocs+0xd8>
    12ac:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    12b0:	e1a0e00f 	mov	lr, pc
    12b4:	e12fff13 	bx	r3
    12b8:	eaffffe8 	b	1260 <__call_exitprocs+0xd8>
    12bc:	e5963004 	ldr	r3, [r6, #4]
    12c0:	e3530000 	cmp	r3, #0
    12c4:	e5963000 	ldr	r3, [r6]
    12c8:	1a000008 	bne	12f0 <__call_exitprocs+0x168>
    12cc:	e3530000 	cmp	r3, #0
    12d0:	0a000006 	beq	12f0 <__call_exitprocs+0x168>
    12d4:	e1a00006 	mov	r0, r6
    12d8:	e58b3000 	str	r3, [r11]
    12dc:	e320f000 	nop	{0}
    12e0:	e59b6000 	ldr	r6, [r11]
    12e4:	e3560000 	cmp	r6, #0
    12e8:	1affffb5 	bne	11c4 <__call_exitprocs+0x3c>
    12ec:	eaffffe8 	b	1294 <__call_exitprocs+0x10c>
    12f0:	e1a0b006 	mov	r11, r6
    12f4:	e1a06003 	mov	r6, r3
    12f8:	eafffff9 	b	12e4 <__call_exitprocs+0x15c>
    12fc:	00004330 	.word	0x00004330
    1300:	00000000 	.word	0x00000000

00001304 <register_fini>:
    1304:	e92d4008 	push	{r3, lr}
    1308:	e59f3010 	ldr	r3, [pc, #16]	; 1320 <register_fini+0x1c>
    130c:	e3530000 	cmp	r3, #0
    1310:	159f000c 	ldrne	r0, [pc, #12]	; 1324 <register_fini+0x20>
    1314:	1bffff03 	blne	f28 <atexit>
    1318:	e8bd4008 	pop	{r3, lr}
    131c:	e12fff1e 	bx	lr
    1320:	00004364 	.word	0x00004364
    1324:	00001328 	.word	0x00001328

00001328 <__libc_fini_array>:
    1328:	e92d4038 	push	{r3, r4, r5, lr}
    132c:	e59f5030 	ldr	r5, [pc, #48]	; 1364 <__libc_fini_array+0x3c>
    1330:	e59f4030 	ldr	r4, [pc, #48]	; 1368 <__libc_fini_array+0x40>
    1334:	e0654004 	rsb	r4, r5, r4
    1338:	e1b04144 	asrs	r4, r4, #2
    133c:	10855104 	addne	r5, r5, r4, lsl #2
    1340:	0a000004 	beq	1358 <__libc_fini_array+0x30>
    1344:	e5353004 	ldr	r3, [r5, #-4]!
    1348:	e1a0e00f 	mov	lr, pc
    134c:	e12fff13 	bx	r3
    1350:	e2544001 	subs	r4, r4, #1
    1354:	1afffffa 	bne	1344 <__libc_fini_array+0x1c>
    1358:	eb000c01 	bl	4364 <__libc_fini>
    135c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1360:	e12fff1e 	bx	lr
    1364:	0000437c 	.word	0x0000437c
    1368:	00004380 	.word	0x00004380

0000136c <__sfvwrite_r>:
    136c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1370:	e5923008 	ldr	r3, [r2, #8]
    1374:	e3530000 	cmp	r3, #0
    1378:	e24dd00c 	sub	sp, sp, #12
    137c:	e1a07002 	mov	r7, r2
    1380:	e1a0a000 	mov	r10, r0
    1384:	e1a04001 	mov	r4, r1
    1388:	0a00001e 	beq	1408 <__sfvwrite_r+0x9c>
    138c:	e1d130bc 	ldrh	r3, [r1, #12]
    1390:	e3130008 	tst	r3, #8
    1394:	0a00001f 	beq	1418 <__sfvwrite_r+0xac>
    1398:	e5912010 	ldr	r2, [r1, #16]
    139c:	e3520000 	cmp	r2, #0
    13a0:	0a00001c 	beq	1418 <__sfvwrite_r+0xac>
    13a4:	e2132002 	ands	r2, r3, #2
    13a8:	e5975000 	ldr	r5, [r7]
    13ac:	0a000029 	beq	1458 <__sfvwrite_r+0xec>
    13b0:	e3a08000 	mov	r8, #0
    13b4:	e1a06008 	mov	r6, r8
    13b8:	e3560000 	cmp	r6, #0
    13bc:	e1a02008 	mov	r2, r8
    13c0:	e1a0000a 	mov	r0, r10
    13c4:	0a00001f 	beq	1448 <__sfvwrite_r+0xdc>
    13c8:	e3560b01 	cmp	r6, #1024	; 0x400
    13cc:	31a03006 	movcc	r3, r6
    13d0:	23a03b01 	movcs	r3, #1024	; 0x400
    13d4:	e594101c 	ldr	r1, [r4, #28]
    13d8:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    13dc:	e1a0e00f 	mov	lr, pc
    13e0:	e12fff1c 	bx	r12
    13e4:	e3500000 	cmp	r0, #0
    13e8:	da000050 	ble	1530 <__sfvwrite_r+0x1c4>
    13ec:	e5973008 	ldr	r3, [r7, #8]
    13f0:	e0603003 	rsb	r3, r0, r3
    13f4:	e3530000 	cmp	r3, #0
    13f8:	e0888000 	add	r8, r8, r0
    13fc:	e0606006 	rsb	r6, r0, r6
    1400:	e5873008 	str	r3, [r7, #8]
    1404:	1affffeb 	bne	13b8 <__sfvwrite_r+0x4c>
    1408:	e3a00000 	mov	r0, #0
    140c:	e28dd00c 	add	sp, sp, #12
    1410:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1414:	e12fff1e 	bx	lr
    1418:	e1a0000a 	mov	r0, r10
    141c:	e1a01004 	mov	r1, r4
    1420:	eb00054f 	bl	2964 <__swsetup_r>
    1424:	e3500000 	cmp	r0, #0
    1428:	e1d430bc 	ldrh	r3, [r4, #12]
    142c:	0affffdc 	beq	13a4 <__sfvwrite_r+0x38>
    1430:	e3833040 	orr	r3, r3, #64	; 0x40
    1434:	e1c430bc 	strh	r3, [r4, #12]
    1438:	e3a03009 	mov	r3, #9
    143c:	e3e00000 	mvn	r0, #0
    1440:	e58a3000 	str	r3, [r10]
    1444:	eafffff0 	b	140c <__sfvwrite_r+0xa0>
    1448:	e5958000 	ldr	r8, [r5]
    144c:	e5956004 	ldr	r6, [r5, #4]
    1450:	e2855008 	add	r5, r5, #8
    1454:	eaffffd7 	b	13b8 <__sfvwrite_r+0x4c>
    1458:	e2139001 	ands	r9, r3, #1
    145c:	1a000038 	bne	1544 <__sfvwrite_r+0x1d8>
    1460:	e1a06009 	mov	r6, r9
    1464:	e3560000 	cmp	r6, #0
    1468:	0a000024 	beq	1500 <__sfvwrite_r+0x194>
    146c:	e3130c02 	tst	r3, #512	; 0x200
    1470:	e5948008 	ldr	r8, [r4, #8]
    1474:	e1a02003 	mov	r2, r3
    1478:	0a000062 	beq	1608 <__sfvwrite_r+0x29c>
    147c:	e1560008 	cmp	r6, r8
    1480:	e1a0c008 	mov	r12, r8
    1484:	3a000089 	bcc	16b0 <__sfvwrite_r+0x344>
    1488:	e2022d12 	and	r2, r2, #1152	; 0x480
    148c:	e3520000 	cmp	r2, #0
    1490:	1a0000a2 	bne	1720 <__sfvwrite_r+0x3b4>
    1494:	e5940000 	ldr	r0, [r4]
    1498:	e1a0b008 	mov	r11, r8
    149c:	e1a03006 	mov	r3, r6
    14a0:	e1a08006 	mov	r8, r6
    14a4:	e1a0200c 	mov	r2, r12
    14a8:	e1a01009 	mov	r1, r9
    14ac:	e58d3004 	str	r3, [sp, #4]
    14b0:	e58dc000 	str	r12, [sp]
    14b4:	eb00036e 	bl	2274 <memmove>
    14b8:	e59dc000 	ldr	r12, [sp]
    14bc:	e5941008 	ldr	r1, [r4, #8]
    14c0:	e5942000 	ldr	r2, [r4]
    14c4:	e06bb001 	rsb	r11, r11, r1
    14c8:	e082c00c 	add	r12, r2, r12
    14cc:	e584b008 	str	r11, [r4, #8]
    14d0:	e584c000 	str	r12, [r4]
    14d4:	e59d3004 	ldr	r3, [sp, #4]
    14d8:	e5972008 	ldr	r2, [r7, #8]
    14dc:	e0688002 	rsb	r8, r8, r2
    14e0:	e3580000 	cmp	r8, #0
    14e4:	e0899003 	add	r9, r9, r3
    14e8:	e0636006 	rsb	r6, r3, r6
    14ec:	e5878008 	str	r8, [r7, #8]
    14f0:	0affffc4 	beq	1408 <__sfvwrite_r+0x9c>
    14f4:	e3560000 	cmp	r6, #0
    14f8:	e1d430bc 	ldrh	r3, [r4, #12]
    14fc:	1affffda 	bne	146c <__sfvwrite_r+0x100>
    1500:	e5959000 	ldr	r9, [r5]
    1504:	e5956004 	ldr	r6, [r5, #4]
    1508:	e2855008 	add	r5, r5, #8
    150c:	eaffffd4 	b	1464 <__sfvwrite_r+0xf8>
    1510:	eb0003a6 	bl	23b0 <_realloc_r>
    1514:	e2503000 	subs	r3, r0, #0
    1518:	1a00009d 	bne	1794 <__sfvwrite_r+0x428>
    151c:	e1a0000a 	mov	r0, r10
    1520:	e5941010 	ldr	r1, [r4, #16]
    1524:	eb0006e7 	bl	30c8 <_free_r>
    1528:	e3a0300c 	mov	r3, #12
    152c:	e58a3000 	str	r3, [r10]
    1530:	e1d430bc 	ldrh	r3, [r4, #12]
    1534:	e3833040 	orr	r3, r3, #64	; 0x40
    1538:	e1c430bc 	strh	r3, [r4, #12]
    153c:	e3e00000 	mvn	r0, #0
    1540:	eaffffb1 	b	140c <__sfvwrite_r+0xa0>
    1544:	e1a09002 	mov	r9, r2
    1548:	e1a0c002 	mov	r12, r2
    154c:	e1a0b002 	mov	r11, r2
    1550:	e1a08002 	mov	r8, r2
    1554:	e3580000 	cmp	r8, #0
    1558:	0a000025 	beq	15f4 <__sfvwrite_r+0x288>
    155c:	e35c0000 	cmp	r12, #0
    1560:	0a000064 	beq	16f8 <__sfvwrite_r+0x38c>
    1564:	e5940000 	ldr	r0, [r4]
    1568:	e5942010 	ldr	r2, [r4, #16]
    156c:	e1590008 	cmp	r9, r8
    1570:	31a03009 	movcc	r3, r9
    1574:	21a03008 	movcs	r3, r8
    1578:	e1500002 	cmp	r0, r2
    157c:	e5946008 	ldr	r6, [r4, #8]
    1580:	e594e014 	ldr	lr, [r4, #20]
    1584:	9a000002 	bls	1594 <__sfvwrite_r+0x228>
    1588:	e086600e 	add	r6, r6, lr
    158c:	e1530006 	cmp	r3, r6
    1590:	ca00008a 	bgt	17c0 <__sfvwrite_r+0x454>
    1594:	e153000e 	cmp	r3, lr
    1598:	ba00002d 	blt	1654 <__sfvwrite_r+0x2e8>
    159c:	e594101c 	ldr	r1, [r4, #28]
    15a0:	e1a0000a 	mov	r0, r10
    15a4:	e58dc000 	str	r12, [sp]
    15a8:	e1a0200b 	mov	r2, r11
    15ac:	e1a0300e 	mov	r3, lr
    15b0:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    15b4:	e1a0e00f 	mov	lr, pc
    15b8:	e12fff1c 	bx	r12
    15bc:	e2506000 	subs	r6, r0, #0
    15c0:	e59dc000 	ldr	r12, [sp]
    15c4:	daffffd9 	ble	1530 <__sfvwrite_r+0x1c4>
    15c8:	e0599006 	subs	r9, r9, r6
    15cc:	0a000030 	beq	1694 <__sfvwrite_r+0x328>
    15d0:	e5973008 	ldr	r3, [r7, #8]
    15d4:	e0663003 	rsb	r3, r6, r3
    15d8:	e3530000 	cmp	r3, #0
    15dc:	e08bb006 	add	r11, r11, r6
    15e0:	e0668008 	rsb	r8, r6, r8
    15e4:	e5873008 	str	r3, [r7, #8]
    15e8:	0affff86 	beq	1408 <__sfvwrite_r+0x9c>
    15ec:	e3580000 	cmp	r8, #0
    15f0:	1affffd9 	bne	155c <__sfvwrite_r+0x1f0>
    15f4:	e595b000 	ldr	r11, [r5]
    15f8:	e5958004 	ldr	r8, [r5, #4]
    15fc:	e3a0c000 	mov	r12, #0
    1600:	e2855008 	add	r5, r5, #8
    1604:	eaffffd2 	b	1554 <__sfvwrite_r+0x1e8>
    1608:	e5940000 	ldr	r0, [r4]
    160c:	e5943010 	ldr	r3, [r4, #16]
    1610:	e1500003 	cmp	r0, r3
    1614:	9a000001 	bls	1620 <__sfvwrite_r+0x2b4>
    1618:	e1560008 	cmp	r6, r8
    161c:	8a000075 	bhi	17f8 <__sfvwrite_r+0x48c>
    1620:	e5943014 	ldr	r3, [r4, #20]
    1624:	e1560003 	cmp	r6, r3
    1628:	3a000026 	bcc	16c8 <__sfvwrite_r+0x35c>
    162c:	e1a0000a 	mov	r0, r10
    1630:	e594101c 	ldr	r1, [r4, #28]
    1634:	e1a02009 	mov	r2, r9
    1638:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    163c:	e1a0e00f 	mov	lr, pc
    1640:	e12fff1c 	bx	r12
    1644:	e2508000 	subs	r8, r0, #0
    1648:	daffffb8 	ble	1530 <__sfvwrite_r+0x1c4>
    164c:	e1a03008 	mov	r3, r8
    1650:	eaffffa0 	b	14d8 <__sfvwrite_r+0x16c>
    1654:	e1a02003 	mov	r2, r3
    1658:	e1a0100b 	mov	r1, r11
    165c:	e58d3004 	str	r3, [sp, #4]
    1660:	e58dc000 	str	r12, [sp]
    1664:	eb000302 	bl	2274 <memmove>
    1668:	e59d3004 	ldr	r3, [sp, #4]
    166c:	e5941008 	ldr	r1, [r4, #8]
    1670:	e5942000 	ldr	r2, [r4]
    1674:	e1a06003 	mov	r6, r3
    1678:	e0631001 	rsb	r1, r3, r1
    167c:	e0822003 	add	r2, r2, r3
    1680:	e0599006 	subs	r9, r9, r6
    1684:	e5841008 	str	r1, [r4, #8]
    1688:	e5842000 	str	r2, [r4]
    168c:	e59dc000 	ldr	r12, [sp]
    1690:	1affffce 	bne	15d0 <__sfvwrite_r+0x264>
    1694:	e1a0000a 	mov	r0, r10
    1698:	e1a01004 	mov	r1, r4
    169c:	eb0004fe 	bl	2a9c <_fflush_r>
    16a0:	e3500000 	cmp	r0, #0
    16a4:	1affffa1 	bne	1530 <__sfvwrite_r+0x1c4>
    16a8:	e1a0c009 	mov	r12, r9
    16ac:	eaffffc7 	b	15d0 <__sfvwrite_r+0x264>
    16b0:	e5940000 	ldr	r0, [r4]
    16b4:	e1a0b006 	mov	r11, r6
    16b8:	e1a03006 	mov	r3, r6
    16bc:	e1a08006 	mov	r8, r6
    16c0:	e1a0c006 	mov	r12, r6
    16c4:	eaffff76 	b	14a4 <__sfvwrite_r+0x138>
    16c8:	e1a02006 	mov	r2, r6
    16cc:	e1a01009 	mov	r1, r9
    16d0:	eb0002e7 	bl	2274 <memmove>
    16d4:	e5942008 	ldr	r2, [r4, #8]
    16d8:	e5943000 	ldr	r3, [r4]
    16dc:	e0662002 	rsb	r2, r6, r2
    16e0:	e0833006 	add	r3, r3, r6
    16e4:	e5843000 	str	r3, [r4]
    16e8:	e5842008 	str	r2, [r4, #8]
    16ec:	e1a08006 	mov	r8, r6
    16f0:	e1a03006 	mov	r3, r6
    16f4:	eaffff77 	b	14d8 <__sfvwrite_r+0x16c>
    16f8:	e1a0000b 	mov	r0, r11
    16fc:	e3a0100a 	mov	r1, #10
    1700:	e1a02008 	mov	r2, r8
    1704:	eb000210 	bl	1f4c <memchr>
    1708:	e3500000 	cmp	r0, #0
    170c:	12809001 	addne	r9, r0, #1
    1710:	106b9009 	rsbne	r9, r11, r9
    1714:	02889001 	addeq	r9, r8, #1
    1718:	e3a0c001 	mov	r12, #1
    171c:	eaffff90 	b	1564 <__sfvwrite_r+0x1f8>
    1720:	e5941010 	ldr	r1, [r4, #16]
    1724:	e594b000 	ldr	r11, [r4]
    1728:	e5948014 	ldr	r8, [r4, #20]
    172c:	e061b00b 	rsb	r11, r1, r11
    1730:	e0888088 	add	r8, r8, r8, lsl #1
    1734:	e0888fa8 	add	r8, r8, r8, lsr #31
    1738:	e28b0001 	add	r0, r11, #1
    173c:	e1a080c8 	asr	r8, r8, #1
    1740:	e0800006 	add	r0, r0, r6
    1744:	e1580000 	cmp	r8, r0
    1748:	e1a02008 	mov	r2, r8
    174c:	31a08000 	movcc	r8, r0
    1750:	31a02008 	movcc	r2, r8
    1754:	e3130b01 	tst	r3, #1024	; 0x400
    1758:	e1a0000a 	mov	r0, r10
    175c:	0affff6b 	beq	1510 <__sfvwrite_r+0x1a4>
    1760:	e1a01002 	mov	r1, r2
    1764:	eb000031 	bl	1830 <_malloc_r>
    1768:	e2503000 	subs	r3, r0, #0
    176c:	0affff6d 	beq	1528 <__sfvwrite_r+0x1bc>
    1770:	e5941010 	ldr	r1, [r4, #16]
    1774:	e1a0200b 	mov	r2, r11
    1778:	e58d3004 	str	r3, [sp, #4]
    177c:	eb000239 	bl	2068 <memcpy>
    1780:	e1d420bc 	ldrh	r2, [r4, #12]
    1784:	e3c22d12 	bic	r2, r2, #1152	; 0x480
    1788:	e3822080 	orr	r2, r2, #128	; 0x80
    178c:	e1c420bc 	strh	r2, [r4, #12]
    1790:	e59d3004 	ldr	r3, [sp, #4]
    1794:	e083000b 	add	r0, r3, r11
    1798:	e06b2008 	rsb	r2, r11, r8
    179c:	e5843010 	str	r3, [r4, #16]
    17a0:	e5848014 	str	r8, [r4, #20]
    17a4:	e5840000 	str	r0, [r4]
    17a8:	e1a0b006 	mov	r11, r6
    17ac:	e5842008 	str	r2, [r4, #8]
    17b0:	e1a03006 	mov	r3, r6
    17b4:	e1a08006 	mov	r8, r6
    17b8:	e1a0c006 	mov	r12, r6
    17bc:	eaffff38 	b	14a4 <__sfvwrite_r+0x138>
    17c0:	e1a0100b 	mov	r1, r11
    17c4:	e1a02006 	mov	r2, r6
    17c8:	e58dc000 	str	r12, [sp]
    17cc:	eb0002a8 	bl	2274 <memmove>
    17d0:	e5943000 	ldr	r3, [r4]
    17d4:	e0833006 	add	r3, r3, r6
    17d8:	e5843000 	str	r3, [r4]
    17dc:	e1a0000a 	mov	r0, r10
    17e0:	e1a01004 	mov	r1, r4
    17e4:	eb0004ac 	bl	2a9c <_fflush_r>
    17e8:	e3500000 	cmp	r0, #0
    17ec:	e59dc000 	ldr	r12, [sp]
    17f0:	0affff74 	beq	15c8 <__sfvwrite_r+0x25c>
    17f4:	eaffff4d 	b	1530 <__sfvwrite_r+0x1c4>
    17f8:	e1a01009 	mov	r1, r9
    17fc:	e1a02008 	mov	r2, r8
    1800:	e58d8004 	str	r8, [sp, #4]
    1804:	eb00029a 	bl	2274 <memmove>
    1808:	e5942000 	ldr	r2, [r4]
    180c:	e0822008 	add	r2, r2, r8
    1810:	e5842000 	str	r2, [r4]
    1814:	e1a0000a 	mov	r0, r10
    1818:	e1a01004 	mov	r1, r4
    181c:	eb00049e 	bl	2a9c <_fflush_r>
    1820:	e3500000 	cmp	r0, #0
    1824:	e59d3004 	ldr	r3, [sp, #4]
    1828:	0affff2a 	beq	14d8 <__sfvwrite_r+0x16c>
    182c:	eaffff3f 	b	1530 <__sfvwrite_r+0x1c4>

00001830 <_malloc_r>:
    1830:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1834:	e281500b 	add	r5, r1, #11
    1838:	e3550016 	cmp	r5, #22
    183c:	83c55007 	bichi	r5, r5, #7
    1840:	81a03fa5 	lsrhi	r3, r5, #31
    1844:	93a03000 	movls	r3, #0
    1848:	93a05010 	movls	r5, #16
    184c:	e1550001 	cmp	r5, r1
    1850:	21a01003 	movcs	r1, r3
    1854:	33831001 	orrcc	r1, r3, #1
    1858:	e3510000 	cmp	r1, #0
    185c:	13a0300c 	movne	r3, #12
    1860:	e24dd00c 	sub	sp, sp, #12
    1864:	e1a06000 	mov	r6, r0
    1868:	15803000 	strne	r3, [r0]
    186c:	13a04000 	movne	r4, #0
    1870:	1a000015 	bne	18cc <_malloc_r+0x9c>
    1874:	eb0002cb 	bl	23a8 <__malloc_lock>
    1878:	e3550f7e 	cmp	r5, #504	; 0x1f8
    187c:	2a000016 	bcs	18dc <_malloc_r+0xac>
    1880:	e59f76b8 	ldr	r7, [pc, #1720]	; 1f40 <_malloc_r+0x710>
    1884:	e1a0e1a5 	lsr	lr, r5, #3
    1888:	e087318e 	add	r3, r7, lr, lsl #3
    188c:	e593400c 	ldr	r4, [r3, #12]
    1890:	e1540003 	cmp	r4, r3
    1894:	0a00014b 	beq	1dc8 <_malloc_r+0x598>
    1898:	e5943004 	ldr	r3, [r4, #4]
    189c:	e3c33003 	bic	r3, r3, #3
    18a0:	e0843003 	add	r3, r4, r3
    18a4:	e5930004 	ldr	r0, [r3, #4]
    18a8:	e2841008 	add	r1, r4, #8
    18ac:	e8910006 	ldm	r1, {r1, r2}
    18b0:	e3800001 	orr	r0, r0, #1
    18b4:	e5830004 	str	r0, [r3, #4]
    18b8:	e581200c 	str	r2, [r1, #12]
    18bc:	e5821008 	str	r1, [r2, #8]
    18c0:	e1a00006 	mov	r0, r6
    18c4:	eb0002b8 	bl	23ac <__malloc_unlock>
    18c8:	e2844008 	add	r4, r4, #8
    18cc:	e1a00004 	mov	r0, r4
    18d0:	e28dd00c 	add	sp, sp, #12
    18d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    18d8:	e12fff1e 	bx	lr
    18dc:	e1b0e4a5 	lsrs	lr, r5, #9
    18e0:	01a0e1a5 	lsreq	lr, r5, #3
    18e4:	01a0108e 	lsleq	r1, lr, #1
    18e8:	1a000061 	bne	1a74 <_malloc_r+0x244>
    18ec:	e59f764c 	ldr	r7, [pc, #1612]	; 1f40 <_malloc_r+0x710>
    18f0:	e0871101 	add	r1, r7, r1, lsl #2
    18f4:	e591400c 	ldr	r4, [r1, #12]
    18f8:	e1510004 	cmp	r1, r4
    18fc:	1a000005 	bne	1918 <_malloc_r+0xe8>
    1900:	ea00000a 	b	1930 <_malloc_r+0x100>
    1904:	e3530000 	cmp	r3, #0
    1908:	aa0000d7 	bge	1c6c <_malloc_r+0x43c>
    190c:	e594400c 	ldr	r4, [r4, #12]
    1910:	e1510004 	cmp	r1, r4
    1914:	0a000005 	beq	1930 <_malloc_r+0x100>
    1918:	e5942004 	ldr	r2, [r4, #4]
    191c:	e3c22003 	bic	r2, r2, #3
    1920:	e0653002 	rsb	r3, r5, r2
    1924:	e353000f 	cmp	r3, #15
    1928:	dafffff5 	ble	1904 <_malloc_r+0xd4>
    192c:	e24ee001 	sub	lr, lr, #1
    1930:	e28ee001 	add	lr, lr, #1
    1934:	e59f3604 	ldr	r3, [pc, #1540]	; 1f40 <_malloc_r+0x710>
    1938:	e5974010 	ldr	r4, [r7, #16]
    193c:	e2838008 	add	r8, r3, #8
    1940:	e1540008 	cmp	r4, r8
    1944:	05931004 	ldreq	r1, [r3, #4]
    1948:	0a000016 	beq	19a8 <_malloc_r+0x178>
    194c:	e5942004 	ldr	r2, [r4, #4]
    1950:	e3c22003 	bic	r2, r2, #3
    1954:	e0651002 	rsb	r1, r5, r2
    1958:	e351000f 	cmp	r1, #15
    195c:	ca0000f7 	bgt	1d40 <_malloc_r+0x510>
    1960:	e3510000 	cmp	r1, #0
    1964:	e5838014 	str	r8, [r3, #20]
    1968:	e5838010 	str	r8, [r3, #16]
    196c:	aa000046 	bge	1a8c <_malloc_r+0x25c>
    1970:	e3520c02 	cmp	r2, #512	; 0x200
    1974:	2a0000d2 	bcs	1cc4 <_malloc_r+0x494>
    1978:	e5930004 	ldr	r0, [r3, #4]
    197c:	e1a021a2 	lsr	r2, r2, #3
    1980:	e1a01142 	asr	r1, r2, #2
    1984:	e3a0c001 	mov	r12, #1
    1988:	e180111c 	orr	r1, r0, r12, lsl r1
    198c:	e0832182 	add	r2, r3, r2, lsl #3
    1990:	e5920008 	ldr	r0, [r2, #8]
    1994:	e584200c 	str	r2, [r4, #12]
    1998:	e5840008 	str	r0, [r4, #8]
    199c:	e5831004 	str	r1, [r3, #4]
    19a0:	e5824008 	str	r4, [r2, #8]
    19a4:	e580400c 	str	r4, [r0, #12]
    19a8:	e1a0014e 	asr	r0, lr, #2
    19ac:	e3a03001 	mov	r3, #1
    19b0:	e1a00013 	lsl	r0, r3, r0
    19b4:	e1500001 	cmp	r0, r1
    19b8:	8a00003b 	bhi	1aac <_malloc_r+0x27c>
    19bc:	e1110000 	tst	r1, r0
    19c0:	1a000008 	bne	19e8 <_malloc_r+0x1b8>
    19c4:	e1a00310 	lsl	r0, r0, r3
    19c8:	e3cee003 	bic	lr, lr, #3
    19cc:	e1110000 	tst	r1, r0
    19d0:	e28ee004 	add	lr, lr, #4
    19d4:	1a000003 	bne	19e8 <_malloc_r+0x1b8>
    19d8:	e1a00080 	lsl	r0, r0, #1
    19dc:	e1110000 	tst	r1, r0
    19e0:	e28ee004 	add	lr, lr, #4
    19e4:	0afffffb 	beq	19d8 <_malloc_r+0x1a8>
    19e8:	e087a18e 	add	r10, r7, lr, lsl #3
    19ec:	e1a0c00a 	mov	r12, r10
    19f0:	e1a0400e 	mov	r4, lr
    19f4:	e59c300c 	ldr	r3, [r12, #12]
    19f8:	e15c0003 	cmp	r12, r3
    19fc:	1a000005 	bne	1a18 <_malloc_r+0x1e8>
    1a00:	ea0000db 	b	1d74 <_malloc_r+0x544>
    1a04:	e3520000 	cmp	r2, #0
    1a08:	aa0000f4 	bge	1de0 <_malloc_r+0x5b0>
    1a0c:	e593300c 	ldr	r3, [r3, #12]
    1a10:	e15c0003 	cmp	r12, r3
    1a14:	0a0000d6 	beq	1d74 <_malloc_r+0x544>
    1a18:	e5931004 	ldr	r1, [r3, #4]
    1a1c:	e3c11003 	bic	r1, r1, #3
    1a20:	e0652001 	rsb	r2, r5, r1
    1a24:	e352000f 	cmp	r2, #15
    1a28:	dafffff5 	ble	1a04 <_malloc_r+0x1d4>
    1a2c:	e1a04003 	mov	r4, r3
    1a30:	e593000c 	ldr	r0, [r3, #12]
    1a34:	e5b4c008 	ldr	r12, [r4, #8]!
    1a38:	e0831005 	add	r1, r3, r5
    1a3c:	e382e001 	orr	lr, r2, #1
    1a40:	e3855001 	orr	r5, r5, #1
    1a44:	e58c000c 	str	r0, [r12, #12]
    1a48:	e580c008 	str	r12, [r0, #8]
    1a4c:	e5835004 	str	r5, [r3, #4]
    1a50:	e5871014 	str	r1, [r7, #20]
    1a54:	e5871010 	str	r1, [r7, #16]
    1a58:	e581800c 	str	r8, [r1, #12]
    1a5c:	e5818008 	str	r8, [r1, #8]
    1a60:	e581e004 	str	lr, [r1, #4]
    1a64:	e7812002 	str	r2, [r1, r2]
    1a68:	e1a00006 	mov	r0, r6
    1a6c:	eb00024e 	bl	23ac <__malloc_unlock>
    1a70:	eaffff95 	b	18cc <_malloc_r+0x9c>
    1a74:	e35e0004 	cmp	lr, #4
    1a78:	8a000087 	bhi	1c9c <_malloc_r+0x46c>
    1a7c:	e1a0e325 	lsr	lr, r5, #6
    1a80:	e28ee038 	add	lr, lr, #56	; 0x38
    1a84:	e1a0108e 	lsl	r1, lr, #1
    1a88:	eaffff97 	b	18ec <_malloc_r+0xbc>
    1a8c:	e0842002 	add	r2, r4, r2
    1a90:	e5923004 	ldr	r3, [r2, #4]
    1a94:	e3833001 	orr	r3, r3, #1
    1a98:	e5823004 	str	r3, [r2, #4]
    1a9c:	e1a00006 	mov	r0, r6
    1aa0:	eb000241 	bl	23ac <__malloc_unlock>
    1aa4:	e2844008 	add	r4, r4, #8
    1aa8:	eaffff87 	b	18cc <_malloc_r+0x9c>
    1aac:	e5974008 	ldr	r4, [r7, #8]
    1ab0:	e594a004 	ldr	r10, [r4, #4]
    1ab4:	e3caa003 	bic	r10, r10, #3
    1ab8:	e155000a 	cmp	r5, r10
    1abc:	8a000002 	bhi	1acc <_malloc_r+0x29c>
    1ac0:	e065300a 	rsb	r3, r5, r10
    1ac4:	e353000f 	cmp	r3, #15
    1ac8:	ca00005d 	bgt	1c44 <_malloc_r+0x414>
    1acc:	e59f9470 	ldr	r9, [pc, #1136]	; 1f44 <_malloc_r+0x714>
    1ad0:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    1ad4:	e599b000 	ldr	r11, [r9]
    1ad8:	e3730001 	cmn	r3, #1
    1adc:	e085b00b 	add	r11, r5, r11
    1ae0:	128bba01 	addne	r11, r11, #4096	; 0x1000
    1ae4:	128bb00f 	addne	r11, r11, #15
    1ae8:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    1aec:	028bb010 	addeq	r11, r11, #16
    1af0:	13cbb00f 	bicne	r11, r11, #15
    1af4:	e084200a 	add	r2, r4, r10
    1af8:	e1a00006 	mov	r0, r6
    1afc:	e1a0100b 	mov	r1, r11
    1b00:	e58d2004 	str	r2, [sp, #4]
    1b04:	eb000386 	bl	2924 <_sbrk_r>
    1b08:	e3700001 	cmn	r0, #1
    1b0c:	e1a08000 	mov	r8, r0
    1b10:	e59d2004 	ldr	r2, [sp, #4]
    1b14:	0a0000e2 	beq	1ea4 <_malloc_r+0x674>
    1b18:	e1520000 	cmp	r2, r0
    1b1c:	8a0000bf 	bhi	1e20 <_malloc_r+0x5f0>
    1b20:	e5993004 	ldr	r3, [r9, #4]
    1b24:	e1520008 	cmp	r2, r8
    1b28:	e08b3003 	add	r3, r11, r3
    1b2c:	e5893004 	str	r3, [r9, #4]
    1b30:	0a0000df 	beq	1eb4 <_malloc_r+0x684>
    1b34:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    1b38:	e3710001 	cmn	r1, #1
    1b3c:	10622008 	rsbne	r2, r2, r8
    1b40:	059f33f8 	ldreq	r3, [pc, #1016]	; 1f40 <_malloc_r+0x710>
    1b44:	10833002 	addne	r3, r3, r2
    1b48:	05838408 	streq	r8, [r3, #1032]	; 0x408
    1b4c:	15893004 	strne	r3, [r9, #4]
    1b50:	e2183007 	ands	r3, r8, #7
    1b54:	12632008 	rsbne	r2, r3, #8
    1b58:	10888002 	addne	r8, r8, r2
    1b5c:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    1b60:	12832008 	addne	r2, r3, #8
    1b64:	e088300b 	add	r3, r8, r11
    1b68:	03a02a01 	moveq	r2, #4096	; 0x1000
    1b6c:	e1a03a03 	lsl	r3, r3, #20
    1b70:	e042ba23 	sub	r11, r2, r3, lsr #20
    1b74:	e1a0100b 	mov	r1, r11
    1b78:	e1a00006 	mov	r0, r6
    1b7c:	eb000368 	bl	2924 <_sbrk_r>
    1b80:	e3700001 	cmn	r0, #1
    1b84:	10682000 	rsbne	r2, r8, r0
    1b88:	e5993004 	ldr	r3, [r9, #4]
    1b8c:	108b2002 	addne	r2, r11, r2
    1b90:	03a0b000 	moveq	r11, #0
    1b94:	13822001 	orrne	r2, r2, #1
    1b98:	03a02001 	moveq	r2, #1
    1b9c:	e08b3003 	add	r3, r11, r3
    1ba0:	e1540007 	cmp	r4, r7
    1ba4:	e5893004 	str	r3, [r9, #4]
    1ba8:	e5878008 	str	r8, [r7, #8]
    1bac:	e5882004 	str	r2, [r8, #4]
    1bb0:	0a00000d 	beq	1bec <_malloc_r+0x3bc>
    1bb4:	e35a000f 	cmp	r10, #15
    1bb8:	9a0000ac 	bls	1e70 <_malloc_r+0x640>
    1bbc:	e594c004 	ldr	r12, [r4, #4]
    1bc0:	e24a200c 	sub	r2, r10, #12
    1bc4:	e3c22007 	bic	r2, r2, #7
    1bc8:	e20cc001 	and	r12, r12, #1
    1bcc:	e0841002 	add	r1, r4, r2
    1bd0:	e3a00005 	mov	r0, #5
    1bd4:	e182c00c 	orr	r12, r2, r12
    1bd8:	e352000f 	cmp	r2, #15
    1bdc:	e584c004 	str	r12, [r4, #4]
    1be0:	e5810004 	str	r0, [r1, #4]
    1be4:	e5810008 	str	r0, [r1, #8]
    1be8:	8a0000b8 	bhi	1ed0 <_malloc_r+0x6a0>
    1bec:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    1bf0:	e1530002 	cmp	r3, r2
    1bf4:	859f2348 	ldrhi	r2, [pc, #840]	; 1f44 <_malloc_r+0x714>
    1bf8:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    1bfc:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    1c00:	e5974008 	ldr	r4, [r7, #8]
    1c04:	e1530002 	cmp	r3, r2
    1c08:	95943004 	ldrls	r3, [r4, #4]
    1c0c:	85942004 	ldrhi	r2, [r4, #4]
    1c10:	859f132c 	ldrhi	r1, [pc, #812]	; 1f44 <_malloc_r+0x714>
    1c14:	93c33003 	bicls	r3, r3, #3
    1c18:	85813030 	strhi	r3, [r1, #48]	; 0x30
    1c1c:	83c23003 	bichi	r3, r2, #3
    1c20:	e1550003 	cmp	r5, r3
    1c24:	e0653003 	rsb	r3, r5, r3
    1c28:	8a000001 	bhi	1c34 <_malloc_r+0x404>
    1c2c:	e353000f 	cmp	r3, #15
    1c30:	ca000003 	bgt	1c44 <_malloc_r+0x414>
    1c34:	e1a00006 	mov	r0, r6
    1c38:	eb0001db 	bl	23ac <__malloc_unlock>
    1c3c:	e3a04000 	mov	r4, #0
    1c40:	eaffff21 	b	18cc <_malloc_r+0x9c>
    1c44:	e0842005 	add	r2, r4, r5
    1c48:	e3833001 	orr	r3, r3, #1
    1c4c:	e3855001 	orr	r5, r5, #1
    1c50:	e5845004 	str	r5, [r4, #4]
    1c54:	e1a00006 	mov	r0, r6
    1c58:	e5823004 	str	r3, [r2, #4]
    1c5c:	e5872008 	str	r2, [r7, #8]
    1c60:	e2844008 	add	r4, r4, #8
    1c64:	eb0001d0 	bl	23ac <__malloc_unlock>
    1c68:	eaffff17 	b	18cc <_malloc_r+0x9c>
    1c6c:	e0842002 	add	r2, r4, r2
    1c70:	e5920004 	ldr	r0, [r2, #4]
    1c74:	e2841008 	add	r1, r4, #8
    1c78:	e891000a 	ldm	r1, {r1, r3}
    1c7c:	e3800001 	orr	r0, r0, #1
    1c80:	e5820004 	str	r0, [r2, #4]
    1c84:	e581300c 	str	r3, [r1, #12]
    1c88:	e5831008 	str	r1, [r3, #8]
    1c8c:	e1a00006 	mov	r0, r6
    1c90:	eb0001c5 	bl	23ac <__malloc_unlock>
    1c94:	e2844008 	add	r4, r4, #8
    1c98:	eaffff0b 	b	18cc <_malloc_r+0x9c>
    1c9c:	e35e0014 	cmp	lr, #20
    1ca0:	928ee05b 	addls	lr, lr, #91	; 0x5b
    1ca4:	91a0108e 	lslls	r1, lr, #1
    1ca8:	9affff0f 	bls	18ec <_malloc_r+0xbc>
    1cac:	e35e0054 	cmp	lr, #84	; 0x54
    1cb0:	8a000061 	bhi	1e3c <_malloc_r+0x60c>
    1cb4:	e1a0e625 	lsr	lr, r5, #12
    1cb8:	e28ee06e 	add	lr, lr, #110	; 0x6e
    1cbc:	e1a0108e 	lsl	r1, lr, #1
    1cc0:	eaffff09 	b	18ec <_malloc_r+0xbc>
    1cc4:	e1a034a2 	lsr	r3, r2, #9
    1cc8:	e3530004 	cmp	r3, #4
    1ccc:	9a00004f 	bls	1e10 <_malloc_r+0x5e0>
    1cd0:	e3530014 	cmp	r3, #20
    1cd4:	9283a05b 	addls	r10, r3, #91	; 0x5b
    1cd8:	91a0008a 	lslls	r0, r10, #1
    1cdc:	9a000004 	bls	1cf4 <_malloc_r+0x4c4>
    1ce0:	e3530054 	cmp	r3, #84	; 0x54
    1ce4:	8a00007f 	bhi	1ee8 <_malloc_r+0x6b8>
    1ce8:	e1a0a622 	lsr	r10, r2, #12
    1cec:	e28aa06e 	add	r10, r10, #110	; 0x6e
    1cf0:	e1a0008a 	lsl	r0, r10, #1
    1cf4:	e0870100 	add	r0, r7, r0, lsl #2
    1cf8:	e5903008 	ldr	r3, [r0, #8]
    1cfc:	e1530000 	cmp	r3, r0
    1d00:	e59fc238 	ldr	r12, [pc, #568]	; 1f40 <_malloc_r+0x710>
    1d04:	0a000052 	beq	1e54 <_malloc_r+0x624>
    1d08:	e5931004 	ldr	r1, [r3, #4]
    1d0c:	e3c11003 	bic	r1, r1, #3
    1d10:	e1520001 	cmp	r2, r1
    1d14:	2a000002 	bcs	1d24 <_malloc_r+0x4f4>
    1d18:	e5933008 	ldr	r3, [r3, #8]
    1d1c:	e1500003 	cmp	r0, r3
    1d20:	1afffff8 	bne	1d08 <_malloc_r+0x4d8>
    1d24:	e593200c 	ldr	r2, [r3, #12]
    1d28:	e5971004 	ldr	r1, [r7, #4]
    1d2c:	e584200c 	str	r2, [r4, #12]
    1d30:	e5843008 	str	r3, [r4, #8]
    1d34:	e583400c 	str	r4, [r3, #12]
    1d38:	e5824008 	str	r4, [r2, #8]
    1d3c:	eaffff19 	b	19a8 <_malloc_r+0x178>
    1d40:	e0842005 	add	r2, r4, r5
    1d44:	e3810001 	orr	r0, r1, #1
    1d48:	e3855001 	orr	r5, r5, #1
    1d4c:	e5845004 	str	r5, [r4, #4]
    1d50:	e5832014 	str	r2, [r3, #20]
    1d54:	e5832010 	str	r2, [r3, #16]
    1d58:	e582800c 	str	r8, [r2, #12]
    1d5c:	e9820101 	stmib	r2, {r0, r8}
    1d60:	e7821001 	str	r1, [r2, r1]
    1d64:	e1a00006 	mov	r0, r6
    1d68:	eb00018f 	bl	23ac <__malloc_unlock>
    1d6c:	e2844008 	add	r4, r4, #8
    1d70:	eafffed5 	b	18cc <_malloc_r+0x9c>
    1d74:	e2844001 	add	r4, r4, #1
    1d78:	e3140003 	tst	r4, #3
    1d7c:	e28cc008 	add	r12, r12, #8
    1d80:	1affff1b 	bne	19f4 <_malloc_r+0x1c4>
    1d84:	e31e0003 	tst	lr, #3
    1d88:	e24a3008 	sub	r3, r10, #8
    1d8c:	0a000062 	beq	1f1c <_malloc_r+0x6ec>
    1d90:	e59aa000 	ldr	r10, [r10]
    1d94:	e15a0003 	cmp	r10, r3
    1d98:	e24ee001 	sub	lr, lr, #1
    1d9c:	0afffff8 	beq	1d84 <_malloc_r+0x554>
    1da0:	e5973004 	ldr	r3, [r7, #4]
    1da4:	e1a00080 	lsl	r0, r0, #1
    1da8:	e1500003 	cmp	r0, r3
    1dac:	8affff3e 	bhi	1aac <_malloc_r+0x27c>
    1db0:	e3500000 	cmp	r0, #0
    1db4:	0affff3c 	beq	1aac <_malloc_r+0x27c>
    1db8:	e1130000 	tst	r3, r0
    1dbc:	0a00005a 	beq	1f2c <_malloc_r+0x6fc>
    1dc0:	e1a0e004 	mov	lr, r4
    1dc4:	eaffff07 	b	19e8 <_malloc_r+0x1b8>
    1dc8:	e2843008 	add	r3, r4, #8
    1dcc:	e5944014 	ldr	r4, [r4, #20]
    1dd0:	e1530004 	cmp	r3, r4
    1dd4:	028ee002 	addeq	lr, lr, #2
    1dd8:	0afffed5 	beq	1934 <_malloc_r+0x104>
    1ddc:	eafffead 	b	1898 <_malloc_r+0x68>
    1de0:	e0831001 	add	r1, r3, r1
    1de4:	e5910004 	ldr	r0, [r1, #4]
    1de8:	e1a04003 	mov	r4, r3
    1dec:	e5b42008 	ldr	r2, [r4, #8]!
    1df0:	e593300c 	ldr	r3, [r3, #12]
    1df4:	e3800001 	orr	r0, r0, #1
    1df8:	e5810004 	str	r0, [r1, #4]
    1dfc:	e582300c 	str	r3, [r2, #12]
    1e00:	e5832008 	str	r2, [r3, #8]
    1e04:	e1a00006 	mov	r0, r6
    1e08:	eb000167 	bl	23ac <__malloc_unlock>
    1e0c:	eafffeae 	b	18cc <_malloc_r+0x9c>
    1e10:	e1a0a322 	lsr	r10, r2, #6
    1e14:	e28aa038 	add	r10, r10, #56	; 0x38
    1e18:	e1a0008a 	lsl	r0, r10, #1
    1e1c:	eaffffb4 	b	1cf4 <_malloc_r+0x4c4>
    1e20:	e1540007 	cmp	r4, r7
    1e24:	0affff3d 	beq	1b20 <_malloc_r+0x2f0>
    1e28:	e59f3110 	ldr	r3, [pc, #272]	; 1f40 <_malloc_r+0x710>
    1e2c:	e5934008 	ldr	r4, [r3, #8]
    1e30:	e5943004 	ldr	r3, [r4, #4]
    1e34:	e3c33003 	bic	r3, r3, #3
    1e38:	eaffff78 	b	1c20 <_malloc_r+0x3f0>
    1e3c:	e35e0f55 	cmp	lr, #340	; 0x154
    1e40:	8a00000f 	bhi	1e84 <_malloc_r+0x654>
    1e44:	e1a0e7a5 	lsr	lr, r5, #15
    1e48:	e28ee077 	add	lr, lr, #119	; 0x77
    1e4c:	e1a0108e 	lsl	r1, lr, #1
    1e50:	eafffea5 	b	18ec <_malloc_r+0xbc>
    1e54:	e59c2004 	ldr	r2, [r12, #4]
    1e58:	e1a0a14a 	asr	r10, r10, #2
    1e5c:	e3a01001 	mov	r1, #1
    1e60:	e1821a11 	orr	r1, r2, r1, lsl r10
    1e64:	e1a02003 	mov	r2, r3
    1e68:	e58c1004 	str	r1, [r12, #4]
    1e6c:	eaffffae 	b	1d2c <_malloc_r+0x4fc>
    1e70:	e3a03001 	mov	r3, #1
    1e74:	e5883004 	str	r3, [r8, #4]
    1e78:	e1a04008 	mov	r4, r8
    1e7c:	e3a03000 	mov	r3, #0
    1e80:	eaffff66 	b	1c20 <_malloc_r+0x3f0>
    1e84:	e59f30bc 	ldr	r3, [pc, #188]	; 1f48 <_malloc_r+0x718>
    1e88:	e15e0003 	cmp	lr, r3
    1e8c:	91a0e925 	lsrls	lr, r5, #18
    1e90:	928ee07c 	addls	lr, lr, #124	; 0x7c
    1e94:	91a0108e 	lslls	r1, lr, #1
    1e98:	83a010fc 	movhi	r1, #252	; 0xfc
    1e9c:	83a0e07e 	movhi	lr, #126	; 0x7e
    1ea0:	eafffe91 	b	18ec <_malloc_r+0xbc>
    1ea4:	e5974008 	ldr	r4, [r7, #8]
    1ea8:	e5943004 	ldr	r3, [r4, #4]
    1eac:	e3c33003 	bic	r3, r3, #3
    1eb0:	eaffff5a 	b	1c20 <_malloc_r+0x3f0>
    1eb4:	e1b01a02 	lsls	r1, r2, #20
    1eb8:	1affff1d 	bne	1b34 <_malloc_r+0x304>
    1ebc:	e5972008 	ldr	r2, [r7, #8]
    1ec0:	e08b100a 	add	r1, r11, r10
    1ec4:	e3811001 	orr	r1, r1, #1
    1ec8:	e5821004 	str	r1, [r2, #4]
    1ecc:	eaffff46 	b	1bec <_malloc_r+0x3bc>
    1ed0:	e1a00006 	mov	r0, r6
    1ed4:	e2841008 	add	r1, r4, #8
    1ed8:	eb00047a 	bl	30c8 <_free_r>
    1edc:	e59f3060 	ldr	r3, [pc, #96]	; 1f44 <_malloc_r+0x714>
    1ee0:	e5933004 	ldr	r3, [r3, #4]
    1ee4:	eaffff40 	b	1bec <_malloc_r+0x3bc>
    1ee8:	e3530f55 	cmp	r3, #340	; 0x154
    1eec:	91a0a7a2 	lsrls	r10, r2, #15
    1ef0:	928aa077 	addls	r10, r10, #119	; 0x77
    1ef4:	91a0008a 	lslls	r0, r10, #1
    1ef8:	9affff7d 	bls	1cf4 <_malloc_r+0x4c4>
    1efc:	e59f1044 	ldr	r1, [pc, #68]	; 1f48 <_malloc_r+0x718>
    1f00:	e1530001 	cmp	r3, r1
    1f04:	91a0a922 	lsrls	r10, r2, #18
    1f08:	928aa07c 	addls	r10, r10, #124	; 0x7c
    1f0c:	91a0008a 	lslls	r0, r10, #1
    1f10:	83a000fc 	movhi	r0, #252	; 0xfc
    1f14:	83a0a07e 	movhi	r10, #126	; 0x7e
    1f18:	eaffff75 	b	1cf4 <_malloc_r+0x4c4>
    1f1c:	e5973004 	ldr	r3, [r7, #4]
    1f20:	e1c33000 	bic	r3, r3, r0
    1f24:	e5873004 	str	r3, [r7, #4]
    1f28:	eaffff9d 	b	1da4 <_malloc_r+0x574>
    1f2c:	e1a00080 	lsl	r0, r0, #1
    1f30:	e1130000 	tst	r3, r0
    1f34:	e2844004 	add	r4, r4, #4
    1f38:	1affffa0 	bne	1dc0 <_malloc_r+0x590>
    1f3c:	eafffffa 	b	1f2c <_malloc_r+0x6fc>
    1f40:	00004bf8 	.word	0x00004bf8
    1f44:	00005478 	.word	0x00005478
    1f48:	00000554 	.word	0x00000554

00001f4c <memchr>:
    1f4c:	e3100003 	tst	r0, #3
    1f50:	e92d0070 	push	{r4, r5, r6}
    1f54:	e20110ff 	and	r1, r1, #255	; 0xff
    1f58:	0a00003c 	beq	2050 <memchr+0x104>
    1f5c:	e3520000 	cmp	r2, #0
    1f60:	e242c001 	sub	r12, r2, #1
    1f64:	0a00003b 	beq	2058 <memchr+0x10c>
    1f68:	e5d03000 	ldrb	r3, [r0]
    1f6c:	e1530001 	cmp	r3, r1
    1f70:	0a00001f 	beq	1ff4 <memchr+0xa8>
    1f74:	e2803001 	add	r3, r0, #1
    1f78:	ea000006 	b	1f98 <memchr+0x4c>
    1f7c:	e35c0000 	cmp	r12, #0
    1f80:	0a00001d 	beq	1ffc <memchr+0xb0>
    1f84:	e5d02000 	ldrb	r2, [r0]
    1f88:	e1520001 	cmp	r2, r1
    1f8c:	e2833001 	add	r3, r3, #1
    1f90:	e24cc001 	sub	r12, r12, #1
    1f94:	0a000016 	beq	1ff4 <memchr+0xa8>
    1f98:	e3130003 	tst	r3, #3
    1f9c:	e1a00003 	mov	r0, r3
    1fa0:	1afffff5 	bne	1f7c <memchr+0x30>
    1fa4:	e35c0003 	cmp	r12, #3
    1fa8:	8a000015 	bhi	2004 <memchr+0xb8>
    1fac:	e35c0000 	cmp	r12, #0
    1fb0:	e24c4001 	sub	r4, r12, #1
    1fb4:	0a000010 	beq	1ffc <memchr+0xb0>
    1fb8:	e5d03000 	ldrb	r3, [r0]
    1fbc:	e1530001 	cmp	r3, r1
    1fc0:	0a00000b 	beq	1ff4 <memchr+0xa8>
    1fc4:	e2802001 	add	r2, r0, #1
    1fc8:	e3a03000 	mov	r3, #0
    1fcc:	ea000004 	b	1fe4 <memchr+0x98>
    1fd0:	e5d0c000 	ldrb	r12, [r0]
    1fd4:	e15c0001 	cmp	r12, r1
    1fd8:	e2822001 	add	r2, r2, #1
    1fdc:	e2833001 	add	r3, r3, #1
    1fe0:	0a000003 	beq	1ff4 <memchr+0xa8>
    1fe4:	e1540003 	cmp	r4, r3
    1fe8:	e1a00002 	mov	r0, r2
    1fec:	1afffff7 	bne	1fd0 <memchr+0x84>
    1ff0:	e3a00000 	mov	r0, #0
    1ff4:	e8bd0070 	pop	{r4, r5, r6}
    1ff8:	e12fff1e 	bx	lr
    1ffc:	e1a0000c 	mov	r0, r12
    2000:	eafffffb 	b	1ff4 <memchr+0xa8>
    2004:	e1816401 	orr	r6, r1, r1, lsl #8
    2008:	e1866806 	orr	r6, r6, r6, lsl #16
    200c:	e5903000 	ldr	r3, [r0]
    2010:	e59f4048 	ldr	r4, [pc, #72]	; 2060 <memchr+0x114>
    2014:	e0263003 	eor	r3, r6, r3
    2018:	e0834004 	add	r4, r3, r4
    201c:	e59f2040 	ldr	r2, [pc, #64]	; 2064 <memchr+0x118>
    2020:	e1c44003 	bic	r4, r4, r3
    2024:	e0042002 	and	r2, r4, r2
    2028:	e3520000 	cmp	r2, #0
    202c:	e1a05000 	mov	r5, r0
    2030:	e2800004 	add	r0, r0, #4
    2034:	1a000003 	bne	2048 <memchr+0xfc>
    2038:	e24cc004 	sub	r12, r12, #4
    203c:	e35c0003 	cmp	r12, #3
    2040:	8afffff1 	bhi	200c <memchr+0xc0>
    2044:	eaffffd8 	b	1fac <memchr+0x60>
    2048:	e1a00005 	mov	r0, r5
    204c:	eaffffd6 	b	1fac <memchr+0x60>
    2050:	e1a0c002 	mov	r12, r2
    2054:	eaffffd2 	b	1fa4 <memchr+0x58>
    2058:	e1a00002 	mov	r0, r2
    205c:	eaffffe4 	b	1ff4 <memchr+0xa8>
    2060:	fefefeff 	.word	0xfefefeff
    2064:	80808080 	.word	0x80808080

00002068 <memcpy>:
    2068:	e3520003 	cmp	r2, #3
    206c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    2070:	8a000009 	bhi	209c <memcpy+0x34>
    2074:	e3520000 	cmp	r2, #0
    2078:	0a000005 	beq	2094 <memcpy+0x2c>
    207c:	e3a03000 	mov	r3, #0
    2080:	e7d1c003 	ldrb	r12, [r1, r3]
    2084:	e7c0c003 	strb	r12, [r0, r3]
    2088:	e2833001 	add	r3, r3, #1
    208c:	e1530002 	cmp	r3, r2
    2090:	1afffffa 	bne	2080 <memcpy+0x18>
    2094:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    2098:	e12fff1e 	bx	lr
    209c:	e3100003 	tst	r0, #3
    20a0:	e0802002 	add	r2, r0, r2
    20a4:	0a00000b 	beq	20d8 <memcpy+0x70>
    20a8:	e280c001 	add	r12, r0, #1
    20ac:	e2814001 	add	r4, r1, #1
    20b0:	e20c3003 	and	r3, r12, #3
    20b4:	e5545001 	ldrb	r5, [r4, #-1]
    20b8:	e3530000 	cmp	r3, #0
    20bc:	e1a01004 	mov	r1, r4
    20c0:	e1a0300c 	mov	r3, r12
    20c4:	e54c5001 	strb	r5, [r12, #-1]
    20c8:	e2844001 	add	r4, r4, #1
    20cc:	e28cc001 	add	r12, r12, #1
    20d0:	1afffff6 	bne	20b0 <memcpy+0x48>
    20d4:	ea000000 	b	20dc <memcpy+0x74>
    20d8:	e1a03000 	mov	r3, r0
    20dc:	e211c003 	ands	r12, r1, #3
    20e0:	1a00004f 	bne	2224 <memcpy+0x1bc>
    20e4:	e063c002 	rsb	r12, r3, r2
    20e8:	e35c003f 	cmp	r12, #63	; 0x3f
    20ec:	da000024 	ble	2184 <memcpy+0x11c>
    20f0:	e591c000 	ldr	r12, [r1]
    20f4:	e583c000 	str	r12, [r3]
    20f8:	e591c004 	ldr	r12, [r1, #4]
    20fc:	e583c004 	str	r12, [r3, #4]
    2100:	e591c008 	ldr	r12, [r1, #8]
    2104:	e583c008 	str	r12, [r3, #8]
    2108:	e591c00c 	ldr	r12, [r1, #12]
    210c:	e583c00c 	str	r12, [r3, #12]
    2110:	e591c010 	ldr	r12, [r1, #16]
    2114:	e583c010 	str	r12, [r3, #16]
    2118:	e591c014 	ldr	r12, [r1, #20]
    211c:	e583c014 	str	r12, [r3, #20]
    2120:	e591c018 	ldr	r12, [r1, #24]
    2124:	e583c018 	str	r12, [r3, #24]
    2128:	e591c01c 	ldr	r12, [r1, #28]
    212c:	e583c01c 	str	r12, [r3, #28]
    2130:	e591c020 	ldr	r12, [r1, #32]
    2134:	e583c020 	str	r12, [r3, #32]
    2138:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    213c:	e583c024 	str	r12, [r3, #36]	; 0x24
    2140:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    2144:	e583c028 	str	r12, [r3, #40]	; 0x28
    2148:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    214c:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    2150:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    2154:	e583c030 	str	r12, [r3, #48]	; 0x30
    2158:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    215c:	e583c034 	str	r12, [r3, #52]	; 0x34
    2160:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    2164:	e583c038 	str	r12, [r3, #56]	; 0x38
    2168:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    216c:	e2833040 	add	r3, r3, #64	; 0x40
    2170:	e503c004 	str	r12, [r3, #-4]
    2174:	e063c002 	rsb	r12, r3, r2
    2178:	e35c003f 	cmp	r12, #63	; 0x3f
    217c:	e2811040 	add	r1, r1, #64	; 0x40
    2180:	caffffda 	bgt	20f0 <memcpy+0x88>
    2184:	e35c000f 	cmp	r12, #15
    2188:	da00000c 	ble	21c0 <memcpy+0x158>
    218c:	e591c000 	ldr	r12, [r1]
    2190:	e583c000 	str	r12, [r3]
    2194:	e591c004 	ldr	r12, [r1, #4]
    2198:	e583c004 	str	r12, [r3, #4]
    219c:	e591c008 	ldr	r12, [r1, #8]
    21a0:	e583c008 	str	r12, [r3, #8]
    21a4:	e591c00c 	ldr	r12, [r1, #12]
    21a8:	e2833010 	add	r3, r3, #16
    21ac:	e503c004 	str	r12, [r3, #-4]
    21b0:	e063c002 	rsb	r12, r3, r2
    21b4:	e35c000f 	cmp	r12, #15
    21b8:	e2811010 	add	r1, r1, #16
    21bc:	cafffff2 	bgt	218c <memcpy+0x124>
    21c0:	e35c0003 	cmp	r12, #3
    21c4:	da00000a 	ble	21f4 <memcpy+0x18c>
    21c8:	e283c004 	add	r12, r3, #4
    21cc:	e2814004 	add	r4, r1, #4
    21d0:	e06c3002 	rsb	r3, r12, r2
    21d4:	e5145004 	ldr	r5, [r4, #-4]
    21d8:	e3530003 	cmp	r3, #3
    21dc:	e1a01004 	mov	r1, r4
    21e0:	e1a0300c 	mov	r3, r12
    21e4:	e50c5004 	str	r5, [r12, #-4]
    21e8:	e2844004 	add	r4, r4, #4
    21ec:	e28cc004 	add	r12, r12, #4
    21f0:	cafffff6 	bgt	21d0 <memcpy+0x168>
    21f4:	e1520003 	cmp	r2, r3
    21f8:	82833001 	addhi	r3, r3, #1
    21fc:	82811001 	addhi	r1, r1, #1
    2200:	82822001 	addhi	r2, r2, #1
    2204:	9affffa2 	bls	2094 <memcpy+0x2c>
    2208:	e551c001 	ldrb	r12, [r1, #-1]
    220c:	e2833001 	add	r3, r3, #1
    2210:	e1530002 	cmp	r3, r2
    2214:	e543c002 	strb	r12, [r3, #-2]
    2218:	e2811001 	add	r1, r1, #1
    221c:	1afffff9 	bne	2208 <memcpy+0x1a0>
    2220:	eaffff9b 	b	2094 <memcpy+0x2c>
    2224:	e0635002 	rsb	r5, r3, r2
    2228:	e06c4001 	rsb	r4, r12, r1
    222c:	e3550003 	cmp	r5, #3
    2230:	e5945000 	ldr	r5, [r4]
    2234:	daffffee 	ble	21f4 <memcpy+0x18c>
    2238:	e26c6004 	rsb	r6, r12, #4
    223c:	e1a0718c 	lsl	r7, r12, #3
    2240:	e1a06186 	lsl	r6, r6, #3
    2244:	e283c004 	add	r12, r3, #4
    2248:	e1a08735 	lsr	r8, r5, r7
    224c:	e5b45004 	ldr	r5, [r4, #4]!
    2250:	e1888615 	orr	r8, r8, r5, lsl r6
    2254:	e06c3002 	rsb	r3, r12, r2
    2258:	e3530003 	cmp	r3, #3
    225c:	e50c8004 	str	r8, [r12, #-4]
    2260:	e1a0300c 	mov	r3, r12
    2264:	e2811004 	add	r1, r1, #4
    2268:	e28cc004 	add	r12, r12, #4
    226c:	cafffff5 	bgt	2248 <memcpy+0x1e0>
    2270:	eaffffdf 	b	21f4 <memcpy+0x18c>

00002274 <memmove>:
    2274:	e1500001 	cmp	r0, r1
    2278:	e92d00f0 	push	{r4, r5, r6, r7}
    227c:	9a00000e 	bls	22bc <memmove+0x48>
    2280:	e081c002 	add	r12, r1, r2
    2284:	e150000c 	cmp	r0, r12
    2288:	2a00000b 	bcs	22bc <memmove+0x48>
    228c:	e3520000 	cmp	r2, #0
    2290:	e0803002 	add	r3, r0, r2
    2294:	e2422001 	sub	r2, r2, #1
    2298:	0a000005 	beq	22b4 <memmove+0x40>
    229c:	e1a0100c 	mov	r1, r12
    22a0:	e571c001 	ldrb	r12, [r1, #-1]!
    22a4:	e2422001 	sub	r2, r2, #1
    22a8:	e3720001 	cmn	r2, #1
    22ac:	e563c001 	strb	r12, [r3, #-1]!
    22b0:	1afffffa 	bne	22a0 <memmove+0x2c>
    22b4:	e8bd00f0 	pop	{r4, r5, r6, r7}
    22b8:	e12fff1e 	bx	lr
    22bc:	e352000f 	cmp	r2, #15
    22c0:	8a000009 	bhi	22ec <memmove+0x78>
    22c4:	e1a03000 	mov	r3, r0
    22c8:	e3520000 	cmp	r2, #0
    22cc:	0afffff8 	beq	22b4 <memmove+0x40>
    22d0:	e2411001 	sub	r1, r1, #1
    22d4:	e0832002 	add	r2, r3, r2
    22d8:	e5f1c001 	ldrb	r12, [r1, #1]!
    22dc:	e4c3c001 	strb	r12, [r3], #1
    22e0:	e1530002 	cmp	r3, r2
    22e4:	1afffffb 	bne	22d8 <memmove+0x64>
    22e8:	eafffff1 	b	22b4 <memmove+0x40>
    22ec:	e1813000 	orr	r3, r1, r0
    22f0:	e3130003 	tst	r3, #3
    22f4:	1a000027 	bne	2398 <memmove+0x124>
    22f8:	e1a0c001 	mov	r12, r1
    22fc:	e1a03000 	mov	r3, r0
    2300:	e1a04002 	mov	r4, r2
    2304:	e59c5000 	ldr	r5, [r12]
    2308:	e5835000 	str	r5, [r3]
    230c:	e59c5004 	ldr	r5, [r12, #4]
    2310:	e5835004 	str	r5, [r3, #4]
    2314:	e59c5008 	ldr	r5, [r12, #8]
    2318:	e5835008 	str	r5, [r3, #8]
    231c:	e2444010 	sub	r4, r4, #16
    2320:	e59c500c 	ldr	r5, [r12, #12]
    2324:	e354000f 	cmp	r4, #15
    2328:	e583500c 	str	r5, [r3, #12]
    232c:	e28cc010 	add	r12, r12, #16
    2330:	e2833010 	add	r3, r3, #16
    2334:	8afffff2 	bhi	2304 <memmove+0x90>
    2338:	e2424010 	sub	r4, r2, #16
    233c:	e3c4400f 	bic	r4, r4, #15
    2340:	e202c00f 	and	r12, r2, #15
    2344:	e2844010 	add	r4, r4, #16
    2348:	e35c0003 	cmp	r12, #3
    234c:	e0803004 	add	r3, r0, r4
    2350:	e0811004 	add	r1, r1, r4
    2354:	9a000011 	bls	23a0 <memmove+0x12c>
    2358:	e24cc004 	sub	r12, r12, #4
    235c:	e1a0712c 	lsr	r7, r12, #2
    2360:	e0816107 	add	r6, r1, r7, lsl #2
    2364:	e1a0c001 	mov	r12, r1
    2368:	e2866004 	add	r6, r6, #4
    236c:	e1a04003 	mov	r4, r3
    2370:	e49c5004 	ldr	r5, [r12], #4
    2374:	e15c0006 	cmp	r12, r6
    2378:	e4845004 	str	r5, [r4], #4
    237c:	1afffffb 	bne	2370 <memmove+0xfc>
    2380:	e287c001 	add	r12, r7, #1
    2384:	e1a0c10c 	lsl	r12, r12, #2
    2388:	e2022003 	and	r2, r2, #3
    238c:	e081100c 	add	r1, r1, r12
    2390:	e083300c 	add	r3, r3, r12
    2394:	eaffffcb 	b	22c8 <memmove+0x54>
    2398:	e1a03000 	mov	r3, r0
    239c:	eaffffcb 	b	22d0 <memmove+0x5c>
    23a0:	e1a0200c 	mov	r2, r12
    23a4:	eaffffc7 	b	22c8 <memmove+0x54>

000023a8 <__malloc_lock>:
    23a8:	e12fff1e 	bx	lr

000023ac <__malloc_unlock>:
    23ac:	e12fff1e 	bx	lr

000023b0 <_realloc_r>:
    23b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    23b4:	e2514000 	subs	r4, r1, #0
    23b8:	e24dd00c 	sub	sp, sp, #12
    23bc:	e1a08000 	mov	r8, r0
    23c0:	e1a0b002 	mov	r11, r2
    23c4:	0a0000d1 	beq	2710 <_realloc_r+0x360>
    23c8:	ebfffff6 	bl	23a8 <__malloc_lock>
    23cc:	e28b500b 	add	r5, r11, #11
    23d0:	e3550016 	cmp	r5, #22
    23d4:	83c55007 	bichi	r5, r5, #7
    23d8:	93a01010 	movls	r1, #16
    23dc:	81a06fa5 	lsrhi	r6, r5, #31
    23e0:	93a06000 	movls	r6, #0
    23e4:	91a05001 	movls	r5, r1
    23e8:	e5143004 	ldr	r3, [r4, #-4]
    23ec:	81a01005 	movhi	r1, r5
    23f0:	e155000b 	cmp	r5, r11
    23f4:	33866001 	orrcc	r6, r6, #1
    23f8:	e3560000 	cmp	r6, #0
    23fc:	e3c37003 	bic	r7, r3, #3
    2400:	13a0300c 	movne	r3, #12
    2404:	e244a008 	sub	r10, r4, #8
    2408:	15883000 	strne	r3, [r8]
    240c:	13a06000 	movne	r6, #0
    2410:	1a00000f 	bne	2454 <_realloc_r+0xa4>
    2414:	e1570001 	cmp	r7, r1
    2418:	ba000011 	blt	2464 <_realloc_r+0xb4>
    241c:	e1a06007 	mov	r6, r7
    2420:	e0652006 	rsb	r2, r5, r6
    2424:	e352000f 	cmp	r2, #15
    2428:	e2033001 	and	r3, r3, #1
    242c:	8a00005e 	bhi	25ac <_realloc_r+0x1fc>
    2430:	e1833006 	orr	r3, r3, r6
    2434:	e58a3004 	str	r3, [r10, #4]
    2438:	e08aa006 	add	r10, r10, r6
    243c:	e59a3004 	ldr	r3, [r10, #4]
    2440:	e3833001 	orr	r3, r3, #1
    2444:	e58a3004 	str	r3, [r10, #4]
    2448:	e1a00008 	mov	r0, r8
    244c:	ebffffd6 	bl	23ac <__malloc_unlock>
    2450:	e1a06004 	mov	r6, r4
    2454:	e1a00006 	mov	r0, r6
    2458:	e28dd00c 	add	sp, sp, #12
    245c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2460:	e12fff1e 	bx	lr
    2464:	e59f24b4 	ldr	r2, [pc, #1204]	; 2920 <_realloc_r+0x570>
    2468:	e592c008 	ldr	r12, [r2, #8]
    246c:	e08a0007 	add	r0, r10, r7
    2470:	e15c0000 	cmp	r12, r0
    2474:	0a0000a9 	beq	2720 <_realloc_r+0x370>
    2478:	e590e004 	ldr	lr, [r0, #4]
    247c:	e3ce9001 	bic	r9, lr, #1
    2480:	e0809009 	add	r9, r0, r9
    2484:	e5999004 	ldr	r9, [r9, #4]
    2488:	e3190001 	tst	r9, #1
    248c:	11a0e006 	movne	lr, r6
    2490:	11a0000e 	movne	r0, lr
    2494:	0a00003b 	beq	2588 <_realloc_r+0x1d8>
    2498:	e3130001 	tst	r3, #1
    249c:	1a00004f 	bne	25e0 <_realloc_r+0x230>
    24a0:	e5149008 	ldr	r9, [r4, #-8]
    24a4:	e069900a 	rsb	r9, r9, r10
    24a8:	e5993004 	ldr	r3, [r9, #4]
    24ac:	e3500000 	cmp	r0, #0
    24b0:	e3c33003 	bic	r3, r3, #3
    24b4:	0a000067 	beq	2658 <_realloc_r+0x2a8>
    24b8:	e150000c 	cmp	r0, r12
    24bc:	e083c007 	add	r12, r3, r7
    24c0:	0a0000ce 	beq	2800 <_realloc_r+0x450>
    24c4:	e08e600c 	add	r6, lr, r12
    24c8:	e1560001 	cmp	r6, r1
    24cc:	ba000062 	blt	265c <_realloc_r+0x2ac>
    24d0:	e2802008 	add	r2, r0, #8
    24d4:	e892000c 	ldm	r2, {r2, r3}
    24d8:	e5832008 	str	r2, [r3, #8]
    24dc:	e582300c 	str	r3, [r2, #12]
    24e0:	e1a0a009 	mov	r10, r9
    24e4:	e599300c 	ldr	r3, [r9, #12]
    24e8:	e5ba1008 	ldr	r1, [r10, #8]!
    24ec:	e2472004 	sub	r2, r7, #4
    24f0:	e3520024 	cmp	r2, #36	; 0x24
    24f4:	e581300c 	str	r3, [r1, #12]
    24f8:	e5831008 	str	r1, [r3, #8]
    24fc:	8a0000fa 	bhi	28ec <_realloc_r+0x53c>
    2500:	e3520013 	cmp	r2, #19
    2504:	91a0300a 	movls	r3, r10
    2508:	9a000014 	bls	2560 <_realloc_r+0x1b0>
    250c:	e5943000 	ldr	r3, [r4]
    2510:	e5893008 	str	r3, [r9, #8]
    2514:	e5943004 	ldr	r3, [r4, #4]
    2518:	e352001b 	cmp	r2, #27
    251c:	e589300c 	str	r3, [r9, #12]
    2520:	92844008 	addls	r4, r4, #8
    2524:	92893010 	addls	r3, r9, #16
    2528:	9a00000c 	bls	2560 <_realloc_r+0x1b0>
    252c:	e5943008 	ldr	r3, [r4, #8]
    2530:	e5893010 	str	r3, [r9, #16]
    2534:	e594300c 	ldr	r3, [r4, #12]
    2538:	e5893014 	str	r3, [r9, #20]
    253c:	e3520024 	cmp	r2, #36	; 0x24
    2540:	05943010 	ldreq	r3, [r4, #16]
    2544:	05893018 	streq	r3, [r9, #24]
    2548:	05942014 	ldreq	r2, [r4, #20]
    254c:	0589201c 	streq	r2, [r9, #28]
    2550:	12893018 	addne	r3, r9, #24
    2554:	12844010 	addne	r4, r4, #16
    2558:	02893020 	addeq	r3, r9, #32
    255c:	02844018 	addeq	r4, r4, #24
    2560:	e5942000 	ldr	r2, [r4]
    2564:	e5832000 	str	r2, [r3]
    2568:	e5942004 	ldr	r2, [r4, #4]
    256c:	e5832004 	str	r2, [r3, #4]
    2570:	e5942008 	ldr	r2, [r4, #8]
    2574:	e5832008 	str	r2, [r3, #8]
    2578:	e1a0400a 	mov	r4, r10
    257c:	e5993004 	ldr	r3, [r9, #4]
    2580:	e1a0a009 	mov	r10, r9
    2584:	eaffffa5 	b	2420 <_realloc_r+0x70>
    2588:	e3cee003 	bic	lr, lr, #3
    258c:	e08e6007 	add	r6, lr, r7
    2590:	e1560001 	cmp	r6, r1
    2594:	baffffbf 	blt	2498 <_realloc_r+0xe8>
    2598:	e2801008 	add	r1, r0, #8
    259c:	e8910006 	ldm	r1, {r1, r2}
    25a0:	e581200c 	str	r2, [r1, #12]
    25a4:	e5821008 	str	r1, [r2, #8]
    25a8:	eaffff9c 	b	2420 <_realloc_r+0x70>
    25ac:	e08a1005 	add	r1, r10, r5
    25b0:	e3820001 	orr	r0, r2, #1
    25b4:	e1835005 	orr	r5, r3, r5
    25b8:	e58a5004 	str	r5, [r10, #4]
    25bc:	e5810004 	str	r0, [r1, #4]
    25c0:	e0812002 	add	r2, r1, r2
    25c4:	e5923004 	ldr	r3, [r2, #4]
    25c8:	e3833001 	orr	r3, r3, #1
    25cc:	e5823004 	str	r3, [r2, #4]
    25d0:	e1a00008 	mov	r0, r8
    25d4:	e2811008 	add	r1, r1, #8
    25d8:	eb0002ba 	bl	30c8 <_free_r>
    25dc:	eaffff99 	b	2448 <_realloc_r+0x98>
    25e0:	e1a00008 	mov	r0, r8
    25e4:	e1a0100b 	mov	r1, r11
    25e8:	ebfffc90 	bl	1830 <_malloc_r>
    25ec:	e2506000 	subs	r6, r0, #0
    25f0:	0a000015 	beq	264c <_realloc_r+0x29c>
    25f4:	e5143004 	ldr	r3, [r4, #-4]
    25f8:	e3c32001 	bic	r2, r3, #1
    25fc:	e2461008 	sub	r1, r6, #8
    2600:	e08a2002 	add	r2, r10, r2
    2604:	e1510002 	cmp	r1, r2
    2608:	0a0000b3 	beq	28dc <_realloc_r+0x52c>
    260c:	e2472004 	sub	r2, r7, #4
    2610:	e3520024 	cmp	r2, #36	; 0x24
    2614:	8a000076 	bhi	27f4 <_realloc_r+0x444>
    2618:	e3520013 	cmp	r2, #19
    261c:	91a03006 	movls	r3, r6
    2620:	91a02004 	movls	r2, r4
    2624:	8a000052 	bhi	2774 <_realloc_r+0x3c4>
    2628:	e5921000 	ldr	r1, [r2]
    262c:	e5831000 	str	r1, [r3]
    2630:	e5921004 	ldr	r1, [r2, #4]
    2634:	e5831004 	str	r1, [r3, #4]
    2638:	e5922008 	ldr	r2, [r2, #8]
    263c:	e5832008 	str	r2, [r3, #8]
    2640:	e1a00008 	mov	r0, r8
    2644:	e1a01004 	mov	r1, r4
    2648:	eb00029e 	bl	30c8 <_free_r>
    264c:	e1a00008 	mov	r0, r8
    2650:	ebffff55 	bl	23ac <__malloc_unlock>
    2654:	eaffff7e 	b	2454 <_realloc_r+0xa4>
    2658:	e083c007 	add	r12, r3, r7
    265c:	e15c0001 	cmp	r12, r1
    2660:	baffffde 	blt	25e0 <_realloc_r+0x230>
    2664:	e1a06009 	mov	r6, r9
    2668:	e599300c 	ldr	r3, [r9, #12]
    266c:	e5b61008 	ldr	r1, [r6, #8]!
    2670:	e2472004 	sub	r2, r7, #4
    2674:	e3520024 	cmp	r2, #36	; 0x24
    2678:	e581300c 	str	r3, [r1, #12]
    267c:	e5831008 	str	r1, [r3, #8]
    2680:	8a000051 	bhi	27cc <_realloc_r+0x41c>
    2684:	e3520013 	cmp	r2, #19
    2688:	91a03006 	movls	r3, r6
    268c:	9a000014 	bls	26e4 <_realloc_r+0x334>
    2690:	e5943000 	ldr	r3, [r4]
    2694:	e5893008 	str	r3, [r9, #8]
    2698:	e5943004 	ldr	r3, [r4, #4]
    269c:	e352001b 	cmp	r2, #27
    26a0:	e589300c 	str	r3, [r9, #12]
    26a4:	92844008 	addls	r4, r4, #8
    26a8:	92893010 	addls	r3, r9, #16
    26ac:	9a00000c 	bls	26e4 <_realloc_r+0x334>
    26b0:	e5943008 	ldr	r3, [r4, #8]
    26b4:	e5893010 	str	r3, [r9, #16]
    26b8:	e594300c 	ldr	r3, [r4, #12]
    26bc:	e5893014 	str	r3, [r9, #20]
    26c0:	e3520024 	cmp	r2, #36	; 0x24
    26c4:	05943010 	ldreq	r3, [r4, #16]
    26c8:	05893018 	streq	r3, [r9, #24]
    26cc:	05942014 	ldreq	r2, [r4, #20]
    26d0:	0589201c 	streq	r2, [r9, #28]
    26d4:	12893018 	addne	r3, r9, #24
    26d8:	12844010 	addne	r4, r4, #16
    26dc:	02893020 	addeq	r3, r9, #32
    26e0:	02844018 	addeq	r4, r4, #24
    26e4:	e5942000 	ldr	r2, [r4]
    26e8:	e5832000 	str	r2, [r3]
    26ec:	e5942004 	ldr	r2, [r4, #4]
    26f0:	e5832004 	str	r2, [r3, #4]
    26f4:	e5942008 	ldr	r2, [r4, #8]
    26f8:	e5832008 	str	r2, [r3, #8]
    26fc:	e1a04006 	mov	r4, r6
    2700:	e5993004 	ldr	r3, [r9, #4]
    2704:	e1a0600c 	mov	r6, r12
    2708:	e1a0a009 	mov	r10, r9
    270c:	eaffff43 	b	2420 <_realloc_r+0x70>
    2710:	e1a01002 	mov	r1, r2
    2714:	ebfffc45 	bl	1830 <_malloc_r>
    2718:	e1a06000 	mov	r6, r0
    271c:	eaffff4c 	b	2454 <_realloc_r+0xa4>
    2720:	e59ce004 	ldr	lr, [r12, #4]
    2724:	e3cee003 	bic	lr, lr, #3
    2728:	e08e0007 	add	r0, lr, r7
    272c:	e2856010 	add	r6, r5, #16
    2730:	e1500006 	cmp	r0, r6
    2734:	b1a0000c 	movlt	r0, r12
    2738:	baffff56 	blt	2498 <_realloc_r+0xe8>
    273c:	e0653000 	rsb	r3, r5, r0
    2740:	e08aa005 	add	r10, r10, r5
    2744:	e3833001 	orr	r3, r3, #1
    2748:	e58a3004 	str	r3, [r10, #4]
    274c:	e5143004 	ldr	r3, [r4, #-4]
    2750:	e2033001 	and	r3, r3, #1
    2754:	e1855003 	orr	r5, r5, r3
    2758:	e59f31c0 	ldr	r3, [pc, #448]	; 2920 <_realloc_r+0x570>
    275c:	e5045004 	str	r5, [r4, #-4]
    2760:	e1a00008 	mov	r0, r8
    2764:	e583a008 	str	r10, [r3, #8]
    2768:	e1a06004 	mov	r6, r4
    276c:	ebffff0e 	bl	23ac <__malloc_unlock>
    2770:	eaffff37 	b	2454 <_realloc_r+0xa4>
    2774:	e5943000 	ldr	r3, [r4]
    2778:	e5863000 	str	r3, [r6]
    277c:	e5943004 	ldr	r3, [r4, #4]
    2780:	e352001b 	cmp	r2, #27
    2784:	e5863004 	str	r3, [r6, #4]
    2788:	92842008 	addls	r2, r4, #8
    278c:	92863008 	addls	r3, r6, #8
    2790:	9affffa4 	bls	2628 <_realloc_r+0x278>
    2794:	e5943008 	ldr	r3, [r4, #8]
    2798:	e5863008 	str	r3, [r6, #8]
    279c:	e594300c 	ldr	r3, [r4, #12]
    27a0:	e586300c 	str	r3, [r6, #12]
    27a4:	e3520024 	cmp	r2, #36	; 0x24
    27a8:	05943010 	ldreq	r3, [r4, #16]
    27ac:	05863010 	streq	r3, [r6, #16]
    27b0:	05942014 	ldreq	r2, [r4, #20]
    27b4:	12863010 	addne	r3, r6, #16
    27b8:	05862014 	streq	r2, [r6, #20]
    27bc:	12842010 	addne	r2, r4, #16
    27c0:	02863018 	addeq	r3, r6, #24
    27c4:	02842018 	addeq	r2, r4, #24
    27c8:	eaffff96 	b	2628 <_realloc_r+0x278>
    27cc:	e1a01004 	mov	r1, r4
    27d0:	e1a00006 	mov	r0, r6
    27d4:	e58dc004 	str	r12, [sp, #4]
    27d8:	ebfffea5 	bl	2274 <memmove>
    27dc:	e59dc004 	ldr	r12, [sp, #4]
    27e0:	e1a04006 	mov	r4, r6
    27e4:	e5993004 	ldr	r3, [r9, #4]
    27e8:	e1a0600c 	mov	r6, r12
    27ec:	e1a0a009 	mov	r10, r9
    27f0:	eaffff0a 	b	2420 <_realloc_r+0x70>
    27f4:	e1a01004 	mov	r1, r4
    27f8:	ebfffe9d 	bl	2274 <memmove>
    27fc:	eaffff8f 	b	2640 <_realloc_r+0x290>
    2800:	e08e300c 	add	r3, lr, r12
    2804:	e2850010 	add	r0, r5, #16
    2808:	e1530000 	cmp	r3, r0
    280c:	baffff92 	blt	265c <_realloc_r+0x2ac>
    2810:	e1a06009 	mov	r6, r9
    2814:	e599100c 	ldr	r1, [r9, #12]
    2818:	e5b60008 	ldr	r0, [r6, #8]!
    281c:	e2472004 	sub	r2, r7, #4
    2820:	e3520024 	cmp	r2, #36	; 0x24
    2824:	e580100c 	str	r1, [r0, #12]
    2828:	e5810008 	str	r0, [r1, #8]
    282c:	8a000035 	bhi	2908 <_realloc_r+0x558>
    2830:	e3520013 	cmp	r2, #19
    2834:	91a02006 	movls	r2, r6
    2838:	9a000014 	bls	2890 <_realloc_r+0x4e0>
    283c:	e5941000 	ldr	r1, [r4]
    2840:	e5891008 	str	r1, [r9, #8]
    2844:	e5941004 	ldr	r1, [r4, #4]
    2848:	e352001b 	cmp	r2, #27
    284c:	e589100c 	str	r1, [r9, #12]
    2850:	92892010 	addls	r2, r9, #16
    2854:	92844008 	addls	r4, r4, #8
    2858:	9a00000c 	bls	2890 <_realloc_r+0x4e0>
    285c:	e5941008 	ldr	r1, [r4, #8]
    2860:	e5891010 	str	r1, [r9, #16]
    2864:	e594100c 	ldr	r1, [r4, #12]
    2868:	e5891014 	str	r1, [r9, #20]
    286c:	e3520024 	cmp	r2, #36	; 0x24
    2870:	05942010 	ldreq	r2, [r4, #16]
    2874:	05892018 	streq	r2, [r9, #24]
    2878:	05941014 	ldreq	r1, [r4, #20]
    287c:	0589101c 	streq	r1, [r9, #28]
    2880:	12892018 	addne	r2, r9, #24
    2884:	12844010 	addne	r4, r4, #16
    2888:	02892020 	addeq	r2, r9, #32
    288c:	02844018 	addeq	r4, r4, #24
    2890:	e5941000 	ldr	r1, [r4]
    2894:	e5821000 	str	r1, [r2]
    2898:	e5941004 	ldr	r1, [r4, #4]
    289c:	e5821004 	str	r1, [r2, #4]
    28a0:	e5941008 	ldr	r1, [r4, #8]
    28a4:	e5821008 	str	r1, [r2, #8]
    28a8:	e0653003 	rsb	r3, r5, r3
    28ac:	e0892005 	add	r2, r9, r5
    28b0:	e3833001 	orr	r3, r3, #1
    28b4:	e5823004 	str	r3, [r2, #4]
    28b8:	e5993004 	ldr	r3, [r9, #4]
    28bc:	e2033001 	and	r3, r3, #1
    28c0:	e1855003 	orr	r5, r5, r3
    28c4:	e59f3054 	ldr	r3, [pc, #84]	; 2920 <_realloc_r+0x570>
    28c8:	e5895004 	str	r5, [r9, #4]
    28cc:	e1a00008 	mov	r0, r8
    28d0:	e5832008 	str	r2, [r3, #8]
    28d4:	ebfffeb4 	bl	23ac <__malloc_unlock>
    28d8:	eafffedd 	b	2454 <_realloc_r+0xa4>
    28dc:	e5166004 	ldr	r6, [r6, #-4]
    28e0:	e3c66003 	bic	r6, r6, #3
    28e4:	e0866007 	add	r6, r6, r7
    28e8:	eafffecc 	b	2420 <_realloc_r+0x70>
    28ec:	e1a01004 	mov	r1, r4
    28f0:	e1a0000a 	mov	r0, r10
    28f4:	ebfffe5e 	bl	2274 <memmove>
    28f8:	e1a0400a 	mov	r4, r10
    28fc:	e5993004 	ldr	r3, [r9, #4]
    2900:	e1a0a009 	mov	r10, r9
    2904:	eafffec5 	b	2420 <_realloc_r+0x70>
    2908:	e1a00006 	mov	r0, r6
    290c:	e1a01004 	mov	r1, r4
    2910:	e58d3004 	str	r3, [sp, #4]
    2914:	ebfffe56 	bl	2274 <memmove>
    2918:	e59d3004 	ldr	r3, [sp, #4]
    291c:	eaffffe1 	b	28a8 <_realloc_r+0x4f8>
    2920:	00004bf8 	.word	0x00004bf8

00002924 <_sbrk_r>:
    2924:	e92d4038 	push	{r3, r4, r5, lr}
    2928:	e59f4030 	ldr	r4, [pc, #48]	; 2960 <_sbrk_r+0x3c>
    292c:	e3a03000 	mov	r3, #0
    2930:	e1a05000 	mov	r5, r0
    2934:	e1a00001 	mov	r0, r1
    2938:	e5843000 	str	r3, [r4]
    293c:	eb00055c 	bl	3eb4 <_sbrk>
    2940:	e3700001 	cmn	r0, #1
    2944:	0a000001 	beq	2950 <_sbrk_r+0x2c>
    2948:	e8bd4038 	pop	{r3, r4, r5, lr}
    294c:	e12fff1e 	bx	lr
    2950:	e5943000 	ldr	r3, [r4]
    2954:	e3530000 	cmp	r3, #0
    2958:	15853000 	strne	r3, [r5]
    295c:	eafffff9 	b	2948 <_sbrk_r+0x24>
    2960:	000054ac 	.word	0x000054ac

00002964 <__swsetup_r>:
    2964:	e92d4038 	push	{r3, r4, r5, lr}
    2968:	e59f3128 	ldr	r3, [pc, #296]	; 2a98 <__swsetup_r+0x134>
    296c:	e5933000 	ldr	r3, [r3]
    2970:	e3530000 	cmp	r3, #0
    2974:	e1a05000 	mov	r5, r0
    2978:	e1a04001 	mov	r4, r1
    297c:	0a000002 	beq	298c <__swsetup_r+0x28>
    2980:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    2984:	e3520000 	cmp	r2, #0
    2988:	0a00002e 	beq	2a48 <__swsetup_r+0xe4>
    298c:	e1d430bc 	ldrh	r3, [r4, #12]
    2990:	e3130008 	tst	r3, #8
    2994:	e1a02003 	mov	r2, r3
    2998:	0a00000c 	beq	29d0 <__swsetup_r+0x6c>
    299c:	e5942010 	ldr	r2, [r4, #16]
    29a0:	e3520000 	cmp	r2, #0
    29a4:	0a000012 	beq	29f4 <__swsetup_r+0x90>
    29a8:	e2131001 	ands	r1, r3, #1
    29ac:	1a000019 	bne	2a18 <__swsetup_r+0xb4>
    29b0:	e3130002 	tst	r3, #2
    29b4:	05941014 	ldreq	r1, [r4, #20]
    29b8:	e3520000 	cmp	r2, #0
    29bc:	e5841008 	str	r1, [r4, #8]
    29c0:	0a00001b 	beq	2a34 <__swsetup_r+0xd0>
    29c4:	e3a00000 	mov	r0, #0
    29c8:	e8bd4038 	pop	{r3, r4, r5, lr}
    29cc:	e12fff1e 	bx	lr
    29d0:	e3130010 	tst	r3, #16
    29d4:	0a000019 	beq	2a40 <__swsetup_r+0xdc>
    29d8:	e3120004 	tst	r2, #4
    29dc:	1a00001c 	bne	2a54 <__swsetup_r+0xf0>
    29e0:	e5942010 	ldr	r2, [r4, #16]
    29e4:	e3833008 	orr	r3, r3, #8
    29e8:	e3520000 	cmp	r2, #0
    29ec:	e1c430bc 	strh	r3, [r4, #12]
    29f0:	1affffec 	bne	29a8 <__swsetup_r+0x44>
    29f4:	e2031d0a 	and	r1, r3, #640	; 0x280
    29f8:	e3510c02 	cmp	r1, #512	; 0x200
    29fc:	0affffe9 	beq	29a8 <__swsetup_r+0x44>
    2a00:	e1a00005 	mov	r0, r5
    2a04:	e1a01004 	mov	r1, r4
    2a08:	eb00028e 	bl	3448 <__smakebuf_r>
    2a0c:	e1d430bc 	ldrh	r3, [r4, #12]
    2a10:	e5942010 	ldr	r2, [r4, #16]
    2a14:	eaffffe3 	b	29a8 <__swsetup_r+0x44>
    2a18:	e5943014 	ldr	r3, [r4, #20]
    2a1c:	e3a01000 	mov	r1, #0
    2a20:	e2633000 	rsb	r3, r3, #0
    2a24:	e3520000 	cmp	r2, #0
    2a28:	e5841008 	str	r1, [r4, #8]
    2a2c:	e5843018 	str	r3, [r4, #24]
    2a30:	1affffe3 	bne	29c4 <__swsetup_r+0x60>
    2a34:	e1d430bc 	ldrh	r3, [r4, #12]
    2a38:	e3130080 	tst	r3, #128	; 0x80
    2a3c:	0affffe0 	beq	29c4 <__swsetup_r+0x60>
    2a40:	e3e00000 	mvn	r0, #0
    2a44:	eaffffdf 	b	29c8 <__swsetup_r+0x64>
    2a48:	e1a00003 	mov	r0, r3
    2a4c:	eb0000ec 	bl	2e04 <__sinit>
    2a50:	eaffffcd 	b	298c <__swsetup_r+0x28>
    2a54:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    2a58:	e3510000 	cmp	r1, #0
    2a5c:	0a000007 	beq	2a80 <__swsetup_r+0x11c>
    2a60:	e2842040 	add	r2, r4, #64	; 0x40
    2a64:	e1510002 	cmp	r1, r2
    2a68:	0a000002 	beq	2a78 <__swsetup_r+0x114>
    2a6c:	e1a00005 	mov	r0, r5
    2a70:	eb000194 	bl	30c8 <_free_r>
    2a74:	e1d430bc 	ldrh	r3, [r4, #12]
    2a78:	e3a02000 	mov	r2, #0
    2a7c:	e5842030 	str	r2, [r4, #48]	; 0x30
    2a80:	e5942010 	ldr	r2, [r4, #16]
    2a84:	e3a01000 	mov	r1, #0
    2a88:	e3c33024 	bic	r3, r3, #36	; 0x24
    2a8c:	e5841004 	str	r1, [r4, #4]
    2a90:	e5842000 	str	r2, [r4]
    2a94:	eaffffd2 	b	29e4 <__swsetup_r+0x80>
    2a98:	000047c8 	.word	0x000047c8

00002a9c <_fflush_r>:
    2a9c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2aa0:	e2507000 	subs	r7, r0, #0
    2aa4:	e1a04001 	mov	r4, r1
    2aa8:	0a000002 	beq	2ab8 <_fflush_r+0x1c>
    2aac:	e5973038 	ldr	r3, [r7, #56]	; 0x38
    2ab0:	e3530000 	cmp	r3, #0
    2ab4:	0a000059 	beq	2c20 <_fflush_r+0x184>
    2ab8:	e1d420bc 	ldrh	r2, [r4, #12]
    2abc:	e3520000 	cmp	r2, #0
    2ac0:	0a000023 	beq	2b54 <_fflush_r+0xb8>
    2ac4:	e3120008 	tst	r2, #8
    2ac8:	0a000024 	beq	2b60 <_fflush_r+0xc4>
    2acc:	e5946010 	ldr	r6, [r4, #16]
    2ad0:	e3560000 	cmp	r6, #0
    2ad4:	0a00001e 	beq	2b54 <_fflush_r+0xb8>
    2ad8:	e5945000 	ldr	r5, [r4]
    2adc:	e3120003 	tst	r2, #3
    2ae0:	05943014 	ldreq	r3, [r4, #20]
    2ae4:	e0665005 	rsb	r5, r6, r5
    2ae8:	13a03000 	movne	r3, #0
    2aec:	e3550000 	cmp	r5, #0
    2af0:	e5846000 	str	r6, [r4]
    2af4:	e5843008 	str	r3, [r4, #8]
    2af8:	ca000003 	bgt	2b0c <_fflush_r+0x70>
    2afc:	ea000014 	b	2b54 <_fflush_r+0xb8>
    2b00:	e3550000 	cmp	r5, #0
    2b04:	e0866000 	add	r6, r6, r0
    2b08:	da000011 	ble	2b54 <_fflush_r+0xb8>
    2b0c:	e1a03005 	mov	r3, r5
    2b10:	e1a02006 	mov	r2, r6
    2b14:	e1a00007 	mov	r0, r7
    2b18:	e594101c 	ldr	r1, [r4, #28]
    2b1c:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    2b20:	e1a0e00f 	mov	lr, pc
    2b24:	e12fff1c 	bx	r12
    2b28:	e3500000 	cmp	r0, #0
    2b2c:	e0605005 	rsb	r5, r0, r5
    2b30:	cafffff2 	bgt	2b00 <_fflush_r+0x64>
    2b34:	e1d430bc 	ldrh	r3, [r4, #12]
    2b38:	e3833040 	orr	r3, r3, #64	; 0x40
    2b3c:	e1c430bc 	strh	r3, [r4, #12]
    2b40:	e3e00000 	mvn	r0, #0
    2b44:	ea000003 	b	2b58 <_fflush_r+0xbc>
    2b48:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
    2b4c:	e3510000 	cmp	r1, #0
    2b50:	ca000007 	bgt	2b74 <_fflush_r+0xd8>
    2b54:	e3a00000 	mov	r0, #0
    2b58:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    2b5c:	e12fff1e 	bx	lr
    2b60:	e5941004 	ldr	r1, [r4, #4]
    2b64:	e3823b02 	orr	r3, r2, #2048	; 0x800
    2b68:	e3510000 	cmp	r1, #0
    2b6c:	e1c430bc 	strh	r3, [r4, #12]
    2b70:	dafffff4 	ble	2b48 <_fflush_r+0xac>
    2b74:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    2b78:	e35c0000 	cmp	r12, #0
    2b7c:	0afffff4 	beq	2b54 <_fflush_r+0xb8>
    2b80:	e3a01000 	mov	r1, #0
    2b84:	e2126a01 	ands	r6, r2, #4096	; 0x1000
    2b88:	e5975000 	ldr	r5, [r7]
    2b8c:	e5871000 	str	r1, [r7]
    2b90:	0a000024 	beq	2c28 <_fflush_r+0x18c>
    2b94:	e5942050 	ldr	r2, [r4, #80]	; 0x50
    2b98:	e3130004 	tst	r3, #4
    2b9c:	0a000005 	beq	2bb8 <_fflush_r+0x11c>
    2ba0:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    2ba4:	e5943004 	ldr	r3, [r4, #4]
    2ba8:	e3510000 	cmp	r1, #0
    2bac:	e0632002 	rsb	r2, r3, r2
    2bb0:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
    2bb4:	10632002 	rsbne	r2, r3, r2
    2bb8:	e1a00007 	mov	r0, r7
    2bbc:	e594101c 	ldr	r1, [r4, #28]
    2bc0:	e3a03000 	mov	r3, #0
    2bc4:	e1a0e00f 	mov	lr, pc
    2bc8:	e12fff1c 	bx	r12
    2bcc:	e3700001 	cmn	r0, #1
    2bd0:	0a000020 	beq	2c58 <_fflush_r+0x1bc>
    2bd4:	e1d430bc 	ldrh	r3, [r4, #12]
    2bd8:	e5942010 	ldr	r2, [r4, #16]
    2bdc:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    2be0:	e3130a01 	tst	r3, #4096	; 0x1000
    2be4:	e3a03000 	mov	r3, #0
    2be8:	e1c410bc 	strh	r1, [r4, #12]
    2bec:	e884000c 	stm	r4, {r2, r3}
    2bf0:	1a000028 	bne	2c98 <_fflush_r+0x1fc>
    2bf4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    2bf8:	e3510000 	cmp	r1, #0
    2bfc:	e5875000 	str	r5, [r7]
    2c00:	0affffd3 	beq	2b54 <_fflush_r+0xb8>
    2c04:	e2843040 	add	r3, r4, #64	; 0x40
    2c08:	e1510003 	cmp	r1, r3
    2c0c:	11a00007 	movne	r0, r7
    2c10:	1b00012c 	blne	30c8 <_free_r>
    2c14:	e3a00000 	mov	r0, #0
    2c18:	e5840030 	str	r0, [r4, #48]	; 0x30
    2c1c:	eaffffcd 	b	2b58 <_fflush_r+0xbc>
    2c20:	eb000077 	bl	2e04 <__sinit>
    2c24:	eaffffa3 	b	2ab8 <_fflush_r+0x1c>
    2c28:	e1a02006 	mov	r2, r6
    2c2c:	e1a00007 	mov	r0, r7
    2c30:	e594101c 	ldr	r1, [r4, #28]
    2c34:	e3a03001 	mov	r3, #1
    2c38:	e1a0e00f 	mov	lr, pc
    2c3c:	e12fff1c 	bx	r12
    2c40:	e3700001 	cmn	r0, #1
    2c44:	e1a02000 	mov	r2, r0
    2c48:	0a000014 	beq	2ca0 <_fflush_r+0x204>
    2c4c:	e1d430bc 	ldrh	r3, [r4, #12]
    2c50:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    2c54:	eaffffcf 	b	2b98 <_fflush_r+0xfc>
    2c58:	e597c000 	ldr	r12, [r7]
    2c5c:	e35c001d 	cmp	r12, #29
    2c60:	8affffb3 	bhi	2b34 <_fflush_r+0x98>
    2c64:	e59f3058 	ldr	r3, [pc, #88]	; 2cc4 <_fflush_r+0x228>
    2c68:	e1b03c13 	lsls	r3, r3, r12
    2c6c:	5affffb0 	bpl	2b34 <_fflush_r+0x98>
    2c70:	e1d430bc 	ldrh	r3, [r4, #12]
    2c74:	e5942010 	ldr	r2, [r4, #16]
    2c78:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    2c7c:	e3130a01 	tst	r3, #4096	; 0x1000
    2c80:	e3a03000 	mov	r3, #0
    2c84:	e1c410bc 	strh	r1, [r4, #12]
    2c88:	e884000c 	stm	r4, {r2, r3}
    2c8c:	0affffd8 	beq	2bf4 <_fflush_r+0x158>
    2c90:	e35c0000 	cmp	r12, #0
    2c94:	1affffd6 	bne	2bf4 <_fflush_r+0x158>
    2c98:	e5840050 	str	r0, [r4, #80]	; 0x50
    2c9c:	eaffffd4 	b	2bf4 <_fflush_r+0x158>
    2ca0:	e5973000 	ldr	r3, [r7]
    2ca4:	e3530000 	cmp	r3, #0
    2ca8:	0affffe7 	beq	2c4c <_fflush_r+0x1b0>
    2cac:	e353001d 	cmp	r3, #29
    2cb0:	13530016 	cmpne	r3, #22
    2cb4:	05875000 	streq	r5, [r7]
    2cb8:	01a00006 	moveq	r0, r6
    2cbc:	0affffa5 	beq	2b58 <_fflush_r+0xbc>
    2cc0:	eaffff9b 	b	2b34 <_fflush_r+0x98>
    2cc4:	80000204 	.word	0x80000204

00002cc8 <fflush>:
    2cc8:	e2501000 	subs	r1, r0, #0
    2ccc:	e92d4008 	push	{r3, lr}
    2cd0:	0a000003 	beq	2ce4 <fflush+0x1c>
    2cd4:	e59f3020 	ldr	r3, [pc, #32]	; 2cfc <fflush+0x34>
    2cd8:	e5930000 	ldr	r0, [r3]
    2cdc:	e8bd4008 	pop	{r3, lr}
    2ce0:	eaffff6d 	b	2a9c <_fflush_r>
    2ce4:	e59f3014 	ldr	r3, [pc, #20]	; 2d00 <fflush+0x38>
    2ce8:	e59f1014 	ldr	r1, [pc, #20]	; 2d04 <fflush+0x3c>
    2cec:	e5930000 	ldr	r0, [r3]
    2cf0:	eb0001b1 	bl	33bc <_fwalk_reent>
    2cf4:	e8bd4008 	pop	{r3, lr}
    2cf8:	e12fff1e 	bx	lr
    2cfc:	000047c8 	.word	0x000047c8
    2d00:	00004330 	.word	0x00004330
    2d04:	00002a9c 	.word	0x00002a9c

00002d08 <__fp_lock>:
    2d08:	e3a00000 	mov	r0, #0
    2d0c:	e12fff1e 	bx	lr

00002d10 <__fp_unlock>:
    2d10:	e3a00000 	mov	r0, #0
    2d14:	e12fff1e 	bx	lr

00002d18 <_cleanup_r>:
    2d18:	e92d4008 	push	{r3, lr}
    2d1c:	e59f1008 	ldr	r1, [pc, #8]	; 2d2c <_cleanup_r+0x14>
    2d20:	eb000183 	bl	3334 <_fwalk>
    2d24:	e8bd4008 	pop	{r3, lr}
    2d28:	e12fff1e 	bx	lr
    2d2c:	00003ac8 	.word	0x00003ac8

00002d30 <std.isra.0>:
    2d30:	e3a03000 	mov	r3, #0
    2d34:	e92d4010 	push	{r4, lr}
    2d38:	e1a04000 	mov	r4, r0
    2d3c:	e1c010bc 	strh	r1, [r0, #12]
    2d40:	e1c020be 	strh	r2, [r0, #14]
    2d44:	e5803000 	str	r3, [r0]
    2d48:	e5803004 	str	r3, [r0, #4]
    2d4c:	e5803008 	str	r3, [r0, #8]
    2d50:	e5803064 	str	r3, [r0, #100]	; 0x64
    2d54:	e5803010 	str	r3, [r0, #16]
    2d58:	e5803014 	str	r3, [r0, #20]
    2d5c:	e5803018 	str	r3, [r0, #24]
    2d60:	e1a01003 	mov	r1, r3
    2d64:	e280005c 	add	r0, r0, #92	; 0x5c
    2d68:	e3a02008 	mov	r2, #8
    2d6c:	eb00020c 	bl	35a4 <memset>
    2d70:	e59f3024 	ldr	r3, [pc, #36]	; 2d9c <std.isra.0+0x6c>
    2d74:	e5843020 	str	r3, [r4, #32]
    2d78:	e59f3020 	ldr	r3, [pc, #32]	; 2da0 <std.isra.0+0x70>
    2d7c:	e5843024 	str	r3, [r4, #36]	; 0x24
    2d80:	e59f301c 	ldr	r3, [pc, #28]	; 2da4 <std.isra.0+0x74>
    2d84:	e5843028 	str	r3, [r4, #40]	; 0x28
    2d88:	e59f3018 	ldr	r3, [pc, #24]	; 2da8 <std.isra.0+0x78>
    2d8c:	e584401c 	str	r4, [r4, #28]
    2d90:	e584302c 	str	r3, [r4, #44]	; 0x2c
    2d94:	e8bd4010 	pop	{r4, lr}
    2d98:	e12fff1e 	bx	lr
    2d9c:	00003874 	.word	0x00003874
    2da0:	000038b0 	.word	0x000038b0
    2da4:	00003908 	.word	0x00003908
    2da8:	0000393c 	.word	0x0000393c

00002dac <__sfmoreglue>:
    2dac:	e92d4070 	push	{r4, r5, r6, lr}
    2db0:	e0816081 	add	r6, r1, r1, lsl #1
    2db4:	e0816106 	add	r6, r1, r6, lsl #2
    2db8:	e1a06186 	lsl	r6, r6, #3
    2dbc:	e1a05001 	mov	r5, r1
    2dc0:	e286100c 	add	r1, r6, #12
    2dc4:	ebfffa99 	bl	1830 <_malloc_r>
    2dc8:	e2504000 	subs	r4, r0, #0
    2dcc:	0a000005 	beq	2de8 <__sfmoreglue+0x3c>
    2dd0:	e284000c 	add	r0, r4, #12
    2dd4:	e3a01000 	mov	r1, #0
    2dd8:	e8840022 	stm	r4, {r1, r5}
    2ddc:	e5840008 	str	r0, [r4, #8]
    2de0:	e1a02006 	mov	r2, r6
    2de4:	eb0001ee 	bl	35a4 <memset>
    2de8:	e1a00004 	mov	r0, r4
    2dec:	e8bd4070 	pop	{r4, r5, r6, lr}
    2df0:	e12fff1e 	bx	lr

00002df4 <_cleanup>:
    2df4:	e59f3004 	ldr	r3, [pc, #4]	; 2e00 <_cleanup+0xc>
    2df8:	e5930000 	ldr	r0, [r3]
    2dfc:	eaffffc5 	b	2d18 <_cleanup_r>
    2e00:	00004330 	.word	0x00004330

00002e04 <__sinit>:
    2e04:	e92d4038 	push	{r3, r4, r5, lr}
    2e08:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    2e0c:	e3530000 	cmp	r3, #0
    2e10:	e1a04000 	mov	r4, r0
    2e14:	0a000001 	beq	2e20 <__sinit+0x1c>
    2e18:	e8bd4038 	pop	{r3, r4, r5, lr}
    2e1c:	e12fff1e 	bx	lr
    2e20:	e59fe050 	ldr	lr, [pc, #80]	; 2e78 <__sinit+0x74>
    2e24:	e280cfbb 	add	r12, r0, #748	; 0x2ec
    2e28:	e3a05001 	mov	r5, #1
    2e2c:	e1a02003 	mov	r2, r3
    2e30:	e58432e0 	str	r3, [r4, #736]	; 0x2e0
    2e34:	e3a03003 	mov	r3, #3
    2e38:	e584e03c 	str	lr, [r4, #60]	; 0x3c
    2e3c:	e58432e4 	str	r3, [r4, #740]	; 0x2e4
    2e40:	e584c2e8 	str	r12, [r4, #744]	; 0x2e8
    2e44:	e5900004 	ldr	r0, [r0, #4]
    2e48:	e3a01004 	mov	r1, #4
    2e4c:	e5845038 	str	r5, [r4, #56]	; 0x38
    2e50:	ebffffb6 	bl	2d30 <std.isra.0>
    2e54:	e5940008 	ldr	r0, [r4, #8]
    2e58:	e1a02005 	mov	r2, r5
    2e5c:	e3a01009 	mov	r1, #9
    2e60:	ebffffb2 	bl	2d30 <std.isra.0>
    2e64:	e594000c 	ldr	r0, [r4, #12]
    2e68:	e3a01012 	mov	r1, #18
    2e6c:	e3a02002 	mov	r2, #2
    2e70:	e8bd4038 	pop	{r3, r4, r5, lr}
    2e74:	eaffffad 	b	2d30 <std.isra.0>
    2e78:	00002d18 	.word	0x00002d18

00002e7c <__sfp>:
    2e7c:	e59f30ec 	ldr	r3, [pc, #236]	; 2f70 <__sfp+0xf4>
    2e80:	e92d4070 	push	{r4, r5, r6, lr}
    2e84:	e5935000 	ldr	r5, [r3]
    2e88:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    2e8c:	e3530000 	cmp	r3, #0
    2e90:	e1a06000 	mov	r6, r0
    2e94:	0a000028 	beq	2f3c <__sfp+0xc0>
    2e98:	e2855e2e 	add	r5, r5, #736	; 0x2e0
    2e9c:	e5953004 	ldr	r3, [r5, #4]
    2ea0:	e2533001 	subs	r3, r3, #1
    2ea4:	e5954008 	ldr	r4, [r5, #8]
    2ea8:	5a000004 	bpl	2ec0 <__sfp+0x44>
    2eac:	ea00001d 	b	2f28 <__sfp+0xac>
    2eb0:	e2433001 	sub	r3, r3, #1
    2eb4:	e3730001 	cmn	r3, #1
    2eb8:	e2844068 	add	r4, r4, #104	; 0x68
    2ebc:	0a000019 	beq	2f28 <__sfp+0xac>
    2ec0:	e1d420fc 	ldrsh	r2, [r4, #12]
    2ec4:	e3520000 	cmp	r2, #0
    2ec8:	1afffff8 	bne	2eb0 <__sfp+0x34>
    2ecc:	e3e03000 	mvn	r3, #0
    2ed0:	e3a05000 	mov	r5, #0
    2ed4:	e1c430be 	strh	r3, [r4, #14]
    2ed8:	e3a03001 	mov	r3, #1
    2edc:	e1c430bc 	strh	r3, [r4, #12]
    2ee0:	e5845064 	str	r5, [r4, #100]	; 0x64
    2ee4:	e5845000 	str	r5, [r4]
    2ee8:	e5845008 	str	r5, [r4, #8]
    2eec:	e5845004 	str	r5, [r4, #4]
    2ef0:	e5845010 	str	r5, [r4, #16]
    2ef4:	e5845014 	str	r5, [r4, #20]
    2ef8:	e5845018 	str	r5, [r4, #24]
    2efc:	e284005c 	add	r0, r4, #92	; 0x5c
    2f00:	e1a01005 	mov	r1, r5
    2f04:	e3a02008 	mov	r2, #8
    2f08:	eb0001a5 	bl	35a4 <memset>
    2f0c:	e5845030 	str	r5, [r4, #48]	; 0x30
    2f10:	e5845034 	str	r5, [r4, #52]	; 0x34
    2f14:	e5845044 	str	r5, [r4, #68]	; 0x44
    2f18:	e5845048 	str	r5, [r4, #72]	; 0x48
    2f1c:	e1a00004 	mov	r0, r4
    2f20:	e8bd4070 	pop	{r4, r5, r6, lr}
    2f24:	e12fff1e 	bx	lr
    2f28:	e5950000 	ldr	r0, [r5]
    2f2c:	e3500000 	cmp	r0, #0
    2f30:	0a000004 	beq	2f48 <__sfp+0xcc>
    2f34:	e1a05000 	mov	r5, r0
    2f38:	eaffffd7 	b	2e9c <__sfp+0x20>
    2f3c:	e1a00005 	mov	r0, r5
    2f40:	ebffffaf 	bl	2e04 <__sinit>
    2f44:	eaffffd3 	b	2e98 <__sfp+0x1c>
    2f48:	e1a00006 	mov	r0, r6
    2f4c:	e3a01004 	mov	r1, #4
    2f50:	ebffff95 	bl	2dac <__sfmoreglue>
    2f54:	e3500000 	cmp	r0, #0
    2f58:	e5850000 	str	r0, [r5]
    2f5c:	1afffff4 	bne	2f34 <__sfp+0xb8>
    2f60:	e3a0300c 	mov	r3, #12
    2f64:	e5863000 	str	r3, [r6]
    2f68:	e1a04000 	mov	r4, r0
    2f6c:	eaffffea 	b	2f1c <__sfp+0xa0>
    2f70:	00004330 	.word	0x00004330

00002f74 <__sfp_lock_acquire>:
    2f74:	e12fff1e 	bx	lr

00002f78 <__sfp_lock_release>:
    2f78:	e12fff1e 	bx	lr

00002f7c <__sinit_lock_acquire>:
    2f7c:	e12fff1e 	bx	lr

00002f80 <__sinit_lock_release>:
    2f80:	e12fff1e 	bx	lr

00002f84 <__fp_lock_all>:
    2f84:	e92d4008 	push	{r3, lr}
    2f88:	e59f3010 	ldr	r3, [pc, #16]	; 2fa0 <__fp_lock_all+0x1c>
    2f8c:	e59f1010 	ldr	r1, [pc, #16]	; 2fa4 <__fp_lock_all+0x20>
    2f90:	e5930000 	ldr	r0, [r3]
    2f94:	eb0000e6 	bl	3334 <_fwalk>
    2f98:	e8bd4008 	pop	{r3, lr}
    2f9c:	e12fff1e 	bx	lr
    2fa0:	000047c8 	.word	0x000047c8
    2fa4:	00002d08 	.word	0x00002d08

00002fa8 <__fp_unlock_all>:
    2fa8:	e92d4008 	push	{r3, lr}
    2fac:	e59f3010 	ldr	r3, [pc, #16]	; 2fc4 <__fp_unlock_all+0x1c>
    2fb0:	e59f1010 	ldr	r1, [pc, #16]	; 2fc8 <__fp_unlock_all+0x20>
    2fb4:	e5930000 	ldr	r0, [r3]
    2fb8:	eb0000dd 	bl	3334 <_fwalk>
    2fbc:	e8bd4008 	pop	{r3, lr}
    2fc0:	e12fff1e 	bx	lr
    2fc4:	000047c8 	.word	0x000047c8
    2fc8:	00002d10 	.word	0x00002d10

00002fcc <_malloc_trim_r>:
    2fcc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2fd0:	e59f50e4 	ldr	r5, [pc, #228]	; 30bc <_malloc_trim_r+0xf0>
    2fd4:	e1a07001 	mov	r7, r1
    2fd8:	e1a04000 	mov	r4, r0
    2fdc:	ebfffcf1 	bl	23a8 <__malloc_lock>
    2fe0:	e5953008 	ldr	r3, [r5, #8]
    2fe4:	e5936004 	ldr	r6, [r3, #4]
    2fe8:	e3c66003 	bic	r6, r6, #3
    2fec:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    2ff0:	e283300f 	add	r3, r3, #15
    2ff4:	e0677003 	rsb	r7, r7, r3
    2ff8:	e1a07627 	lsr	r7, r7, #12
    2ffc:	e2477001 	sub	r7, r7, #1
    3000:	e1a07607 	lsl	r7, r7, #12
    3004:	e3570a01 	cmp	r7, #4096	; 0x1000
    3008:	ba000006 	blt	3028 <_malloc_trim_r+0x5c>
    300c:	e1a00004 	mov	r0, r4
    3010:	e3a01000 	mov	r1, #0
    3014:	ebfffe42 	bl	2924 <_sbrk_r>
    3018:	e5953008 	ldr	r3, [r5, #8]
    301c:	e0833006 	add	r3, r3, r6
    3020:	e1500003 	cmp	r0, r3
    3024:	0a000004 	beq	303c <_malloc_trim_r+0x70>
    3028:	e1a00004 	mov	r0, r4
    302c:	ebfffcde 	bl	23ac <__malloc_unlock>
    3030:	e3a00000 	mov	r0, #0
    3034:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3038:	e12fff1e 	bx	lr
    303c:	e1a00004 	mov	r0, r4
    3040:	e2671000 	rsb	r1, r7, #0
    3044:	ebfffe36 	bl	2924 <_sbrk_r>
    3048:	e3700001 	cmn	r0, #1
    304c:	0a00000b 	beq	3080 <_malloc_trim_r+0xb4>
    3050:	e59f3068 	ldr	r3, [pc, #104]	; 30c0 <_malloc_trim_r+0xf4>
    3054:	e5952008 	ldr	r2, [r5, #8]
    3058:	e5931000 	ldr	r1, [r3]
    305c:	e0676006 	rsb	r6, r7, r6
    3060:	e3866001 	orr	r6, r6, #1
    3064:	e0677001 	rsb	r7, r7, r1
    3068:	e1a00004 	mov	r0, r4
    306c:	e5826004 	str	r6, [r2, #4]
    3070:	e5837000 	str	r7, [r3]
    3074:	ebfffccc 	bl	23ac <__malloc_unlock>
    3078:	e3a00001 	mov	r0, #1
    307c:	eaffffec 	b	3034 <_malloc_trim_r+0x68>
    3080:	e1a00004 	mov	r0, r4
    3084:	e3a01000 	mov	r1, #0
    3088:	ebfffe25 	bl	2924 <_sbrk_r>
    308c:	e5953008 	ldr	r3, [r5, #8]
    3090:	e0632000 	rsb	r2, r3, r0
    3094:	e352000f 	cmp	r2, #15
    3098:	daffffe2 	ble	3028 <_malloc_trim_r+0x5c>
    309c:	e59f1020 	ldr	r1, [pc, #32]	; 30c4 <_malloc_trim_r+0xf8>
    30a0:	e5911000 	ldr	r1, [r1]
    30a4:	e0610000 	rsb	r0, r1, r0
    30a8:	e59f1010 	ldr	r1, [pc, #16]	; 30c0 <_malloc_trim_r+0xf4>
    30ac:	e3822001 	orr	r2, r2, #1
    30b0:	e5810000 	str	r0, [r1]
    30b4:	e5832004 	str	r2, [r3, #4]
    30b8:	eaffffda 	b	3028 <_malloc_trim_r+0x5c>
    30bc:	00004bf8 	.word	0x00004bf8
    30c0:	0000547c 	.word	0x0000547c
    30c4:	00005000 	.word	0x00005000

000030c8 <_free_r>:
    30c8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    30cc:	e2514000 	subs	r4, r1, #0
    30d0:	e1a06000 	mov	r6, r0
    30d4:	0a000046 	beq	31f4 <_free_r+0x12c>
    30d8:	ebfffcb2 	bl	23a8 <__malloc_lock>
    30dc:	e514e004 	ldr	lr, [r4, #-4]
    30e0:	e59f1238 	ldr	r1, [pc, #568]	; 3320 <_free_r+0x258>
    30e4:	e244c008 	sub	r12, r4, #8
    30e8:	e3ce3001 	bic	r3, lr, #1
    30ec:	e08c2003 	add	r2, r12, r3
    30f0:	e5910008 	ldr	r0, [r1, #8]
    30f4:	e5925004 	ldr	r5, [r2, #4]
    30f8:	e1500002 	cmp	r0, r2
    30fc:	e3c55003 	bic	r5, r5, #3
    3100:	0a00004a 	beq	3230 <_free_r+0x168>
    3104:	e21ee001 	ands	lr, lr, #1
    3108:	e5825004 	str	r5, [r2, #4]
    310c:	13a0e000 	movne	lr, #0
    3110:	1a000009 	bne	313c <_free_r+0x74>
    3114:	e5144008 	ldr	r4, [r4, #-8]
    3118:	e064c00c 	rsb	r12, r4, r12
    311c:	e59c0008 	ldr	r0, [r12, #8]
    3120:	e2817008 	add	r7, r1, #8
    3124:	e1500007 	cmp	r0, r7
    3128:	e0833004 	add	r3, r3, r4
    312c:	159c400c 	ldrne	r4, [r12, #12]
    3130:	1580400c 	strne	r4, [r0, #12]
    3134:	15840008 	strne	r0, [r4, #8]
    3138:	03a0e001 	moveq	lr, #1
    313c:	e0820005 	add	r0, r2, r5
    3140:	e5900004 	ldr	r0, [r0, #4]
    3144:	e3100001 	tst	r0, #1
    3148:	1a000009 	bne	3174 <_free_r+0xac>
    314c:	e35e0000 	cmp	lr, #0
    3150:	e5920008 	ldr	r0, [r2, #8]
    3154:	e0833005 	add	r3, r3, r5
    3158:	1a000002 	bne	3168 <_free_r+0xa0>
    315c:	e59f41c0 	ldr	r4, [pc, #448]	; 3324 <_free_r+0x25c>
    3160:	e1500004 	cmp	r0, r4
    3164:	0a000047 	beq	3288 <_free_r+0x1c0>
    3168:	e592200c 	ldr	r2, [r2, #12]
    316c:	e580200c 	str	r2, [r0, #12]
    3170:	e5820008 	str	r0, [r2, #8]
    3174:	e3832001 	orr	r2, r3, #1
    3178:	e35e0000 	cmp	lr, #0
    317c:	e58c2004 	str	r2, [r12, #4]
    3180:	e78c3003 	str	r3, [r12, r3]
    3184:	1a000018 	bne	31ec <_free_r+0x124>
    3188:	e3530c02 	cmp	r3, #512	; 0x200
    318c:	3a00001a 	bcc	31fc <_free_r+0x134>
    3190:	e1a024a3 	lsr	r2, r3, #9
    3194:	e3520004 	cmp	r2, #4
    3198:	8a000042 	bhi	32a8 <_free_r+0x1e0>
    319c:	e1a0e323 	lsr	lr, r3, #6
    31a0:	e28ee038 	add	lr, lr, #56	; 0x38
    31a4:	e1a0008e 	lsl	r0, lr, #1
    31a8:	e0810100 	add	r0, r1, r0, lsl #2
    31ac:	e5902008 	ldr	r2, [r0, #8]
    31b0:	e1520000 	cmp	r2, r0
    31b4:	e59f1164 	ldr	r1, [pc, #356]	; 3320 <_free_r+0x258>
    31b8:	0a000044 	beq	32d0 <_free_r+0x208>
    31bc:	e5921004 	ldr	r1, [r2, #4]
    31c0:	e3c11003 	bic	r1, r1, #3
    31c4:	e1530001 	cmp	r3, r1
    31c8:	2a000002 	bcs	31d8 <_free_r+0x110>
    31cc:	e5922008 	ldr	r2, [r2, #8]
    31d0:	e1500002 	cmp	r0, r2
    31d4:	1afffff8 	bne	31bc <_free_r+0xf4>
    31d8:	e592300c 	ldr	r3, [r2, #12]
    31dc:	e58c300c 	str	r3, [r12, #12]
    31e0:	e58c2008 	str	r2, [r12, #8]
    31e4:	e582c00c 	str	r12, [r2, #12]
    31e8:	e583c008 	str	r12, [r3, #8]
    31ec:	e1a00006 	mov	r0, r6
    31f0:	ebfffc6d 	bl	23ac <__malloc_unlock>
    31f4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    31f8:	e12fff1e 	bx	lr
    31fc:	e5912004 	ldr	r2, [r1, #4]
    3200:	e1a031a3 	lsr	r3, r3, #3
    3204:	e1a00143 	asr	r0, r3, #2
    3208:	e3a0e001 	mov	lr, #1
    320c:	e182001e 	orr	r0, r2, lr, lsl r0
    3210:	e0813183 	add	r3, r1, r3, lsl #3
    3214:	e5932008 	ldr	r2, [r3, #8]
    3218:	e58c300c 	str	r3, [r12, #12]
    321c:	e58c2008 	str	r2, [r12, #8]
    3220:	e5810004 	str	r0, [r1, #4]
    3224:	e583c008 	str	r12, [r3, #8]
    3228:	e582c00c 	str	r12, [r2, #12]
    322c:	eaffffee 	b	31ec <_free_r+0x124>
    3230:	e31e0001 	tst	lr, #1
    3234:	e0853003 	add	r3, r5, r3
    3238:	1a000006 	bne	3258 <_free_r+0x190>
    323c:	e5142008 	ldr	r2, [r4, #-8]
    3240:	e062c00c 	rsb	r12, r2, r12
    3244:	e59c000c 	ldr	r0, [r12, #12]
    3248:	e59ce008 	ldr	lr, [r12, #8]
    324c:	e58e000c 	str	r0, [lr, #12]
    3250:	e580e008 	str	lr, [r0, #8]
    3254:	e0833002 	add	r3, r3, r2
    3258:	e59f20c8 	ldr	r2, [pc, #200]	; 3328 <_free_r+0x260>
    325c:	e5920000 	ldr	r0, [r2]
    3260:	e3832001 	orr	r2, r3, #1
    3264:	e1530000 	cmp	r3, r0
    3268:	e58c2004 	str	r2, [r12, #4]
    326c:	e581c008 	str	r12, [r1, #8]
    3270:	3affffdd 	bcc	31ec <_free_r+0x124>
    3274:	e59f30b0 	ldr	r3, [pc, #176]	; 332c <_free_r+0x264>
    3278:	e1a00006 	mov	r0, r6
    327c:	e5931000 	ldr	r1, [r3]
    3280:	ebffff51 	bl	2fcc <_malloc_trim_r>
    3284:	eaffffd8 	b	31ec <_free_r+0x124>
    3288:	e3832001 	orr	r2, r3, #1
    328c:	e581c014 	str	r12, [r1, #20]
    3290:	e581c010 	str	r12, [r1, #16]
    3294:	e58c000c 	str	r0, [r12, #12]
    3298:	e58c0008 	str	r0, [r12, #8]
    329c:	e58c2004 	str	r2, [r12, #4]
    32a0:	e78c3003 	str	r3, [r12, r3]
    32a4:	eaffffd0 	b	31ec <_free_r+0x124>
    32a8:	e3520014 	cmp	r2, #20
    32ac:	9282e05b 	addls	lr, r2, #91	; 0x5b
    32b0:	91a0008e 	lslls	r0, lr, #1
    32b4:	9affffbb 	bls	31a8 <_free_r+0xe0>
    32b8:	e3520054 	cmp	r2, #84	; 0x54
    32bc:	8a00000a 	bhi	32ec <_free_r+0x224>
    32c0:	e1a0e623 	lsr	lr, r3, #12
    32c4:	e28ee06e 	add	lr, lr, #110	; 0x6e
    32c8:	e1a0008e 	lsl	r0, lr, #1
    32cc:	eaffffb5 	b	31a8 <_free_r+0xe0>
    32d0:	e5913004 	ldr	r3, [r1, #4]
    32d4:	e1a0e14e 	asr	lr, lr, #2
    32d8:	e3a00001 	mov	r0, #1
    32dc:	e1830e10 	orr	r0, r3, r0, lsl lr
    32e0:	e1a03002 	mov	r3, r2
    32e4:	e5810004 	str	r0, [r1, #4]
    32e8:	eaffffbb 	b	31dc <_free_r+0x114>
    32ec:	e3520f55 	cmp	r2, #340	; 0x154
    32f0:	91a0e7a3 	lsrls	lr, r3, #15
    32f4:	928ee077 	addls	lr, lr, #119	; 0x77
    32f8:	91a0008e 	lslls	r0, lr, #1
    32fc:	9affffa9 	bls	31a8 <_free_r+0xe0>
    3300:	e59f0028 	ldr	r0, [pc, #40]	; 3330 <_free_r+0x268>
    3304:	e1520000 	cmp	r2, r0
    3308:	91a0e923 	lsrls	lr, r3, #18
    330c:	928ee07c 	addls	lr, lr, #124	; 0x7c
    3310:	91a0008e 	lslls	r0, lr, #1
    3314:	83a000fc 	movhi	r0, #252	; 0xfc
    3318:	83a0e07e 	movhi	lr, #126	; 0x7e
    331c:	eaffffa1 	b	31a8 <_free_r+0xe0>
    3320:	00004bf8 	.word	0x00004bf8
    3324:	00004c00 	.word	0x00004c00
    3328:	00005004 	.word	0x00005004
    332c:	00005478 	.word	0x00005478
    3330:	00000554 	.word	0x00000554

00003334 <_fwalk>:
    3334:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    3338:	e1a06000 	mov	r6, r0
    333c:	e1a08001 	mov	r8, r1
    3340:	ebffff0b 	bl	2f74 <__sfp_lock_acquire>
    3344:	e2966e2e 	adds	r6, r6, #736	; 0x2e0
    3348:	0a000019 	beq	33b4 <_fwalk+0x80>
    334c:	e3a07000 	mov	r7, #0
    3350:	e5965004 	ldr	r5, [r6, #4]
    3354:	e2555001 	subs	r5, r5, #1
    3358:	e5964008 	ldr	r4, [r6, #8]
    335c:	4a00000d 	bmi	3398 <_fwalk+0x64>
    3360:	e1d430fc 	ldrsh	r3, [r4, #12]
    3364:	e3530000 	cmp	r3, #0
    3368:	e2455001 	sub	r5, r5, #1
    336c:	0a000006 	beq	338c <_fwalk+0x58>
    3370:	e1d430fe 	ldrsh	r3, [r4, #14]
    3374:	e3730001 	cmn	r3, #1
    3378:	e1a00004 	mov	r0, r4
    337c:	0a000002 	beq	338c <_fwalk+0x58>
    3380:	e1a0e00f 	mov	lr, pc
    3384:	e12fff18 	bx	r8
    3388:	e1877000 	orr	r7, r7, r0
    338c:	e3750001 	cmn	r5, #1
    3390:	e2844068 	add	r4, r4, #104	; 0x68
    3394:	1afffff1 	bne	3360 <_fwalk+0x2c>
    3398:	e5966000 	ldr	r6, [r6]
    339c:	e3560000 	cmp	r6, #0
    33a0:	1affffea 	bne	3350 <_fwalk+0x1c>
    33a4:	ebfffef3 	bl	2f78 <__sfp_lock_release>
    33a8:	e1a00007 	mov	r0, r7
    33ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    33b0:	e12fff1e 	bx	lr
    33b4:	e1a07006 	mov	r7, r6
    33b8:	eafffff9 	b	33a4 <_fwalk+0x70>

000033bc <_fwalk_reent>:
    33bc:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    33c0:	e1a07000 	mov	r7, r0
    33c4:	e1a08001 	mov	r8, r1
    33c8:	ebfffee9 	bl	2f74 <__sfp_lock_acquire>
    33cc:	e2976e2e 	adds	r6, r7, #736	; 0x2e0
    33d0:	0a00001a 	beq	3440 <_fwalk_reent+0x84>
    33d4:	e3a0a000 	mov	r10, #0
    33d8:	e5965004 	ldr	r5, [r6, #4]
    33dc:	e2555001 	subs	r5, r5, #1
    33e0:	e5964008 	ldr	r4, [r6, #8]
    33e4:	4a00000e 	bmi	3424 <_fwalk_reent+0x68>
    33e8:	e1d430fc 	ldrsh	r3, [r4, #12]
    33ec:	e3530000 	cmp	r3, #0
    33f0:	e2455001 	sub	r5, r5, #1
    33f4:	0a000007 	beq	3418 <_fwalk_reent+0x5c>
    33f8:	e1d430fe 	ldrsh	r3, [r4, #14]
    33fc:	e3730001 	cmn	r3, #1
    3400:	e1a01004 	mov	r1, r4
    3404:	e1a00007 	mov	r0, r7
    3408:	0a000002 	beq	3418 <_fwalk_reent+0x5c>
    340c:	e1a0e00f 	mov	lr, pc
    3410:	e12fff18 	bx	r8
    3414:	e18aa000 	orr	r10, r10, r0
    3418:	e3750001 	cmn	r5, #1
    341c:	e2844068 	add	r4, r4, #104	; 0x68
    3420:	1afffff0 	bne	33e8 <_fwalk_reent+0x2c>
    3424:	e5966000 	ldr	r6, [r6]
    3428:	e3560000 	cmp	r6, #0
    342c:	1affffe9 	bne	33d8 <_fwalk_reent+0x1c>
    3430:	ebfffed0 	bl	2f78 <__sfp_lock_release>
    3434:	e1a0000a 	mov	r0, r10
    3438:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    343c:	e12fff1e 	bx	lr
    3440:	e1a0a006 	mov	r10, r6
    3444:	eafffff9 	b	3430 <_fwalk_reent+0x74>

00003448 <__smakebuf_r>:
    3448:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    344c:	e1d130bc 	ldrh	r3, [r1, #12]
    3450:	e3130002 	tst	r3, #2
    3454:	e24dd044 	sub	sp, sp, #68	; 0x44
    3458:	e1a04001 	mov	r4, r1
    345c:	e1a05000 	mov	r5, r0
    3460:	1a00002b 	bne	3514 <__smakebuf_r+0xcc>
    3464:	e1d110fe 	ldrsh	r1, [r1, #14]
    3468:	e3510000 	cmp	r1, #0
    346c:	ba000010 	blt	34b4 <__smakebuf_r+0x6c>
    3470:	e28d2004 	add	r2, sp, #4
    3474:	eb000198 	bl	3adc <_fstat_r>
    3478:	e3500000 	cmp	r0, #0
    347c:	ba00000b 	blt	34b0 <__smakebuf_r+0x68>
    3480:	e59d3008 	ldr	r3, [sp, #8]
    3484:	e2033a0f 	and	r3, r3, #61440	; 0xf000
    3488:	e2532a02 	subs	r2, r3, #8192	; 0x2000
    348c:	e2727000 	rsbs	r7, r2, #0
    3490:	e0b77002 	adcs	r7, r7, r2
    3494:	e3530902 	cmp	r3, #32768	; 0x8000
    3498:	0a000023 	beq	352c <__smakebuf_r+0xe4>
    349c:	e1d430bc 	ldrh	r3, [r4, #12]
    34a0:	e3833b02 	orr	r3, r3, #2048	; 0x800
    34a4:	e1c430bc 	strh	r3, [r4, #12]
    34a8:	e3a06b01 	mov	r6, #1024	; 0x400
    34ac:	ea000006 	b	34cc <__smakebuf_r+0x84>
    34b0:	e1d430bc 	ldrh	r3, [r4, #12]
    34b4:	e3130080 	tst	r3, #128	; 0x80
    34b8:	e3833b02 	orr	r3, r3, #2048	; 0x800
    34bc:	e1c430bc 	strh	r3, [r4, #12]
    34c0:	03a06b01 	moveq	r6, #1024	; 0x400
    34c4:	13a06040 	movne	r6, #64	; 0x40
    34c8:	e3a07000 	mov	r7, #0
    34cc:	e1a00005 	mov	r0, r5
    34d0:	e1a01006 	mov	r1, r6
    34d4:	ebfff8d5 	bl	1830 <_malloc_r>
    34d8:	e3500000 	cmp	r0, #0
    34dc:	e1d430bc 	ldrh	r3, [r4, #12]
    34e0:	0a000023 	beq	3574 <__smakebuf_r+0x12c>
    34e4:	e59f20b0 	ldr	r2, [pc, #176]	; 359c <__smakebuf_r+0x154>
    34e8:	e3833080 	orr	r3, r3, #128	; 0x80
    34ec:	e3570000 	cmp	r7, #0
    34f0:	e585203c 	str	r2, [r5, #60]	; 0x3c
    34f4:	e1c430bc 	strh	r3, [r4, #12]
    34f8:	e5840000 	str	r0, [r4]
    34fc:	e5840010 	str	r0, [r4, #16]
    3500:	e5846014 	str	r6, [r4, #20]
    3504:	1a000012 	bne	3554 <__smakebuf_r+0x10c>
    3508:	e28dd044 	add	sp, sp, #68	; 0x44
    350c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    3510:	e12fff1e 	bx	lr
    3514:	e2813043 	add	r3, r1, #67	; 0x43
    3518:	e5813000 	str	r3, [r1]
    351c:	e5813010 	str	r3, [r1, #16]
    3520:	e3a03001 	mov	r3, #1
    3524:	e5813014 	str	r3, [r1, #20]
    3528:	eafffff6 	b	3508 <__smakebuf_r+0xc0>
    352c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    3530:	e59f3068 	ldr	r3, [pc, #104]	; 35a0 <__smakebuf_r+0x158>
    3534:	e1520003 	cmp	r2, r3
    3538:	1affffd7 	bne	349c <__smakebuf_r+0x54>
    353c:	e1d430bc 	ldrh	r3, [r4, #12]
    3540:	e3a06b01 	mov	r6, #1024	; 0x400
    3544:	e1833006 	orr	r3, r3, r6
    3548:	e1c430bc 	strh	r3, [r4, #12]
    354c:	e584604c 	str	r6, [r4, #76]	; 0x4c
    3550:	eaffffdd 	b	34cc <__smakebuf_r+0x84>
    3554:	e1a00005 	mov	r0, r5
    3558:	e1d410fe 	ldrsh	r1, [r4, #14]
    355c:	eb00016e 	bl	3b1c <_isatty_r>
    3560:	e3500000 	cmp	r0, #0
    3564:	11d430bc 	ldrhne	r3, [r4, #12]
    3568:	13833001 	orrne	r3, r3, #1
    356c:	11c430bc 	strhne	r3, [r4, #12]
    3570:	eaffffe4 	b	3508 <__smakebuf_r+0xc0>
    3574:	e3130c02 	tst	r3, #512	; 0x200
    3578:	1affffe2 	bne	3508 <__smakebuf_r+0xc0>
    357c:	e3833002 	orr	r3, r3, #2
    3580:	e2842043 	add	r2, r4, #67	; 0x43
    3584:	e1c430bc 	strh	r3, [r4, #12]
    3588:	e3a03001 	mov	r3, #1
    358c:	e5842000 	str	r2, [r4]
    3590:	e5842010 	str	r2, [r4, #16]
    3594:	e5843014 	str	r3, [r4, #20]
    3598:	eaffffda 	b	3508 <__smakebuf_r+0xc0>
    359c:	00002d18 	.word	0x00002d18
    35a0:	00003908 	.word	0x00003908

000035a4 <memset>:
    35a4:	e3520003 	cmp	r2, #3
    35a8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    35ac:	e20110ff 	and	r1, r1, #255	; 0xff
    35b0:	8a000008 	bhi	35d8 <memset+0x34>
    35b4:	e3520000 	cmp	r2, #0
    35b8:	0a000004 	beq	35d0 <memset+0x2c>
    35bc:	e1a03000 	mov	r3, r0
    35c0:	e0822000 	add	r2, r2, r0
    35c4:	e4c31001 	strb	r1, [r3], #1
    35c8:	e1530002 	cmp	r3, r2
    35cc:	1afffffc 	bne	35c4 <memset+0x20>
    35d0:	e8bd0010 	ldmfd	sp!, {r4}
    35d4:	e12fff1e 	bx	lr
    35d8:	e3100003 	tst	r0, #3
    35dc:	e0802002 	add	r2, r0, r2
    35e0:	0a000007 	beq	3604 <memset+0x60>
    35e4:	e280c001 	add	r12, r0, #1
    35e8:	e20c3003 	and	r3, r12, #3
    35ec:	e3530000 	cmp	r3, #0
    35f0:	e54c1001 	strb	r1, [r12, #-1]
    35f4:	e1a0300c 	mov	r3, r12
    35f8:	e28cc001 	add	r12, r12, #1
    35fc:	1afffff9 	bne	35e8 <memset+0x44>
    3600:	ea000000 	b	3608 <memset+0x64>
    3604:	e1a03000 	mov	r3, r0
    3608:	e0634002 	rsb	r4, r3, r2
    360c:	e081c401 	add	r12, r1, r1, lsl #8
    3610:	e354003f 	cmp	r4, #63	; 0x3f
    3614:	e08cc80c 	add	r12, r12, r12, lsl #16
    3618:	da00001a 	ble	3688 <memset+0xe4>
    361c:	e583c000 	str	r12, [r3]
    3620:	e583c004 	str	r12, [r3, #4]
    3624:	e583c008 	str	r12, [r3, #8]
    3628:	e583c00c 	str	r12, [r3, #12]
    362c:	e583c010 	str	r12, [r3, #16]
    3630:	e583c014 	str	r12, [r3, #20]
    3634:	e583c018 	str	r12, [r3, #24]
    3638:	e583c01c 	str	r12, [r3, #28]
    363c:	e583c020 	str	r12, [r3, #32]
    3640:	e583c024 	str	r12, [r3, #36]	; 0x24
    3644:	e583c028 	str	r12, [r3, #40]	; 0x28
    3648:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    364c:	e583c030 	str	r12, [r3, #48]	; 0x30
    3650:	e583c034 	str	r12, [r3, #52]	; 0x34
    3654:	e583c038 	str	r12, [r3, #56]	; 0x38
    3658:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    365c:	e2833040 	add	r3, r3, #64	; 0x40
    3660:	e0634002 	rsb	r4, r3, r2
    3664:	e354003f 	cmp	r4, #63	; 0x3f
    3668:	caffffeb 	bgt	361c <memset+0x78>
    366c:	ea000005 	b	3688 <memset+0xe4>
    3670:	e583c000 	str	r12, [r3]
    3674:	e583c004 	str	r12, [r3, #4]
    3678:	e583c008 	str	r12, [r3, #8]
    367c:	e583c00c 	str	r12, [r3, #12]
    3680:	e2833010 	add	r3, r3, #16
    3684:	e0634002 	rsb	r4, r3, r2
    3688:	e354000f 	cmp	r4, #15
    368c:	cafffff7 	bgt	3670 <memset+0xcc>
    3690:	e3540003 	cmp	r4, #3
    3694:	da000006 	ble	36b4 <memset+0x110>
    3698:	e2834004 	add	r4, r3, #4
    369c:	e0643002 	rsb	r3, r4, r2
    36a0:	e3530003 	cmp	r3, #3
    36a4:	e504c004 	str	r12, [r4, #-4]
    36a8:	e1a03004 	mov	r3, r4
    36ac:	e2844004 	add	r4, r4, #4
    36b0:	cafffff9 	bgt	369c <memset+0xf8>
    36b4:	e1520003 	cmp	r2, r3
    36b8:	9affffc4 	bls	35d0 <memset+0x2c>
    36bc:	e2833001 	add	r3, r3, #1
    36c0:	e2822001 	add	r2, r2, #1
    36c4:	e5431001 	strb	r1, [r3, #-1]
    36c8:	e2833001 	add	r3, r3, #1
    36cc:	e1530002 	cmp	r3, r2
    36d0:	1afffffb 	bne	36c4 <memset+0x120>
    36d4:	eaffffbd 	b	35d0 <memset+0x2c>

000036d8 <cleanup_glue>:
    36d8:	e92d4038 	push	{r3, r4, r5, lr}
    36dc:	e1a04001 	mov	r4, r1
    36e0:	e5911000 	ldr	r1, [r1]
    36e4:	e3510000 	cmp	r1, #0
    36e8:	e1a05000 	mov	r5, r0
    36ec:	1bfffff9 	blne	36d8 <cleanup_glue>
    36f0:	e1a00005 	mov	r0, r5
    36f4:	e1a01004 	mov	r1, r4
    36f8:	ebfffe72 	bl	30c8 <_free_r>
    36fc:	e8bd4038 	pop	{r3, r4, r5, lr}
    3700:	e12fff1e 	bx	lr

00003704 <_reclaim_reent>:
    3704:	e59f30f0 	ldr	r3, [pc, #240]	; 37fc <_reclaim_reent+0xf8>
    3708:	e5933000 	ldr	r3, [r3]
    370c:	e1500003 	cmp	r0, r3
    3710:	e92d4070 	push	{r4, r5, r6, lr}
    3714:	e1a05000 	mov	r5, r0
    3718:	0a00002b 	beq	37cc <_reclaim_reent+0xc8>
    371c:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    3720:	e3520000 	cmp	r2, #0
    3724:	0a000011 	beq	3770 <_reclaim_reent+0x6c>
    3728:	e3a03000 	mov	r3, #0
    372c:	e1a06003 	mov	r6, r3
    3730:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    3734:	e3510000 	cmp	r1, #0
    3738:	0a000005 	beq	3754 <_reclaim_reent+0x50>
    373c:	e5914000 	ldr	r4, [r1]
    3740:	e1a00005 	mov	r0, r5
    3744:	ebfffe5f 	bl	30c8 <_free_r>
    3748:	e2541000 	subs	r1, r4, #0
    374c:	1afffffa 	bne	373c <_reclaim_reent+0x38>
    3750:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    3754:	e2866001 	add	r6, r6, #1
    3758:	e3560020 	cmp	r6, #32
    375c:	e1a03006 	mov	r3, r6
    3760:	1afffff2 	bne	3730 <_reclaim_reent+0x2c>
    3764:	e1a00005 	mov	r0, r5
    3768:	e1a01002 	mov	r1, r2
    376c:	ebfffe55 	bl	30c8 <_free_r>
    3770:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    3774:	e3510000 	cmp	r1, #0
    3778:	11a00005 	movne	r0, r5
    377c:	1bfffe51 	blne	30c8 <_free_r>
    3780:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    3784:	e3510000 	cmp	r1, #0
    3788:	0a000008 	beq	37b0 <_reclaim_reent+0xac>
    378c:	e2856f53 	add	r6, r5, #332	; 0x14c
    3790:	e1510006 	cmp	r1, r6
    3794:	0a000005 	beq	37b0 <_reclaim_reent+0xac>
    3798:	e5914000 	ldr	r4, [r1]
    379c:	e1a00005 	mov	r0, r5
    37a0:	ebfffe48 	bl	30c8 <_free_r>
    37a4:	e1560004 	cmp	r6, r4
    37a8:	e1a01004 	mov	r1, r4
    37ac:	1afffff9 	bne	3798 <_reclaim_reent+0x94>
    37b0:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    37b4:	e3510000 	cmp	r1, #0
    37b8:	11a00005 	movne	r0, r5
    37bc:	1bfffe41 	blne	30c8 <_free_r>
    37c0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    37c4:	e3530000 	cmp	r3, #0
    37c8:	1a000001 	bne	37d4 <_reclaim_reent+0xd0>
    37cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    37d0:	e12fff1e 	bx	lr
    37d4:	e1a00005 	mov	r0, r5
    37d8:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    37dc:	e1a0e00f 	mov	lr, pc
    37e0:	e12fff1c 	bx	r12
    37e4:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    37e8:	e3510000 	cmp	r1, #0
    37ec:	0afffff6 	beq	37cc <_reclaim_reent+0xc8>
    37f0:	e1a00005 	mov	r0, r5
    37f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    37f8:	eaffffb6 	b	36d8 <cleanup_glue>
    37fc:	000047c8 	.word	0x000047c8

00003800 <_wrapup_reent>:
    3800:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3804:	e2507000 	subs	r7, r0, #0
    3808:	059f3060 	ldreq	r3, [pc, #96]	; 3870 <_wrapup_reent+0x70>
    380c:	05937000 	ldreq	r7, [r3]
    3810:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    3814:	e3560000 	cmp	r6, #0
    3818:	0a00000d 	beq	3854 <_wrapup_reent+0x54>
    381c:	e5965004 	ldr	r5, [r6, #4]
    3820:	e2554001 	subs	r4, r5, #1
    3824:	52855002 	addpl	r5, r5, #2
    3828:	50865105 	addpl	r5, r6, r5, lsl #2
    382c:	4a000005 	bmi	3848 <_wrapup_reent+0x48>
    3830:	e5353004 	ldr	r3, [r5, #-4]!
    3834:	e2444001 	sub	r4, r4, #1
    3838:	e1a0e00f 	mov	lr, pc
    383c:	e12fff13 	bx	r3
    3840:	e3740001 	cmn	r4, #1
    3844:	1afffff9 	bne	3830 <_wrapup_reent+0x30>
    3848:	e5966000 	ldr	r6, [r6]
    384c:	e3560000 	cmp	r6, #0
    3850:	1afffff1 	bne	381c <_wrapup_reent+0x1c>
    3854:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    3858:	e3530000 	cmp	r3, #0
    385c:	11a00007 	movne	r0, r7
    3860:	11a0e00f 	movne	lr, pc
    3864:	112fff13 	bxne	r3
    3868:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    386c:	e12fff1e 	bx	lr
    3870:	000047c8 	.word	0x000047c8

00003874 <__sread>:
    3874:	e92d4010 	push	{r4, lr}
    3878:	e1a04001 	mov	r4, r1
    387c:	e1d110fe 	ldrsh	r1, [r1, #14]
    3880:	eb0000c5 	bl	3b9c <_read_r>
    3884:	e3500000 	cmp	r0, #0
    3888:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
    388c:	b1d430bc 	ldrhlt	r3, [r4, #12]
    3890:	a0833000 	addge	r3, r3, r0
    3894:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
    3898:	a5843050 	strge	r3, [r4, #80]	; 0x50
    389c:	b1c430bc 	strhlt	r3, [r4, #12]
    38a0:	e8bd4010 	pop	{r4, lr}
    38a4:	e12fff1e 	bx	lr

000038a8 <__seofread>:
    38a8:	e3a00000 	mov	r0, #0
    38ac:	e12fff1e 	bx	lr

000038b0 <__swrite>:
    38b0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    38b4:	e1a04001 	mov	r4, r1
    38b8:	e1d110bc 	ldrh	r1, [r1, #12]
    38bc:	e3110c01 	tst	r1, #256	; 0x100
    38c0:	e1a07000 	mov	r7, r0
    38c4:	e1a06002 	mov	r6, r2
    38c8:	e1a05003 	mov	r5, r3
    38cc:	0a000004 	beq	38e4 <__swrite+0x34>
    38d0:	e1d410fe 	ldrsh	r1, [r4, #14]
    38d4:	e3a02000 	mov	r2, #0
    38d8:	e3a03002 	mov	r3, #2
    38dc:	eb00009d 	bl	3b58 <_lseek_r>
    38e0:	e1d410bc 	ldrh	r1, [r4, #12]
    38e4:	e3c11a01 	bic	r1, r1, #4096	; 0x1000
    38e8:	e1c410bc 	strh	r1, [r4, #12]
    38ec:	e1a00007 	mov	r0, r7
    38f0:	e1d410fe 	ldrsh	r1, [r4, #14]
    38f4:	e1a02006 	mov	r2, r6
    38f8:	e1a03005 	mov	r3, r5
    38fc:	eb000013 	bl	3950 <_write_r>
    3900:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3904:	e12fff1e 	bx	lr

00003908 <__sseek>:
    3908:	e92d4010 	push	{r4, lr}
    390c:	e1a04001 	mov	r4, r1
    3910:	e1d110fe 	ldrsh	r1, [r1, #14]
    3914:	eb00008f 	bl	3b58 <_lseek_r>
    3918:	e1d430bc 	ldrh	r3, [r4, #12]
    391c:	e3700001 	cmn	r0, #1
    3920:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
    3924:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    3928:	01c430bc 	strheq	r3, [r4, #12]
    392c:	11c430bc 	strhne	r3, [r4, #12]
    3930:	15840050 	strne	r0, [r4, #80]	; 0x50
    3934:	e8bd4010 	pop	{r4, lr}
    3938:	e12fff1e 	bx	lr

0000393c <__sclose>:
    393c:	e92d4008 	push	{r3, lr}
    3940:	e1d110fe 	ldrsh	r1, [r1, #14]
    3944:	eb000012 	bl	3994 <_close_r>
    3948:	e8bd4008 	pop	{r3, lr}
    394c:	e12fff1e 	bx	lr

00003950 <_write_r>:
    3950:	e92d4038 	push	{r3, r4, r5, lr}
    3954:	e59f4034 	ldr	r4, [pc, #52]	; 3990 <_write_r+0x40>
    3958:	e1a05000 	mov	r5, r0
    395c:	e1a00001 	mov	r0, r1
    3960:	e1a01002 	mov	r1, r2
    3964:	e1a02003 	mov	r2, r3
    3968:	e3a03000 	mov	r3, #0
    396c:	e5843000 	str	r3, [r4]
    3970:	eb000137 	bl	3e54 <_write>
    3974:	e3700001 	cmn	r0, #1
    3978:	1a000002 	bne	3988 <_write_r+0x38>
    397c:	e5943000 	ldr	r3, [r4]
    3980:	e3530000 	cmp	r3, #0
    3984:	15853000 	strne	r3, [r5]
    3988:	e8bd4038 	pop	{r3, r4, r5, lr}
    398c:	e12fff1e 	bx	lr
    3990:	000054ac 	.word	0x000054ac

00003994 <_close_r>:
    3994:	e92d4038 	push	{r3, r4, r5, lr}
    3998:	e59f402c 	ldr	r4, [pc, #44]	; 39cc <_close_r+0x38>
    399c:	e3a03000 	mov	r3, #0
    39a0:	e1a05000 	mov	r5, r0
    39a4:	e1a00001 	mov	r0, r1
    39a8:	e5843000 	str	r3, [r4]
    39ac:	eb00009e 	bl	3c2c <_close>
    39b0:	e3700001 	cmn	r0, #1
    39b4:	1a000002 	bne	39c4 <_close_r+0x30>
    39b8:	e5943000 	ldr	r3, [r4]
    39bc:	e3530000 	cmp	r3, #0
    39c0:	15853000 	strne	r3, [r5]
    39c4:	e8bd4038 	pop	{r3, r4, r5, lr}
    39c8:	e12fff1e 	bx	lr
    39cc:	000054ac 	.word	0x000054ac

000039d0 <_fclose_r>:
    39d0:	e92d4070 	push	{r4, r5, r6, lr}
    39d4:	e2514000 	subs	r4, r1, #0
    39d8:	e1a05000 	mov	r5, r0
    39dc:	01a06004 	moveq	r6, r4
    39e0:	0a00002b 	beq	3a94 <_fclose_r+0xc4>
    39e4:	ebfffd62 	bl	2f74 <__sfp_lock_acquire>
    39e8:	e3550000 	cmp	r5, #0
    39ec:	0a000002 	beq	39fc <_fclose_r+0x2c>
    39f0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    39f4:	e3530000 	cmp	r3, #0
    39f8:	0a000028 	beq	3aa0 <_fclose_r+0xd0>
    39fc:	e1d460fc 	ldrsh	r6, [r4, #12]
    3a00:	e3560000 	cmp	r6, #0
    3a04:	0a000021 	beq	3a90 <_fclose_r+0xc0>
    3a08:	e1a00005 	mov	r0, r5
    3a0c:	e1a01004 	mov	r1, r4
    3a10:	ebfffc21 	bl	2a9c <_fflush_r>
    3a14:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    3a18:	e3530000 	cmp	r3, #0
    3a1c:	e1a06000 	mov	r6, r0
    3a20:	0a000005 	beq	3a3c <_fclose_r+0x6c>
    3a24:	e1a00005 	mov	r0, r5
    3a28:	e594101c 	ldr	r1, [r4, #28]
    3a2c:	e1a0e00f 	mov	lr, pc
    3a30:	e12fff13 	bx	r3
    3a34:	e3500000 	cmp	r0, #0
    3a38:	b3e06000 	mvnlt	r6, #0
    3a3c:	e1d430bc 	ldrh	r3, [r4, #12]
    3a40:	e3130080 	tst	r3, #128	; 0x80
    3a44:	1a00001b 	bne	3ab8 <_fclose_r+0xe8>
    3a48:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    3a4c:	e3510000 	cmp	r1, #0
    3a50:	0a000005 	beq	3a6c <_fclose_r+0x9c>
    3a54:	e2843040 	add	r3, r4, #64	; 0x40
    3a58:	e1510003 	cmp	r1, r3
    3a5c:	11a00005 	movne	r0, r5
    3a60:	1bfffd98 	blne	30c8 <_free_r>
    3a64:	e3a03000 	mov	r3, #0
    3a68:	e5843030 	str	r3, [r4, #48]	; 0x30
    3a6c:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    3a70:	e3510000 	cmp	r1, #0
    3a74:	0a000003 	beq	3a88 <_fclose_r+0xb8>
    3a78:	e1a00005 	mov	r0, r5
    3a7c:	ebfffd91 	bl	30c8 <_free_r>
    3a80:	e3a03000 	mov	r3, #0
    3a84:	e5843044 	str	r3, [r4, #68]	; 0x44
    3a88:	e3a03000 	mov	r3, #0
    3a8c:	e1c430bc 	strh	r3, [r4, #12]
    3a90:	ebfffd38 	bl	2f78 <__sfp_lock_release>
    3a94:	e1a00006 	mov	r0, r6
    3a98:	e8bd4070 	pop	{r4, r5, r6, lr}
    3a9c:	e12fff1e 	bx	lr
    3aa0:	e1a00005 	mov	r0, r5
    3aa4:	ebfffcd6 	bl	2e04 <__sinit>
    3aa8:	e1d460fc 	ldrsh	r6, [r4, #12]
    3aac:	e3560000 	cmp	r6, #0
    3ab0:	1affffd4 	bne	3a08 <_fclose_r+0x38>
    3ab4:	eafffff5 	b	3a90 <_fclose_r+0xc0>
    3ab8:	e1a00005 	mov	r0, r5
    3abc:	e5941010 	ldr	r1, [r4, #16]
    3ac0:	ebfffd80 	bl	30c8 <_free_r>
    3ac4:	eaffffdf 	b	3a48 <_fclose_r+0x78>

00003ac8 <fclose>:
    3ac8:	e59f3008 	ldr	r3, [pc, #8]	; 3ad8 <fclose+0x10>
    3acc:	e1a01000 	mov	r1, r0
    3ad0:	e5930000 	ldr	r0, [r3]
    3ad4:	eaffffbd 	b	39d0 <_fclose_r>
    3ad8:	000047c8 	.word	0x000047c8

00003adc <_fstat_r>:
    3adc:	e92d4038 	push	{r3, r4, r5, lr}
    3ae0:	e59f4030 	ldr	r4, [pc, #48]	; 3b18 <_fstat_r+0x3c>
    3ae4:	e3a03000 	mov	r3, #0
    3ae8:	e1a05000 	mov	r5, r0
    3aec:	e1a00001 	mov	r0, r1
    3af0:	e1a01002 	mov	r1, r2
    3af4:	e5843000 	str	r3, [r4]
    3af8:	eb00006f 	bl	3cbc <_fstat>
    3afc:	e3700001 	cmn	r0, #1
    3b00:	1a000002 	bne	3b10 <_fstat_r+0x34>
    3b04:	e5943000 	ldr	r3, [r4]
    3b08:	e3530000 	cmp	r3, #0
    3b0c:	15853000 	strne	r3, [r5]
    3b10:	e8bd4038 	pop	{r3, r4, r5, lr}
    3b14:	e12fff1e 	bx	lr
    3b18:	000054ac 	.word	0x000054ac

00003b1c <_isatty_r>:
    3b1c:	e92d4038 	push	{r3, r4, r5, lr}
    3b20:	e59f402c 	ldr	r4, [pc, #44]	; 3b54 <_isatty_r+0x38>
    3b24:	e3a03000 	mov	r3, #0
    3b28:	e1a05000 	mov	r5, r0
    3b2c:	e1a00001 	mov	r0, r1
    3b30:	e5843000 	str	r3, [r4]
    3b34:	eb000078 	bl	3d1c <_isatty>
    3b38:	e3700001 	cmn	r0, #1
    3b3c:	1a000002 	bne	3b4c <_isatty_r+0x30>
    3b40:	e5943000 	ldr	r3, [r4]
    3b44:	e3530000 	cmp	r3, #0
    3b48:	15853000 	strne	r3, [r5]
    3b4c:	e8bd4038 	pop	{r3, r4, r5, lr}
    3b50:	e12fff1e 	bx	lr
    3b54:	000054ac 	.word	0x000054ac

00003b58 <_lseek_r>:
    3b58:	e92d4038 	push	{r3, r4, r5, lr}
    3b5c:	e59f4034 	ldr	r4, [pc, #52]	; 3b98 <_lseek_r+0x40>
    3b60:	e1a05000 	mov	r5, r0
    3b64:	e1a00001 	mov	r0, r1
    3b68:	e1a01002 	mov	r1, r2
    3b6c:	e1a02003 	mov	r2, r3
    3b70:	e3a03000 	mov	r3, #0
    3b74:	e5843000 	str	r3, [r4]
    3b78:	eb000071 	bl	3d44 <_lseek>
    3b7c:	e3700001 	cmn	r0, #1
    3b80:	1a000002 	bne	3b90 <_lseek_r+0x38>
    3b84:	e5943000 	ldr	r3, [r4]
    3b88:	e3530000 	cmp	r3, #0
    3b8c:	15853000 	strne	r3, [r5]
    3b90:	e8bd4038 	pop	{r3, r4, r5, lr}
    3b94:	e12fff1e 	bx	lr
    3b98:	000054ac 	.word	0x000054ac

00003b9c <_read_r>:
    3b9c:	e92d4038 	push	{r3, r4, r5, lr}
    3ba0:	e59f4034 	ldr	r4, [pc, #52]	; 3bdc <_read_r+0x40>
    3ba4:	e1a05000 	mov	r5, r0
    3ba8:	e1a00001 	mov	r0, r1
    3bac:	e1a01002 	mov	r1, r2
    3bb0:	e1a02003 	mov	r2, r3
    3bb4:	e3a03000 	mov	r3, #0
    3bb8:	e5843000 	str	r3, [r4]
    3bbc:	eb00008c 	bl	3df4 <_read>
    3bc0:	e3700001 	cmn	r0, #1
    3bc4:	1a000002 	bne	3bd4 <_read_r+0x38>
    3bc8:	e5943000 	ldr	r3, [r4]
    3bcc:	e3530000 	cmp	r3, #0
    3bd0:	15853000 	strne	r3, [r5]
    3bd4:	e8bd4038 	pop	{r3, r4, r5, lr}
    3bd8:	e12fff1e 	bx	lr
    3bdc:	000054ac 	.word	0x000054ac

00003be0 <__cs3_premain>:
    3be0:	e92d4008 	push	{r3, lr}
    3be4:	eb0001a5 	bl	4280 <__libc_init_array>
    3be8:	e59f3030 	ldr	r3, [pc, #48]	; 3c20 <__cs3_premain+0x40>
    3bec:	e3530000 	cmp	r3, #0
    3bf0:	15930000 	ldrne	r0, [r3]
    3bf4:	01a00003 	moveq	r0, r3
    3bf8:	e59f3024 	ldr	r3, [pc, #36]	; 3c24 <__cs3_premain+0x44>
    3bfc:	e3530000 	cmp	r3, #0
    3c00:	15931000 	ldrne	r1, [r3]
    3c04:	01a01003 	moveq	r1, r3
    3c08:	e3a02000 	mov	r2, #0
    3c0c:	ebfff353 	bl	960 <main>
    3c10:	e59f3010 	ldr	r3, [pc, #16]	; 3c28 <__cs3_premain+0x48>
    3c14:	e3530000 	cmp	r3, #0
    3c18:	1bfff4ca 	blne	f48 <exit>
    3c1c:	eafffffe 	b	3c1c <__cs3_premain+0x3c>
    3c20:	00005554 	.word	0x00005554
    3c24:	00005558 	.word	0x00005558
    3c28:	00000f48 	.word	0x00000f48

00003c2c <_close>:
    3c2c:	e92d4038 	push	{r3, r4, r5, lr}
    3c30:	e1a05000 	mov	r5, r0
    3c34:	eb0000e8 	bl	3fdc <__cs3_openslot>
    3c38:	e2504000 	subs	r4, r0, #0
    3c3c:	0a000016 	beq	3c9c <_close+0x70>
    3c40:	e2453001 	sub	r3, r5, #1
    3c44:	e3530001 	cmp	r3, #1
    3c48:	9a000008 	bls	3c70 <_close+0x44>
    3c4c:	e3a00002 	mov	r0, #2
    3c50:	e1a01004 	mov	r1, r4
    3c54:	ef123456 	svc	0x00123456
    3c58:	e3500000 	cmp	r0, #0
    3c5c:	03e03000 	mvneq	r3, #0
    3c60:	05843000 	streq	r3, [r4]
    3c64:	eb00010a 	bl	4094 <__cs3_checkerror>
    3c68:	e8bd4038 	pop	{r3, r4, r5, lr}
    3c6c:	e12fff1e 	bx	lr
    3c70:	e3550001 	cmp	r5, #1
    3c74:	13e03007 	mvnne	r3, #7
    3c78:	03a03008 	moveq	r3, #8
    3c7c:	e7943003 	ldr	r3, [r4, r3]
    3c80:	e5942000 	ldr	r2, [r4]
    3c84:	e1520003 	cmp	r2, r3
    3c88:	03e03000 	mvneq	r3, #0
    3c8c:	05843000 	streq	r3, [r4]
    3c90:	03a00000 	moveq	r0, #0
    3c94:	1affffec 	bne	3c4c <_close+0x20>
    3c98:	eafffff2 	b	3c68 <_close+0x3c>
    3c9c:	e3e00000 	mvn	r0, #0
    3ca0:	eafffff0 	b	3c68 <_close+0x3c>

00003ca4 <_exit>:
    3ca4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3ca8:	e3a00018 	mov	r0, #24
    3cac:	e59f1004 	ldr	r1, [pc, #4]	; 3cb8 <_exit+0x14>
    3cb0:	ef123456 	svc	0x00123456
    3cb4:	eafffffe 	b	3cb4 <_exit+0x10>
    3cb8:	00020026 	.word	0x00020026

00003cbc <_fstat>:
    3cbc:	e92d4038 	push	{r3, r4, r5, lr}
    3cc0:	e1a04001 	mov	r4, r1
    3cc4:	eb0000c4 	bl	3fdc <__cs3_openslot>
    3cc8:	e2505000 	subs	r5, r0, #0
    3ccc:	0a000010 	beq	3d14 <_fstat+0x58>
    3cd0:	e1a00004 	mov	r0, r4
    3cd4:	e3a01000 	mov	r1, #0
    3cd8:	e3a0203c 	mov	r2, #60	; 0x3c
    3cdc:	ebfffe30 	bl	35a4 <memset>
    3ce0:	e3a03a02 	mov	r3, #8192	; 0x2000
    3ce4:	e5843004 	str	r3, [r4, #4]
    3ce8:	e3a03b01 	mov	r3, #1024	; 0x400
    3cec:	e584302c 	str	r3, [r4, #44]	; 0x2c
    3cf0:	e3a0000c 	mov	r0, #12
    3cf4:	e1a01005 	mov	r1, r5
    3cf8:	ef123456 	svc	0x00123456
    3cfc:	e3700001 	cmn	r0, #1
    3d00:	15840010 	strne	r0, [r4, #16]
    3d04:	13a00000 	movne	r0, #0
    3d08:	eb0000e1 	bl	4094 <__cs3_checkerror>
    3d0c:	e8bd4038 	pop	{r3, r4, r5, lr}
    3d10:	e12fff1e 	bx	lr
    3d14:	e3e00000 	mvn	r0, #0
    3d18:	eafffffb 	b	3d0c <_fstat+0x50>

00003d1c <_isatty>:
    3d1c:	e92d4008 	push	{r3, lr}
    3d20:	eb0000ad 	bl	3fdc <__cs3_openslot>
    3d24:	e2501000 	subs	r1, r0, #0
    3d28:	01a00001 	moveq	r0, r1
    3d2c:	0a000002 	beq	3d3c <_isatty+0x20>
    3d30:	e3a00009 	mov	r0, #9
    3d34:	ef123456 	svc	0x00123456
    3d38:	eb0000d5 	bl	4094 <__cs3_checkerror>
    3d3c:	e8bd4008 	pop	{r3, lr}
    3d40:	e12fff1e 	bx	lr

00003d44 <_lseek>:
    3d44:	e92d4070 	push	{r4, r5, r6, lr}
    3d48:	e24dd008 	sub	sp, sp, #8
    3d4c:	e1a04001 	mov	r4, r1
    3d50:	e1a05002 	mov	r5, r2
    3d54:	eb0000a0 	bl	3fdc <__cs3_openslot>
    3d58:	e2506000 	subs	r6, r0, #0
    3d5c:	0a000022 	beq	3dec <_lseek+0xa8>
    3d60:	e3550001 	cmp	r5, #1
    3d64:	0a00001d 	beq	3de0 <_lseek+0x9c>
    3d68:	e3550002 	cmp	r5, #2
    3d6c:	0a000014 	beq	3dc4 <_lseek+0x80>
    3d70:	e3550000 	cmp	r5, #0
    3d74:	1a00000d 	bne	3db0 <_lseek+0x6c>
    3d78:	e5963000 	ldr	r3, [r6]
    3d7c:	e3540000 	cmp	r4, #0
    3d80:	e88d0018 	stm	sp, {r3, r4}
    3d84:	ba000009 	blt	3db0 <_lseek+0x6c>
    3d88:	e3a0000a 	mov	r0, #10
    3d8c:	e1a0100d 	mov	r1, sp
    3d90:	ef123456 	svc	0x00123456
    3d94:	e3700001 	cmn	r0, #1
    3d98:	15864004 	strne	r4, [r6, #4]
    3d9c:	11a00004 	movne	r0, r4
    3da0:	eb0000bb 	bl	4094 <__cs3_checkerror>
    3da4:	e28dd008 	add	sp, sp, #8
    3da8:	e8bd4070 	pop	{r4, r5, r6, lr}
    3dac:	e12fff1e 	bx	lr
    3db0:	eb00012e 	bl	4270 <__errno>
    3db4:	e3a03016 	mov	r3, #22
    3db8:	e5803000 	str	r3, [r0]
    3dbc:	e3e00000 	mvn	r0, #0
    3dc0:	eafffff7 	b	3da4 <_lseek+0x60>
    3dc4:	e3a0000c 	mov	r0, #12
    3dc8:	e1a01006 	mov	r1, r6
    3dcc:	ef123456 	svc	0x00123456
    3dd0:	e3700001 	cmn	r0, #1
    3dd4:	10844000 	addne	r4, r4, r0
    3dd8:	1affffe6 	bne	3d78 <_lseek+0x34>
    3ddc:	eaffffef 	b	3da0 <_lseek+0x5c>
    3de0:	e5963004 	ldr	r3, [r6, #4]
    3de4:	e0844003 	add	r4, r4, r3
    3de8:	eaffffe2 	b	3d78 <_lseek+0x34>
    3dec:	e3e00000 	mvn	r0, #0
    3df0:	eaffffeb 	b	3da4 <_lseek+0x60>

00003df4 <_read>:
    3df4:	e92d4070 	push	{r4, r5, r6, lr}
    3df8:	e24dd010 	sub	sp, sp, #16
    3dfc:	e1a06001 	mov	r6, r1
    3e00:	e1a05002 	mov	r5, r2
    3e04:	eb000074 	bl	3fdc <__cs3_openslot>
    3e08:	e2504000 	subs	r4, r0, #0
    3e0c:	0a00000e 	beq	3e4c <_read+0x58>
    3e10:	e5943000 	ldr	r3, [r4]
    3e14:	e98d0048 	stmib	sp, {r3, r6}
    3e18:	e58d500c 	str	r5, [sp, #12]
    3e1c:	e3a00006 	mov	r0, #6
    3e20:	e28d1004 	add	r1, sp, #4
    3e24:	ef123456 	svc	0x00123456
    3e28:	e3700001 	cmn	r0, #1
    3e2c:	15943004 	ldrne	r3, [r4, #4]
    3e30:	10600005 	rsbne	r0, r0, r5
    3e34:	10833000 	addne	r3, r3, r0
    3e38:	15843004 	strne	r3, [r4, #4]
    3e3c:	eb000094 	bl	4094 <__cs3_checkerror>
    3e40:	e28dd010 	add	sp, sp, #16
    3e44:	e8bd4070 	pop	{r4, r5, r6, lr}
    3e48:	e12fff1e 	bx	lr
    3e4c:	e3e00000 	mvn	r0, #0
    3e50:	eafffffa 	b	3e40 <_read+0x4c>

00003e54 <_write>:
    3e54:	e92d4070 	push	{r4, r5, r6, lr}
    3e58:	e24dd010 	sub	sp, sp, #16
    3e5c:	e1a06001 	mov	r6, r1
    3e60:	e1a05002 	mov	r5, r2
    3e64:	eb00005c 	bl	3fdc <__cs3_openslot>
    3e68:	e2504000 	subs	r4, r0, #0
    3e6c:	0a00000e 	beq	3eac <_write+0x58>
    3e70:	e5943000 	ldr	r3, [r4]
    3e74:	e98d0048 	stmib	sp, {r3, r6}
    3e78:	e58d500c 	str	r5, [sp, #12]
    3e7c:	e3a00005 	mov	r0, #5
    3e80:	e28d1004 	add	r1, sp, #4
    3e84:	ef123456 	svc	0x00123456
    3e88:	e3700001 	cmn	r0, #1
    3e8c:	15943004 	ldrne	r3, [r4, #4]
    3e90:	10600005 	rsbne	r0, r0, r5
    3e94:	10833000 	addne	r3, r3, r0
    3e98:	15843004 	strne	r3, [r4, #4]
    3e9c:	eb00007c 	bl	4094 <__cs3_checkerror>
    3ea0:	e28dd010 	add	sp, sp, #16
    3ea4:	e8bd4070 	pop	{r4, r5, r6, lr}
    3ea8:	e12fff1e 	bx	lr
    3eac:	e3e00000 	mvn	r0, #0
    3eb0:	eafffffa 	b	3ea0 <_write+0x4c>

00003eb4 <_sbrk>:
    3eb4:	e92d4008 	push	{r3, lr}
    3eb8:	e59f305c 	ldr	r3, [pc, #92]	; 3f1c <_sbrk+0x68>
    3ebc:	e59f105c 	ldr	r1, [pc, #92]	; 3f20 <_sbrk+0x6c>
    3ec0:	e5932000 	ldr	r2, [r3]
    3ec4:	e5913000 	ldr	r3, [r1]
    3ec8:	e3520000 	cmp	r2, #0
    3ecc:	e0830000 	add	r0, r3, r0
    3ed0:	0a000002 	beq	3ee0 <_sbrk+0x2c>
    3ed4:	e0602002 	rsb	r2, r0, r2
    3ed8:	e3520000 	cmp	r2, #0
    3edc:	ba000009 	blt	3f08 <_sbrk+0x54>
    3ee0:	e04d2003 	sub	r2, sp, r3
    3ee4:	e3520000 	cmp	r2, #0
    3ee8:	ba000002 	blt	3ef8 <_sbrk+0x44>
    3eec:	e04d2000 	sub	r2, sp, r0
    3ef0:	e35200ff 	cmp	r2, #255	; 0xff
    3ef4:	da000003 	ble	3f08 <_sbrk+0x54>
    3ef8:	e5810000 	str	r0, [r1]
    3efc:	e1a00003 	mov	r0, r3
    3f00:	e8bd4008 	pop	{r3, lr}
    3f04:	e12fff1e 	bx	lr
    3f08:	eb0000d8 	bl	4270 <__errno>
    3f0c:	e3a0300c 	mov	r3, #12
    3f10:	e5803000 	str	r3, [r0]
    3f14:	e3e03000 	mvn	r3, #0
    3f18:	eafffff7 	b	3efc <_sbrk+0x48>
    3f1c:	00005008 	.word	0x00005008
    3f20:	0000500c 	.word	0x0000500c

00003f24 <initialize_monitor_handles.part.0>:
    3f24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    3f28:	e59f50a4 	ldr	r5, [pc, #164]	; 3fd4 <initialize_monitor_handles.part.0+0xb0>
    3f2c:	e24dd014 	sub	sp, sp, #20
    3f30:	e3a03000 	mov	r3, #0
    3f34:	e3e02000 	mvn	r2, #0
    3f38:	e7852003 	str	r2, [r5, r3]
    3f3c:	e2833008 	add	r3, r3, #8
    3f40:	e35300a0 	cmp	r3, #160	; 0xa0
    3f44:	e59f4088 	ldr	r4, [pc, #136]	; 3fd4 <initialize_monitor_handles.part.0+0xb0>
    3f48:	1afffffa 	bne	3f38 <initialize_monitor_handles.part.0+0x14>
    3f4c:	e59f7084 	ldr	r7, [pc, #132]	; 3fd8 <initialize_monitor_handles.part.0+0xb4>
    3f50:	e3a06003 	mov	r6, #3
    3f54:	e3a03000 	mov	r3, #0
    3f58:	e58d7004 	str	r7, [sp, #4]
    3f5c:	e58d600c 	str	r6, [sp, #12]
    3f60:	e58d3008 	str	r3, [sp, #8]
    3f64:	e3a00001 	mov	r0, #1
    3f68:	e28d1004 	add	r1, sp, #4
    3f6c:	ef123456 	svc	0x00123456
    3f70:	e3a03004 	mov	r3, #4
    3f74:	e5840000 	str	r0, [r4]
    3f78:	e58d7004 	str	r7, [sp, #4]
    3f7c:	e58d600c 	str	r6, [sp, #12]
    3f80:	e58d3008 	str	r3, [sp, #8]
    3f84:	e3a00001 	mov	r0, #1
    3f88:	e08d1003 	add	r1, sp, r3
    3f8c:	ef123456 	svc	0x00123456
    3f90:	e3a03008 	mov	r3, #8
    3f94:	e5840008 	str	r0, [r4, #8]
    3f98:	e58d7004 	str	r7, [sp, #4]
    3f9c:	e58d600c 	str	r6, [sp, #12]
    3fa0:	e58d3008 	str	r3, [sp, #8]
    3fa4:	e3a00001 	mov	r0, #1
    3fa8:	e28d1004 	add	r1, sp, #4
    3fac:	ef123456 	svc	0x00123456
    3fb0:	e3700001 	cmn	r0, #1
    3fb4:	05943008 	ldreq	r3, [r4, #8]
    3fb8:	e5840010 	str	r0, [r4, #16]
    3fbc:	05843010 	streq	r3, [r4, #16]
    3fc0:	e3a03001 	mov	r3, #1
    3fc4:	e58530a0 	str	r3, [r5, #160]	; 0xa0
    3fc8:	e28dd014 	add	sp, sp, #20
    3fcc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    3fd0:	e12fff1e 	bx	lr
    3fd4:	000054b0 	.word	0x000054b0
    3fd8:	0000433c 	.word	0x0000433c

00003fdc <__cs3_openslot>:
    3fdc:	e92d4038 	push	{r3, r4, r5, lr}
    3fe0:	e59f5044 	ldr	r5, [pc, #68]	; 402c <__cs3_openslot+0x50>
    3fe4:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
    3fe8:	e3530000 	cmp	r3, #0
    3fec:	e1a04000 	mov	r4, r0
    3ff0:	0bffffcb 	bleq	3f24 <initialize_monitor_handles.part.0>
    3ff4:	e3540013 	cmp	r4, #19
    3ff8:	8a000006 	bhi	4018 <__cs3_openslot+0x3c>
    3ffc:	e7953184 	ldr	r3, [r5, r4, lsl #3]
    4000:	e3730001 	cmn	r3, #1
    4004:	159f0020 	ldrne	r0, [pc, #32]	; 402c <__cs3_openslot+0x50>
    4008:	10800184 	addne	r0, r0, r4, lsl #3
    400c:	0a000001 	beq	4018 <__cs3_openslot+0x3c>
    4010:	e8bd4038 	pop	{r3, r4, r5, lr}
    4014:	e12fff1e 	bx	lr
    4018:	eb000094 	bl	4270 <__errno>
    401c:	e3a03009 	mov	r3, #9
    4020:	e5803000 	str	r3, [r0]
    4024:	e3a00000 	mov	r0, #0
    4028:	eafffff8 	b	4010 <__cs3_openslot+0x34>
    402c:	000054b0 	.word	0x000054b0

00004030 <__cs3_newslot>:
    4030:	e92d4038 	push	{r3, r4, r5, lr}
    4034:	e59f4054 	ldr	r4, [pc, #84]	; 4090 <__cs3_newslot+0x60>
    4038:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
    403c:	e3530000 	cmp	r3, #0
    4040:	e1a05000 	mov	r5, r0
    4044:	0bffffb6 	bleq	3f24 <initialize_monitor_handles.part.0>
    4048:	e3a03000 	mov	r3, #0
    404c:	e7942183 	ldr	r2, [r4, r3, lsl #3]
    4050:	e3720001 	cmn	r2, #1
    4054:	e1a02183 	lsl	r2, r3, #3
    4058:	0a000008 	beq	4080 <__cs3_newslot+0x50>
    405c:	e2833001 	add	r3, r3, #1
    4060:	e3530014 	cmp	r3, #20
    4064:	1afffff8 	bne	404c <__cs3_newslot+0x1c>
    4068:	eb000080 	bl	4270 <__errno>
    406c:	e3a03018 	mov	r3, #24
    4070:	e5803000 	str	r3, [r0]
    4074:	e3a00000 	mov	r0, #0
    4078:	e8bd4038 	pop	{r3, r4, r5, lr}
    407c:	e12fff1e 	bx	lr
    4080:	e59f0008 	ldr	r0, [pc, #8]	; 4090 <__cs3_newslot+0x60>
    4084:	e5853000 	str	r3, [r5]
    4088:	e0800002 	add	r0, r0, r2
    408c:	eafffff9 	b	4078 <__cs3_newslot+0x48>
    4090:	000054b0 	.word	0x000054b0

00004094 <__cs3_checkerror>:
    4094:	e3700001 	cmn	r0, #1
    4098:	e92d4038 	push	{r3, r4, r5, lr}
    409c:	e1a04000 	mov	r4, r0
    40a0:	0a000002 	beq	40b0 <__cs3_checkerror+0x1c>
    40a4:	e1a00004 	mov	r0, r4
    40a8:	e8bd4038 	pop	{r3, r4, r5, lr}
    40ac:	e12fff1e 	bx	lr
    40b0:	eb00006e 	bl	4270 <__errno>
    40b4:	e3a01000 	mov	r1, #0
    40b8:	e1a05000 	mov	r5, r0
    40bc:	e3a00013 	mov	r0, #19
    40c0:	ef123456 	svc	0x00123456
    40c4:	e5850000 	str	r0, [r5]
    40c8:	eafffff5 	b	40a4 <__cs3_checkerror+0x10>

000040cc <initialize_argv>:
    40cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    40d0:	e3a00c01 	mov	r0, #256	; 0x100
    40d4:	e24dd008 	sub	sp, sp, #8
    40d8:	ebffff75 	bl	3eb4 <_sbrk>
    40dc:	e3700001 	cmn	r0, #1
    40e0:	e1a07000 	mov	r7, r0
    40e4:	0a000039 	beq	41d0 <initialize_argv+0x104>
    40e8:	e3a05000 	mov	r5, #0
    40ec:	e3a03c01 	mov	r3, #256	; 0x100
    40f0:	e5c05000 	strb	r5, [r0]
    40f4:	e1a0100d 	mov	r1, sp
    40f8:	e3a00015 	mov	r0, #21
    40fc:	e58d7000 	str	r7, [sp]
    4100:	e58d3004 	str	r3, [sp, #4]
    4104:	ef123456 	svc	0x00123456
    4108:	e59f8140 	ldr	r8, [pc, #320]	; 4250 <initialize_argv+0x184>
    410c:	e1a00005 	mov	r0, r5
    4110:	e3a09001 	mov	r9, #1
    4114:	e1a0a005 	mov	r10, r5
    4118:	e588a0a4 	str	r10, [r8, #164]	; 0xa4
    411c:	e1a0c007 	mov	r12, r7
    4120:	e1a04007 	mov	r4, r7
    4124:	e3a06000 	mov	r6, #0
    4128:	e5d41000 	ldrb	r1, [r4]
    412c:	e3510000 	cmp	r1, #0
    4130:	0a00001d 	beq	41ac <initialize_argv+0xe0>
    4134:	e3560000 	cmp	r6, #0
    4138:	e2842001 	add	r2, r4, #1
    413c:	1a000006 	bne	415c <initialize_argv+0x90>
    4140:	e3500000 	cmp	r0, #0
    4144:	159830a4 	ldrne	r3, [r8, #164]	; 0xa4
    4148:	1780c103 	strne	r12, [r0, r3, lsl #2]
    414c:	e59830a4 	ldr	r3, [r8, #164]	; 0xa4
    4150:	e2833001 	add	r3, r3, #1
    4154:	e58830a4 	str	r3, [r8, #164]	; 0xa4
    4158:	e3a06001 	mov	r6, #1
    415c:	e3510020 	cmp	r1, #32
    4160:	0a000022 	beq	41f0 <initialize_argv+0x124>
    4164:	e3510022 	cmp	r1, #34	; 0x22
    4168:	13510027 	cmpne	r1, #39	; 0x27
    416c:	1a00001a 	bne	41dc <initialize_argv+0x110>
    4170:	e5d43001 	ldrb	r3, [r4, #1]
    4174:	e3530000 	cmp	r3, #0
    4178:	0a000032 	beq	4248 <initialize_argv+0x17c>
    417c:	e1510003 	cmp	r1, r3
    4180:	0a00001f 	beq	4204 <initialize_argv+0x138>
    4184:	e2842002 	add	r2, r4, #2
    4188:	ea000001 	b	4194 <initialize_argv+0xc8>
    418c:	e1510003 	cmp	r1, r3
    4190:	0a00001c 	beq	4208 <initialize_argv+0x13c>
    4194:	e3500000 	cmp	r0, #0
    4198:	14cc3001 	strbne	r3, [r12], #1
    419c:	e1a04002 	mov	r4, r2
    41a0:	e4d23001 	ldrb	r3, [r2], #1
    41a4:	e3530000 	cmp	r3, #0
    41a8:	1afffff7 	bne	418c <initialize_argv+0xc0>
    41ac:	e3590001 	cmp	r9, #1
    41b0:	0a000016 	beq	4210 <initialize_argv+0x144>
    41b4:	e3590002 	cmp	r9, #2
    41b8:	1a000020 	bne	4240 <initialize_argv+0x174>
    41bc:	e3a03000 	mov	r3, #0
    41c0:	e5cc3000 	strb	r3, [r12]
    41c4:	e59820a4 	ldr	r2, [r8, #164]	; 0xa4
    41c8:	e7803102 	str	r3, [r0, r2, lsl #2]
    41cc:	e58800a8 	str	r0, [r8, #168]	; 0xa8
    41d0:	e28dd008 	add	sp, sp, #8
    41d4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    41d8:	e12fff1e 	bx	lr
    41dc:	e3500000 	cmp	r0, #0
    41e0:	01a04002 	moveq	r4, r2
    41e4:	14cc1001 	strbne	r1, [r12], #1
    41e8:	11a04002 	movne	r4, r2
    41ec:	eaffffcd 	b	4128 <initialize_argv+0x5c>
    41f0:	e3500000 	cmp	r0, #0
    41f4:	14cca001 	strbne	r10, [r12], #1
    41f8:	e1a04002 	mov	r4, r2
    41fc:	e3a06000 	mov	r6, #0
    4200:	eaffffc8 	b	4128 <initialize_argv+0x5c>
    4204:	e1a04002 	mov	r4, r2
    4208:	e2844001 	add	r4, r4, #1
    420c:	eaffffc5 	b	4128 <initialize_argv+0x5c>
    4210:	e0670004 	rsb	r0, r7, r4
    4214:	e2800010 	add	r0, r0, #16
    4218:	e3c0000f 	bic	r0, r0, #15
    421c:	e2400c01 	sub	r0, r0, #256	; 0x100
    4220:	ebffff23 	bl	3eb4 <_sbrk>
    4224:	e59800a4 	ldr	r0, [r8, #164]	; 0xa4
    4228:	e2800004 	add	r0, r0, #4
    422c:	e3c00003 	bic	r0, r0, #3
    4230:	e1a00100 	lsl	r0, r0, #2
    4234:	ebffff1e 	bl	3eb4 <_sbrk>
    4238:	e3700001 	cmn	r0, #1
    423c:	0affffe3 	beq	41d0 <initialize_argv+0x104>
    4240:	e2899001 	add	r9, r9, #1
    4244:	eaffffb3 	b	4118 <initialize_argv+0x4c>
    4248:	e1a04002 	mov	r4, r2
    424c:	eaffffd6 	b	41ac <initialize_argv+0xe0>
    4250:	000054b0 	.word	0x000054b0

00004254 <__cs3_isr_interrupt>:
    4254:	eafffffe 	b	4254 <__cs3_isr_interrupt>

00004258 <__cs3_isr_undef>:
    4258:	eafffffe 	b	4258 <__cs3_isr_undef>

0000425c <__cs3_isr_swi>:
    425c:	eafffffe 	b	425c <__cs3_isr_swi>

00004260 <__cs3_isr_pabort>:
    4260:	eafffffe 	b	4260 <__cs3_isr_pabort>

00004264 <__cs3_isr_dabort>:
    4264:	eafffffe 	b	4264 <__cs3_isr_dabort>

00004268 <__cs3_isr_irq>:
    4268:	eafffffe 	b	4268 <__cs3_isr_irq>

0000426c <__cs3_isr_fiq>:
    426c:	eafffffe 	b	426c <__cs3_isr_fiq>

00004270 <__errno>:
    4270:	e59f3004 	ldr	r3, [pc, #4]	; 427c <__errno+0xc>
    4274:	e5930000 	ldr	r0, [r3]
    4278:	e12fff1e 	bx	lr
    427c:	000047c8 	.word	0x000047c8

00004280 <__libc_init_array>:
    4280:	e92d4070 	push	{r4, r5, r6, lr}
    4284:	e59f506c 	ldr	r5, [pc, #108]	; 42f8 <__libc_init_array+0x78>
    4288:	e59f606c 	ldr	r6, [pc, #108]	; 42fc <__libc_init_array+0x7c>
    428c:	e0656006 	rsb	r6, r5, r6
    4290:	e1b06146 	asrs	r6, r6, #2
    4294:	12455004 	subne	r5, r5, #4
    4298:	13a04000 	movne	r4, #0
    429c:	0a000005 	beq	42b8 <__libc_init_array+0x38>
    42a0:	e5b53004 	ldr	r3, [r5, #4]!
    42a4:	e2844001 	add	r4, r4, #1
    42a8:	e1a0e00f 	mov	lr, pc
    42ac:	e12fff13 	bx	r3
    42b0:	e1560004 	cmp	r6, r4
    42b4:	1afffff9 	bne	42a0 <__libc_init_array+0x20>
    42b8:	e59f5040 	ldr	r5, [pc, #64]	; 4300 <__libc_init_array+0x80>
    42bc:	e59f6040 	ldr	r6, [pc, #64]	; 4304 <__libc_init_array+0x84>
    42c0:	e0656006 	rsb	r6, r5, r6
    42c4:	eb00001d 	bl	4340 <_init>
    42c8:	e1b06146 	asrs	r6, r6, #2
    42cc:	12455004 	subne	r5, r5, #4
    42d0:	13a04000 	movne	r4, #0
    42d4:	0a000005 	beq	42f0 <__libc_init_array+0x70>
    42d8:	e5b53004 	ldr	r3, [r5, #4]!
    42dc:	e2844001 	add	r4, r4, #1
    42e0:	e1a0e00f 	mov	lr, pc
    42e4:	e12fff13 	bx	r3
    42e8:	e1560004 	cmp	r6, r4
    42ec:	1afffff9 	bne	42d8 <__libc_init_array+0x58>
    42f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    42f4:	e12fff1e 	bx	lr
    42f8:	00004358 	.word	0x00004358
    42fc:	00004358 	.word	0x00004358
    4300:	00004358 	.word	0x00004358
    4304:	00004364 	.word	0x00004364

Disassembly of section .rodata:

0000430c <_global_impure_ptr-0x24>:
    430c:	69727453 	.word	0x69727453
    4310:	6920676e 	.word	0x6920676e
    4314:	6f742073 	.word	0x6f742073
    4318:	6f6c206f 	.word	0x6f6c206f
    431c:	6620676e 	.word	0x6620676e
    4320:	4c20726f 	.word	0x4c20726f
    4324:	64204443 	.word	0x64204443
    4328:	6c707369 	.word	0x6c707369
    432c:	002e7961 	.word	0x002e7961

00004330 <_global_impure_ptr>:
    4330:	000047d0 00000043 0000000a 0074743a     .G..C.......:tt.

00004340 <_init>:
    4340:	e1a0c00d 	mov	r12, sp
    4344:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4348:	e24cb004 	sub	r11, r12, #4
    434c:	e24bd028 	sub	sp, r11, #40	; 0x28
    4350:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    4354:	e12fff1e 	bx	lr

00004358 <__init_array_start>:
    4358:	00001304 	.word	0x00001304

0000435c <__frame_dummy_init_array_entry>:
    435c:	00000208 000040cc                       .....@..

00004364 <__libc_fini>:
    4364:	e1a0c00d 	mov	r12, sp
    4368:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    436c:	e24cb004 	sub	r11, r12, #4
    4370:	e24bd028 	sub	sp, r11, #40	; 0x28
    4374:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    4378:	e12fff1e 	bx	lr

0000437c <__fini_array_start>:
    437c:	000001c4 	.word	0x000001c4

00004380 <__cs3_regions>:
	...
    438c:	00005010 	.word	0x00005010
    4390:	00000550 	.word	0x00000550

00004394 <__cs3_regions_end>:
    4394:	00000000 	.word	0x00000000
